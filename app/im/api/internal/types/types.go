// Code generated by goctl. DO NOT EDIT.
package types

type KickedDevice struct {
	Platform string `json:"Platform"`
}

type EventInfo struct {
	Action    string `json:"Action"`     //用户上线或者下线的动作，Login 表示上线（TCP 建立），Logout 表示下线（TCP 断开），Disconnect 表示网络断开（TCP 断开）
	ToAccount string `json:"To_Account"` // 用户 UserID
	Reason    string `json:"Reason"`     // 用户上下线触发的原因：Login 的原因有 Register：App TCP 连接建立或断网重连Logout 的原因有 Unregister：App 用户注销帐号导致 TCP 断开Disconnect 的原因有 LinkClose：即时通信 IM 检测到 App TCP 连接断开（例如 kill App，客户端发出 TCP 的 FIN 包或 RST 包）；TimeOut：即时通信 IM 检测到 App 心跳包超时，认为 TCP 已断开（例如客户端网络异常断开，未发出 TCP 的 FIN 包或 RST 包，也无法发送心跳包）。心跳超时时间为400秒各种具体场景触发的回调 Reason 请参考 可能触发该回调的场景
}

type CallbackUrlArg struct {
	SdkAppid        int64  `json:"SdkAppid"`        //创建应用时在即时通信 IM 控制台分配的 SDKAppID
	CallbackCommand string `json:"CallbackCommand"` //固定为：State.StateChange
	Contenttype     string `json:"contenttype"`     //固定值为 JSON
	ClientIP        string `json:"ClientIp"`        //客户端 IP，格式如：127.0.0.1
	OptPlatform     string `json:"OptPlatform"`     //客户端平台
}

type TIMCallbackStateChangeReq struct {
	CallbackCommand string    `json:"CallbackCommand"` //回调命令
	Info            EventInfo `json:"Info"`            // 用户上下线的信息
	EventTime       int64     `json:"EventTime"`       //触发本次回调的时间戳，单位为毫秒。
}

type TIMCallbackResp struct {
	ActionStatus string `json:"ActionStatus"` //必填	请求处理的结果，OK 表示处理成功，FAIL 表示失败
	ErrorCode    int    `json:"ErrorCode"`    //必填	错误码，0表示 App 后台处理成功，1表示 App 后台处理失败
	ErrorInfo    string `json:"ErrorInfo"`    //必填	错误信息
}

type MsgContent struct {
	Text         string `json:"Text,optional"`
	Url          string `json:"Url,optional"`
	UUID         string `json:"UUID,optional"`
	Size         int    `json:"Size,optional"`
	Second       int    `json:"Second,optional"`
	DownloadFlag int    `json:"Download_Flag,optional"`
	Index        int    `json:"Index,optional"`
	Data         string `json:"Data,optional"`
}

type MsgBoday struct {
	MsgType    string     `json:"MsgType"`
	MsgContent MsgContent `json:"MsgContent,optional"`
}

type TIMCallbackAfterSendMsgReq struct {
	CallbackCommand string     `json:"CallbackCommand"`
	FromAccount     string     `json:"From_Account"`
	ToAccount       string     `json:"To_Account"`
	MsgSeq          int        `json:"MsgSeq"`
	MsgRandom       int        `json:"MsgRandom"`
	MsgTime         int        `json:"MsgTime"`
	MsgKey          string     `json:"MsgKey"`
	OnlineOnlyFlag  int        `json:"OnlineOnlyFlag"`
	SendMsgResult   int        `json:"SendMsgResult"`
	ErrorInfo       string     `json:"ErrorInfo"`
	UnreadMsgNum    int        `json:"UnreadMsgNum"`
	MsgBody         []MsgBoday `json:"MsgBody"`
}

type GenBaiduWxMpUrlReq struct {
	OriginId    string `json:"originId"`
	CurrentTime int64  `json:"currentTime"`
	Sign        string `json:"sign"`
	Path        string `json:"path"`
	Query       string `json:"query"`
}

type BaiduWxMpUrl struct {
	Scheme string `json:"scheme"`
}

type GenBaiduWxMpUrlResp struct {
	Code   int64        `json:"code"`
	Msg    string       `json:"msg"`
	Result BaiduWxMpUrl `json:"result"`
}
