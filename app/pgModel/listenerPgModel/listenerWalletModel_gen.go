// Code generated by goctl. DO NOT EDIT!

package listenerPgModel

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	listenerWalletFieldNames          = builder.RawFieldNames(&ListenerWallet{}, true)
	listenerWalletRows                = strings.Join(listenerWalletFieldNames, ",")
	listenerWalletRowsExpectAutoSet   = strings.Join(stringx.Remove(listenerWalletFieldNames, "create_time", "update_time", "create_t", "update_at"), ",")
	listenerWalletRowsWithPlaceHolder = builder.PostgreSqlJoin(stringx.Remove(listenerWalletFieldNames, "listener_uid", "create_time", "update_time", "create_at", "update_at"))

	cacheJakartaListenerWalletListenerUidPrefix = "cache:jakarta:listenerWallet:listenerUid:"
)

type (
	listenerWalletModel interface {
		Insert(ctx context.Context, data *ListenerWallet) (sql.Result, error)
		FindOne(ctx context.Context, listenerUid int64) (*ListenerWallet, error)
		Update(ctx context.Context, data *ListenerWallet) error
		Delete(ctx context.Context, listenerUid int64) error
	}

	defaultListenerWalletModel struct {
		sqlc.CachedConn
		table string
	}

	ListenerWallet struct {
		CreateTime              time.Time    `db:"create_time"`
		ListenerUid             int64        `db:"listener_uid"`
		Amount                  int64        `db:"amount"` // 已经确认的收益金额（分）减去提现的
		UpdateTime              time.Time    `db:"update_time"`
		RefundSumAmount         int64        `db:"refund_sum_amount"`          // 累计退款金额 (分)
		CashSumAmount           int64        `db:"cash_sum_amount"`            // 累计提现金额 （分）
		ApplyCashAmount         int64        `db:"apply_cash_amount"`          // 当前申请的提现金额
		LastConfirmTime         sql.NullTime `db:"last_confirm_time"`          // 最近一次获得收益的时间
		CurrentMonthOrderAmount int64        `db:"current_month_order_amount"` // 本月累计订单金额
		CurrentMonthAmount      int64        `db:"current_month_amount"`       // 本月已确认收益
		ResetStatTime           time.Time    `db:"reset_stat_time"`            // 本月统计重置时间
	}
)

func newListenerWalletModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultListenerWalletModel {
	return &defaultListenerWalletModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      `"jakarta"."listener_wallet"`,
	}
}

func (m *defaultListenerWalletModel) Delete(ctx context.Context, listenerUid int64) error {
	jakartaListenerWalletListenerUidKey := fmt.Sprintf("%s%v", cacheJakartaListenerWalletListenerUidPrefix, listenerUid)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where listener_uid = $1", m.table)
		return conn.ExecCtx(ctx, query, listenerUid)
	}, jakartaListenerWalletListenerUidKey)
	return err
}

func (m *defaultListenerWalletModel) FindOne(ctx context.Context, listenerUid int64) (*ListenerWallet, error) {
	jakartaListenerWalletListenerUidKey := fmt.Sprintf("%s%v", cacheJakartaListenerWalletListenerUidPrefix, listenerUid)
	var resp ListenerWallet
	err := m.QueryRowCtx(ctx, &resp, jakartaListenerWalletListenerUidKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where listener_uid = $1 limit 1", listenerWalletRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, listenerUid)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultListenerWalletModel) Insert(ctx context.Context, data *ListenerWallet) (sql.Result, error) {
	jakartaListenerWalletListenerUidKey := fmt.Sprintf("%s%v", cacheJakartaListenerWalletListenerUidPrefix, data.ListenerUid)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values ($1, $2, $3, $4, $5, $6, $7, $8, $9)", m.table, listenerWalletRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.ListenerUid, data.Amount, data.RefundSumAmount, data.CashSumAmount, data.ApplyCashAmount, data.LastConfirmTime, data.CurrentMonthOrderAmount, data.CurrentMonthAmount, data.ResetStatTime)
	}, jakartaListenerWalletListenerUidKey)
	return ret, err
}

func (m *defaultListenerWalletModel) Update(ctx context.Context, data *ListenerWallet) error {
	jakartaListenerWalletListenerUidKey := fmt.Sprintf("%s%v", cacheJakartaListenerWalletListenerUidPrefix, data.ListenerUid)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where listener_uid = $1", m.table, listenerWalletRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.ListenerUid, data.Amount, data.RefundSumAmount, data.CashSumAmount, data.ApplyCashAmount, data.LastConfirmTime, data.CurrentMonthOrderAmount, data.CurrentMonthAmount, data.ResetStatTime)
	}, jakartaListenerWalletListenerUidKey)
	return err
}

func (m *defaultListenerWalletModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheJakartaListenerWalletListenerUidPrefix, primary)
}

func (m *defaultListenerWalletModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where listener_uid = $1 limit 1", listenerWalletRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultListenerWalletModel) tableName() string {
	return m.table
}
