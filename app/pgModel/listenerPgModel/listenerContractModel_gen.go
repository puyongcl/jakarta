// Code generated by goctl. DO NOT EDIT!

package listenerPgModel

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	listenerContractFieldNames          = builder.RawFieldNames(&ListenerContract{}, true)
	listenerContractRows                = strings.Join(listenerContractFieldNames, ",")
	listenerContractRowsExpectAutoSet   = strings.Join(stringx.Remove(listenerContractFieldNames, "create_time", "update_time", "create_at", "update_at"), ",")
	listenerContractRowsWithPlaceHolder = builder.PostgreSqlJoin(stringx.Remove(listenerContractFieldNames, "id", "create_time", "update_time", "create_at", "update_at"))
)

type (
	listenerContractModel interface {
		Insert(ctx context.Context, data *ListenerContract) (sql.Result, error)
		FindOne(ctx context.Context, id string) (*ListenerContract, error)
		Update(ctx context.Context, data *ListenerContract) error
		Delete(ctx context.Context, id string) error
	}

	defaultListenerContractModel struct {
		conn  sqlx.SqlConn
		table string
	}

	ListenerContract struct {
		CreateTime   time.Time    `db:"create_time"`
		UpdateTime   time.Time    `db:"update_time"`
		Id           string       `db:"id"` // uid-contract-id
		ListenerUid  int64        `db:"listener_uid"`
		SignTime     sql.NullTime `db:"sign_time"`
		ContractFile string       `db:"contract_file"`
		Remark       string       `db:"remark"`
		ContractType int64        `db:"contract_type"`
		State        int64        `db:"state"` // 状态 1 初始 2 成功 3 失败
	}
)

func newListenerContractModel(conn sqlx.SqlConn) *defaultListenerContractModel {
	return &defaultListenerContractModel{
		conn:  conn,
		table: `"jakarta"."listener_contract"`,
	}
}

func (m *defaultListenerContractModel) Delete(ctx context.Context, id string) error {
	query := fmt.Sprintf("delete from %s where id = $1", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultListenerContractModel) FindOne(ctx context.Context, id string) (*ListenerContract, error) {
	query := fmt.Sprintf("select %s from %s where id = $1 limit 1", listenerContractRows, m.table)
	var resp ListenerContract
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultListenerContractModel) Insert(ctx context.Context, data *ListenerContract) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values ($1, $2, $3, $4, $5, $6, $7)", m.table, listenerContractRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Id, data.ListenerUid, data.SignTime, data.ContractFile, data.Remark, data.ContractType, data.State)
	return ret, err
}

func (m *defaultListenerContractModel) Update(ctx context.Context, data *ListenerContract) error {
	query := fmt.Sprintf("update %s set %s where id = $1", m.table, listenerContractRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.Id, data.ListenerUid, data.SignTime, data.ContractFile, data.Remark, data.ContractType, data.State)
	return err
}

func (m *defaultListenerContractModel) tableName() string {
	return m.table
}
