// Code generated by goctl. DO NOT EDIT!

package listenerPgModel

import (
	"context"
	"database/sql"
	"fmt"
	"github.com/lib/pq"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	listenerProfileDraftFieldNames          = builder.RawFieldNames(&ListenerProfileDraft{}, true)
	listenerProfileDraftRows                = strings.Join(listenerProfileDraftFieldNames, ",")
	listenerProfileDraftRowsExpectAutoSet   = strings.Join(stringx.Remove(listenerProfileDraftFieldNames, "create_time", "update_time", "create_at", "update_at"), ",")
	listenerProfileDraftRowsWithPlaceHolder = builder.PostgreSqlJoin(stringx.Remove(listenerProfileDraftFieldNames, "listener_uid", "create_time", "update_time", "create_at", "update_at"))

	cacheJakartaListenerProfileDraftListenerUidPrefix = "cache:jakarta:listenerProfileDraft:listenerUid:"
)

type (
	listenerProfileDraftModel interface {
		Insert(ctx context.Context, data *ListenerProfileDraft) (sql.Result, error)
		FindOne(ctx context.Context, listenerUid int64) (*ListenerProfileDraft, error)
		Update(ctx context.Context, data *ListenerProfileDraft) error
		Delete(ctx context.Context, listenerUid int64) error
	}

	defaultListenerProfileDraftModel struct {
		sqlc.CachedConn
		table string
	}

	ListenerProfileDraft struct {
		CreateTime           time.Time      `db:"create_time"`
		UpdateTime           time.Time      `db:"update_time"`
		ListenerUid          int64          `db:"listener_uid"`
		NickName             string         `db:"nick_name"`
		ListenerName         string         `db:"listener_name"`
		Avatar               string         `db:"avatar"`
		SmallAvatar          string         `db:"small_avatar"`
		MaritalStatus        int64          `db:"marital_status"`
		PhoneNumber          string         `db:"phone_number"`
		Constellation        int64          `db:"constellation"`
		Province             string         `db:"province"`
		City                 string         `db:"city"`
		Job                  string         `db:"job"`
		Education            int64          `db:"education"`
		Gender               int64          `db:"gender"`
		Birthday             sql.NullTime   `db:"birthday"`
		IdNo                 string         `db:"id_no"`
		IdPhoto1             string         `db:"id_photo1"`
		IdPhoto2             string         `db:"id_photo2"`
		IdPhoto3             string         `db:"id_photo3"`
		Specialties          pq.Int64Array  `db:"specialties"`
		Introduction         string         `db:"introduction"`
		VoiceFile            string         `db:"voice_file"`
		Experience1          string         `db:"experience1"`
		Experience2          string         `db:"experience2"`
		CertType             int64          `db:"cert_type"`
		OtherPlatformAccount string         `db:"other_platform_account"`
		CertFiles1           string         `db:"cert_files1"`
		CertFiles2           string         `db:"cert_files2"`
		CertFiles3           string         `db:"cert_files3"`
		CertFiles4           string         `db:"cert_files4"`
		CertFiles5           string         `db:"cert_files5"`
		AutoReplyNew         string         `db:"auto_reply_new"`
		AutoReplyProcessing  string         `db:"auto_reply_processing"`
		AutoReplyFinish      string         `db:"auto_reply_finish"`
		TextChatPrice        int64          `db:"text_chat_price"`
		VoiceChatPrice       int64          `db:"voice_chat_price"`
		TextChatSwitch       int64          `db:"text_chat_switch"`
		VoiceChatSwitch      int64          `db:"voice_chat_switch"`
		CheckFailField       pq.StringArray `db:"check_fail_field"`
		CheckingField        pq.StringArray `db:"checking_field"`
		CheckStatus          int64          `db:"check_status"`  // 待审核、审核中
		DraftVersion         int64          `db:"draft_version"` // 草稿版本 用户每次修改+1 用户修改时要校验是否相等
		CheckVersion         int64          `db:"check_version"` // 审核版本 管理员审核时先拿到草稿版本号 审核更新时校验 必须大于当前版本 审核成功则更新为传入的草稿版本号
	}
)

func newListenerProfileDraftModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultListenerProfileDraftModel {
	return &defaultListenerProfileDraftModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      `"jakarta"."listener_profile_draft"`,
	}
}

func (m *defaultListenerProfileDraftModel) Delete(ctx context.Context, listenerUid int64) error {
	jakartaListenerProfileDraftListenerUidKey := fmt.Sprintf("%s%v", cacheJakartaListenerProfileDraftListenerUidPrefix, listenerUid)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where listener_uid = $1", m.table)
		return conn.ExecCtx(ctx, query, listenerUid)
	}, jakartaListenerProfileDraftListenerUidKey)
	return err
}

func (m *defaultListenerProfileDraftModel) FindOne(ctx context.Context, listenerUid int64) (*ListenerProfileDraft, error) {
	jakartaListenerProfileDraftListenerUidKey := fmt.Sprintf("%s%v", cacheJakartaListenerProfileDraftListenerUidPrefix, listenerUid)
	var resp ListenerProfileDraft
	resp.Specialties = make([]int64, 0)
	resp.CheckFailField = make([]string, 0)
	err := m.QueryRowCtx(ctx, &resp, jakartaListenerProfileDraftListenerUidKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where listener_uid = $1 limit 1", listenerProfileDraftRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, listenerUid)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultListenerProfileDraftModel) Insert(ctx context.Context, data *ListenerProfileDraft) (sql.Result, error) {
	jakartaListenerProfileDraftListenerUidKey := fmt.Sprintf("%s%v", cacheJakartaListenerProfileDraftListenerUidPrefix, data.ListenerUid)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22, $23, $24, $25, $26, $27, $28, $29, $30, $31, $32, $33, $34, $35, $36, $37, $38, $39, $40, $41, $42)", m.table, listenerProfileDraftRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.ListenerUid, data.NickName, data.ListenerName, data.Avatar, data.SmallAvatar, data.MaritalStatus, data.PhoneNumber, data.Constellation, data.Province, data.City, data.Job, data.Education, data.Gender, data.Birthday, data.IdNo, data.IdPhoto1, data.IdPhoto2, data.IdPhoto3, data.Specialties, data.Introduction, data.VoiceFile, data.Experience1, data.Experience2, data.CertType, data.OtherPlatformAccount, data.CertFiles1, data.CertFiles2, data.CertFiles3, data.CertFiles4, data.CertFiles5, data.AutoReplyNew, data.AutoReplyProcessing, data.AutoReplyFinish, data.TextChatPrice, data.VoiceChatPrice, data.TextChatSwitch, data.VoiceChatSwitch, data.CheckFailField, data.CheckingField, data.CheckStatus, data.DraftVersion, data.CheckVersion)
	}, jakartaListenerProfileDraftListenerUidKey)
	return ret, err
}

func (m *defaultListenerProfileDraftModel) Update(ctx context.Context, data *ListenerProfileDraft) error {
	jakartaListenerProfileDraftListenerUidKey := fmt.Sprintf("%s%v", cacheJakartaListenerProfileDraftListenerUidPrefix, data.ListenerUid)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where listener_uid = $1", m.table, listenerProfileDraftRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.ListenerUid, data.NickName, data.ListenerName, data.Avatar, data.SmallAvatar, data.MaritalStatus, data.PhoneNumber, data.Constellation, data.Province, data.City, data.Job, data.Education, data.Gender, data.Birthday, data.IdNo, data.IdPhoto1, data.IdPhoto2, data.IdPhoto3, data.Specialties, data.Introduction, data.VoiceFile, data.Experience1, data.Experience2, data.CertType, data.OtherPlatformAccount, data.CertFiles1, data.CertFiles2, data.CertFiles3, data.CertFiles4, data.CertFiles5, data.AutoReplyNew, data.AutoReplyProcessing, data.AutoReplyFinish, data.TextChatPrice, data.VoiceChatPrice, data.TextChatSwitch, data.VoiceChatSwitch, data.CheckFailField, data.CheckingField, data.CheckStatus, data.DraftVersion, data.CheckVersion)
	}, jakartaListenerProfileDraftListenerUidKey)
	return err
}

func (m *defaultListenerProfileDraftModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheJakartaListenerProfileDraftListenerUidPrefix, primary)
}

func (m *defaultListenerProfileDraftModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where listener_uid = $1 limit 1", listenerProfileDraftRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultListenerProfileDraftModel) tableName() string {
	return m.table
}
