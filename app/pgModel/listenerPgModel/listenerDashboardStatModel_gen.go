// Code generated by goctl. DO NOT EDIT!

package listenerPgModel

import (
	"context"
	"database/sql"
	"fmt"
	"github.com/lib/pq"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	listenerDashboardStatFieldNames          = builder.RawFieldNames(&ListenerDashboardStat{}, true)
	listenerDashboardStatRows                = strings.Join(listenerDashboardStatFieldNames, ",")
	listenerDashboardStatRowsExpectAutoSet   = strings.Join(stringx.Remove(listenerDashboardStatFieldNames, "create_time", "update_time", "create_t", "update_at"), ",")
	listenerDashboardStatRowsWithPlaceHolder = builder.PostgreSqlJoin(stringx.Remove(listenerDashboardStatFieldNames, "listener_uid", "create_time", "update_time", "create_at", "update_at"))

	cacheJakartaListenerDashboardStatListenerUidPrefix = "cache:jakarta:listenerDashboardStat:listenerUid:"
)

type (
	listenerDashboardStatModel interface {
		Insert(ctx context.Context, data *ListenerDashboardStat) (sql.Result, error)
		FindOne(ctx context.Context, listenerUid int64) (*ListenerDashboardStat, error)
		Update(ctx context.Context, data *ListenerDashboardStat) error
		Delete(ctx context.Context, listenerUid int64) error
	}

	defaultListenerDashboardStatModel struct {
		sqlc.CachedConn
		table string
	}

	ListenerDashboardStat struct {
		CreateTime                         time.Time     `db:"create_time"`
		UpdateTime                         time.Time     `db:"update_time"`
		ListenerUid                        int64         `db:"listener_uid"`
		YesterdayOrderCnt                  int64         `db:"yesterday_order_cnt"`
		YesterdayOrderCntRank              int64         `db:"yesterday_order_cnt_rank"`
		YesterdayOrderAmount               int64         `db:"yesterday_order_amount"`
		YesterdayOrderAmountRank           int64         `db:"yesterday_order_amount_rank"`
		YesterdayRecommendUserCnt          int64         `db:"yesterday_recommend_user_cnt"`
		YesterdayRecommendUserCntRank      int64         `db:"yesterday_recommend_user_cnt_rank"`
		YesterdayEnterChatUserCnt          int64         `db:"yesterday_enter_chat_user_cnt"`
		YesterdayEnterChatUserCntRank      int64         `db:"yesterday_enter_chat_user_cnt_rank"`
		YesterdayViewUserCnt               int64         `db:"yesterday_view_user_cnt"`
		YesterdayViewUserCntRank           int64         `db:"yesterday_view_user_cnt_rank"`
		YesterdayLastUpdateTime            time.Time     `db:"yesterday_last_update_time"` // 昨日统计数据快照时间
		Last30DaysPaidUserCnt              int64         `db:"last_30_days_paid_user_cnt"`
		Last30DaysEnterChatUserCnt         int64         `db:"last_30_days_enter_chat_user_cnt"`
		Last30DaysRepeatPaidUserCnt        int64         `db:"last_30_days_repeat_paid_user_cnt"`
		Last30DaysAveragePaidAmountPerUser int64         `db:"last_30_days_average_paid_amount_per_user"`
		Last30DaysAveragePaidAmountPerDay  int64         `db:"last_30_days_average_paid_amount_per_day"`
		Last7DaysPaidUserCnt               int64         `db:"last_7_days_paid_user_cnt"`
		Last7DaysRepeatPaidUserCnt         int64         `db:"last_7_days_repeat_paid_user_cnt"`
		Last7DaysAveragePaidAmountPerUser  int64         `db:"last_7_days_average_paid_amount_per_user"`
		Last7DaysAveragePaidAmountPerDay   int64         `db:"last_7_days_average_paid_amount_per_day"`
		LastDayLastUpdateTime              time.Time     `db:"last_day_last_update_time"`          // 近几日数据快照时间
		Last30DaysPaidUserRate             int64         `db:"last_30_days_paid_user_rate"`        // 近30天内下单人数占进入聊天页面人数比例(万分)
		Last30DaysRepeatPaidUserRate       int64         `db:"last_30_days_repeat_paid_user_rate"` // 近30天内复购人数占下单人数比例（万分）
		Last7DaysRepeatPaidUserRate        int64         `db:"last_7_days_repeat_paid_user_rate"`  // 近7天内复购人数占下单人数比例
		Last7DaysPaidUserRate              int64         `db:"last_7_days_paid_user_rate"`         // 近7天内下单人数占进入聊天界面用户数比例（万分）
		Last7DaysEnterChatUserCnt          int64         `db:"last_7_days_enter_chat_user_cnt"`    // 最近7天进入聊天界面的人数
		Last30DaysPaidAmountSum            int64         `db:"last_30_days_paid_amount_sum"`       // 近30天下单总金额
		Last7DaysPaidAmountSum             int64         `db:"last_7_days_paid_amount_sum"`        // 近7天下单总金额
		Suggestion                         pq.Int64Array `db:"suggestion"`                         // 建议
	}
)

func newListenerDashboardStatModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultListenerDashboardStatModel {
	return &defaultListenerDashboardStatModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      `"jakarta"."listener_dashboard_stat"`,
	}
}

func (m *defaultListenerDashboardStatModel) Delete(ctx context.Context, listenerUid int64) error {
	jakartaListenerDashboardStatListenerUidKey := fmt.Sprintf("%s%v", cacheJakartaListenerDashboardStatListenerUidPrefix, listenerUid)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where listener_uid = $1", m.table)
		return conn.ExecCtx(ctx, query, listenerUid)
	}, jakartaListenerDashboardStatListenerUidKey)
	return err
}

func (m *defaultListenerDashboardStatModel) FindOne(ctx context.Context, listenerUid int64) (*ListenerDashboardStat, error) {
	jakartaListenerDashboardStatListenerUidKey := fmt.Sprintf("%s%v", cacheJakartaListenerDashboardStatListenerUidPrefix, listenerUid)
	var resp ListenerDashboardStat
	err := m.QueryRowCtx(ctx, &resp, jakartaListenerDashboardStatListenerUidKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where listener_uid = $1 limit 1", listenerDashboardStatRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, listenerUid)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultListenerDashboardStatModel) Insert(ctx context.Context, data *ListenerDashboardStat) (sql.Result, error) {
	jakartaListenerDashboardStatListenerUidKey := fmt.Sprintf("%s%v", cacheJakartaListenerDashboardStatListenerUidPrefix, data.ListenerUid)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22, $23, $24, $25, $26, $27, $28, $29, $30)", m.table, listenerDashboardStatRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.ListenerUid, data.YesterdayOrderCnt, data.YesterdayOrderCntRank, data.YesterdayOrderAmount, data.YesterdayOrderAmountRank, data.YesterdayRecommendUserCnt, data.YesterdayRecommendUserCntRank, data.YesterdayEnterChatUserCnt, data.YesterdayEnterChatUserCntRank, data.YesterdayViewUserCnt, data.YesterdayViewUserCntRank, data.YesterdayLastUpdateTime, data.Last30DaysPaidUserCnt, data.Last30DaysEnterChatUserCnt, data.Last30DaysRepeatPaidUserCnt, data.Last30DaysAveragePaidAmountPerUser, data.Last30DaysAveragePaidAmountPerDay, data.Last7DaysPaidUserCnt, data.Last7DaysRepeatPaidUserCnt, data.Last7DaysAveragePaidAmountPerUser, data.Last7DaysAveragePaidAmountPerDay, data.LastDayLastUpdateTime, data.Last30DaysPaidUserRate, data.Last30DaysRepeatPaidUserRate, data.Last7DaysRepeatPaidUserRate, data.Last7DaysPaidUserRate, data.Last7DaysEnterChatUserCnt, data.Last30DaysPaidAmountSum, data.Last7DaysPaidAmountSum, data.Suggestion)
	}, jakartaListenerDashboardStatListenerUidKey)
	return ret, err
}

func (m *defaultListenerDashboardStatModel) Update(ctx context.Context, data *ListenerDashboardStat) error {
	jakartaListenerDashboardStatListenerUidKey := fmt.Sprintf("%s%v", cacheJakartaListenerDashboardStatListenerUidPrefix, data.ListenerUid)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where listener_uid = $1", m.table, listenerDashboardStatRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.ListenerUid, data.YesterdayOrderCnt, data.YesterdayOrderCntRank, data.YesterdayOrderAmount, data.YesterdayOrderAmountRank, data.YesterdayRecommendUserCnt, data.YesterdayRecommendUserCntRank, data.YesterdayEnterChatUserCnt, data.YesterdayEnterChatUserCntRank, data.YesterdayViewUserCnt, data.YesterdayViewUserCntRank, data.YesterdayLastUpdateTime, data.Last30DaysPaidUserCnt, data.Last30DaysEnterChatUserCnt, data.Last30DaysRepeatPaidUserCnt, data.Last30DaysAveragePaidAmountPerUser, data.Last30DaysAveragePaidAmountPerDay, data.Last7DaysPaidUserCnt, data.Last7DaysRepeatPaidUserCnt, data.Last7DaysAveragePaidAmountPerUser, data.Last7DaysAveragePaidAmountPerDay, data.LastDayLastUpdateTime, data.Last30DaysPaidUserRate, data.Last30DaysRepeatPaidUserRate, data.Last7DaysRepeatPaidUserRate, data.Last7DaysPaidUserRate, data.Last7DaysEnterChatUserCnt, data.Last30DaysPaidAmountSum, data.Last7DaysPaidAmountSum, data.Suggestion)
	}, jakartaListenerDashboardStatListenerUidKey)
	return err
}

func (m *defaultListenerDashboardStatModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheJakartaListenerDashboardStatListenerUidPrefix, primary)
}

func (m *defaultListenerDashboardStatModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where listener_uid = $1 limit 1", listenerDashboardStatRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultListenerDashboardStatModel) tableName() string {
	return m.table
}
