// Code generated by goctl. DO NOT EDIT!

package listenerPgModel

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	listenerBankCardFieldNames          = builder.RawFieldNames(&ListenerBankCard{}, true)
	listenerBankCardRows                = strings.Join(listenerBankCardFieldNames, ",")
	listenerBankCardRowsExpectAutoSet   = strings.Join(stringx.Remove(listenerBankCardFieldNames, "create_time", "update_time", "create_t", "update_at"), ",")
	listenerBankCardRowsWithPlaceHolder = builder.PostgreSqlJoin(stringx.Remove(listenerBankCardFieldNames, "listener_uid", "create_time", "update_time", "create_at", "update_at"))

	cacheJakartaListenerBankCardListenerUidPrefix = "cache:jakarta:listenerBankCard:listenerUid:"
)

type (
	listenerBankCardModel interface {
		Insert(ctx context.Context, data *ListenerBankCard) (sql.Result, error)
		FindOne(ctx context.Context, listenerUid int64) (*ListenerBankCard, error)
		Update(ctx context.Context, data *ListenerBankCard) error
		Delete(ctx context.Context, listenerUid int64) error
	}

	defaultListenerBankCardModel struct {
		sqlc.CachedConn
		table string
	}

	ListenerBankCard struct {
		CreateTime   time.Time `db:"create_time"`
		UpdateTime   time.Time `db:"update_time"`
		ListenerName string    `db:"listener_name"`
		PhoneNumber  string    `db:"phone_number"`
		IdNo         string    `db:"id_no"`
		BankCardNo   string    `db:"bank_card_no"`
		ListenerUid  int64     `db:"listener_uid"`
	}
)

func newListenerBankCardModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultListenerBankCardModel {
	return &defaultListenerBankCardModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      `"jakarta"."listener_bank_card"`,
	}
}

func (m *defaultListenerBankCardModel) Delete(ctx context.Context, listenerUid int64) error {
	jakartaListenerBankCardListenerUidKey := fmt.Sprintf("%s%v", cacheJakartaListenerBankCardListenerUidPrefix, listenerUid)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where listener_uid = $1", m.table)
		return conn.ExecCtx(ctx, query, listenerUid)
	}, jakartaListenerBankCardListenerUidKey)
	return err
}

func (m *defaultListenerBankCardModel) FindOne(ctx context.Context, listenerUid int64) (*ListenerBankCard, error) {
	jakartaListenerBankCardListenerUidKey := fmt.Sprintf("%s%v", cacheJakartaListenerBankCardListenerUidPrefix, listenerUid)
	var resp ListenerBankCard
	err := m.QueryRowCtx(ctx, &resp, jakartaListenerBankCardListenerUidKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where listener_uid = $1 limit 1", listenerBankCardRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, listenerUid)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultListenerBankCardModel) Insert(ctx context.Context, data *ListenerBankCard) (sql.Result, error) {
	jakartaListenerBankCardListenerUidKey := fmt.Sprintf("%s%v", cacheJakartaListenerBankCardListenerUidPrefix, data.ListenerUid)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values ($1, $2, $3, $4, $5)", m.table, listenerBankCardRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.ListenerName, data.PhoneNumber, data.IdNo, data.BankCardNo, data.ListenerUid)
	}, jakartaListenerBankCardListenerUidKey)
	return ret, err
}

func (m *defaultListenerBankCardModel) Update(ctx context.Context, data *ListenerBankCard) error {
	jakartaListenerBankCardListenerUidKey := fmt.Sprintf("%s%v", cacheJakartaListenerBankCardListenerUidPrefix, data.ListenerUid)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where listener_uid = $1", m.table, listenerBankCardRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.ListenerUid, data.ListenerName, data.PhoneNumber, data.IdNo, data.BankCardNo)
	}, jakartaListenerBankCardListenerUidKey)
	return err
}

func (m *defaultListenerBankCardModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheJakartaListenerBankCardListenerUidPrefix, primary)
}

func (m *defaultListenerBankCardModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where listener_uid = $1 limit 1", listenerBankCardRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultListenerBankCardModel) tableName() string {
	return m.table
}
