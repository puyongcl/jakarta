// Code generated by goctl. DO NOT EDIT!

package statPgModel

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	userLoginLogFieldNames          = builder.RawFieldNames(&UserLoginLog{}, true)
	userLoginLogRows                = strings.Join(userLoginLogFieldNames, ",")
	userLoginLogRowsExpectAutoSet   = strings.Join(stringx.Remove(userLoginLogFieldNames, "create_time", "update_time", "create_at", "update_at"), ",")
	userLoginLogRowsWithPlaceHolder = builder.PostgreSqlJoin(stringx.Remove(userLoginLogFieldNames, "id", "create_time", "update_time", "create_at", "update_at"))
)

type (
	userLoginLogModel interface {
		Insert(ctx context.Context, data *UserLoginLog) (sql.Result, error)
		FindOne(ctx context.Context, id string) (*UserLoginLog, error)
		Update(ctx context.Context, data *UserLoginLog) error
		Delete(ctx context.Context, id string) error
	}

	defaultUserLoginLogModel struct {
		conn  sqlx.SqlConn
		table string
	}

	UserLoginLog struct {
		Id         string    `db:"id"`         // uid-20220827
		LoginDate  time.Time `db:"login_date"` // 日期
		CreateTime time.Time `db:"create_time"`
		UpdateTime time.Time `db:"update_time"`
		Cnt        int64     `db:"cnt"` // 今日登陆登出次数
		Uid        int64     `db:"uid"`
		UserType   int64     `db:"user_type"`
		Channel    string    `db:"channel"`
	}
)

func newUserLoginLogModel(conn sqlx.SqlConn) *defaultUserLoginLogModel {
	return &defaultUserLoginLogModel{
		conn:  conn,
		table: `"jakarta"."user_login_log"`,
	}
}

func (m *defaultUserLoginLogModel) Delete(ctx context.Context, id string) error {
	query := fmt.Sprintf("delete from %s where id = $1", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultUserLoginLogModel) FindOne(ctx context.Context, id string) (*UserLoginLog, error) {
	query := fmt.Sprintf("select %s from %s where id = $1 limit 1", userLoginLogRows, m.table)
	var resp UserLoginLog
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserLoginLogModel) Insert(ctx context.Context, data *UserLoginLog) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values ($1, $2, $3, $4, $5, $6)", m.table, userLoginLogRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Id, data.LoginDate, data.Cnt, data.Uid, data.UserType, data.Channel)
	return ret, err
}

func (m *defaultUserLoginLogModel) Update(ctx context.Context, data *UserLoginLog) error {
	query := fmt.Sprintf("update %s set %s where id = $1", m.table, userLoginLogRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.Id, data.LoginDate, data.Cnt, data.Uid, data.UserType, data.Channel)
	return err
}

func (m *defaultUserLoginLogModel) tableName() string {
	return m.table
}
