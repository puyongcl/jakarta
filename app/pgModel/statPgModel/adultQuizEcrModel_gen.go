// Code generated by goctl. DO NOT EDIT!

package statPgModel

import (
	"context"
	"database/sql"
	"fmt"
	"github.com/lib/pq"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	adultQuizEcrFieldNames          = builder.RawFieldNames(&AdultQuizEcr{}, true)
	adultQuizEcrRows                = strings.Join(adultQuizEcrFieldNames, ",")
	adultQuizEcrRowsExpectAutoSet   = strings.Join(stringx.Remove(adultQuizEcrFieldNames), ",")
	adultQuizEcrRowsWithPlaceHolder = builder.PostgreSqlJoin(stringx.Remove(adultQuizEcrFieldNames, "id"))
)

type (
	adultQuizEcrModel interface {
		Insert(ctx context.Context, data *AdultQuizEcr) (sql.Result, error)
		FindOne(ctx context.Context, id string) (*AdultQuizEcr, error)
		FindOneByUid(ctx context.Context, uid int64) (*AdultQuizEcr, error)
		Update(ctx context.Context, data *AdultQuizEcr) error
		Delete(ctx context.Context, id string) error
	}

	defaultAdultQuizEcrModel struct {
		conn  sqlx.SqlConn
		table string
	}

	AdultQuizEcr struct {
		CreateTime time.Time     `db:"create_time"`
		Id         string        `db:"id"`
		Uid        int64         `db:"uid"`
		Result     int64         `db:"result"`
		Answer     pq.Int64Array `db:"answer"`
	}
)

func newAdultQuizEcrModel(conn sqlx.SqlConn) *defaultAdultQuizEcrModel {
	return &defaultAdultQuizEcrModel{
		conn:  conn,
		table: `"jakarta"."adult_quiz_ecr"`,
	}
}

func (m *defaultAdultQuizEcrModel) Delete(ctx context.Context, id string) error {
	query := fmt.Sprintf("delete from %s where id = $1", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultAdultQuizEcrModel) FindOne(ctx context.Context, id string) (*AdultQuizEcr, error) {
	query := fmt.Sprintf("select %s from %s where id = $1 limit 1", adultQuizEcrRows, m.table)
	var resp AdultQuizEcr
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultAdultQuizEcrModel) FindOneByUid(ctx context.Context, uid int64) (*AdultQuizEcr, error) {
	var resp AdultQuizEcr
	query := fmt.Sprintf("select %s from %s where uid = $1 order by create_time desc limit 1", adultQuizEcrRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, uid)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultAdultQuizEcrModel) Insert(ctx context.Context, data *AdultQuizEcr) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values ($1, $2, $3, $4, $5)", m.table, adultQuizEcrRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.CreateTime, data.Id, data.Uid, data.Result, data.Answer)
	return ret, err
}

func (m *defaultAdultQuizEcrModel) Update(ctx context.Context, newData *AdultQuizEcr) error {
	query := fmt.Sprintf("update %s set %s where id = $1", m.table, adultQuizEcrRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, newData.Id, newData.CreateTime, newData.Uid, newData.Result, newData.Answer)
	return err
}

func (m *defaultAdultQuizEcrModel) tableName() string {
	return m.table
}
