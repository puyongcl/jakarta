// Code generated by goctl. DO NOT EDIT!

package statPgModel

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	statDailyFieldNames          = builder.RawFieldNames(&StatDaily{}, true)
	statDailyRows                = strings.Join(statDailyFieldNames, ",")
	statDailyRowsExpectAutoSet   = strings.Join(stringx.Remove(statDailyFieldNames, "create_time", "update_time", "create_at", "update_at"), ",")
	statDailyRowsWithPlaceHolder = builder.PostgreSqlJoin(stringx.Remove(statDailyFieldNames, "id", "create_time", "update_time", "create_at", "update_at"))
)

type (
	statDailyModel interface {
		Insert(ctx context.Context, data *StatDaily) (sql.Result, error)
		FindOne(ctx context.Context, id string) (*StatDaily, error)
		Update(ctx context.Context, data *StatDaily) error
		Delete(ctx context.Context, id string) error
	}

	defaultStatDailyModel struct {
		conn  sqlx.SqlConn
		table string
	}

	StatDaily struct {
		Id                  string    `db:"id"`
		NewUserCnt          int64     `db:"new_user_cnt"`          // 新增用户
		LoginUserCnt        int64     `db:"login_user_cnt"`        // 登陆用户
		PaidUserCnt         int64     `db:"paid_user_cnt"`         // 今天下过单的用户
		LoginListenerCnt    int64     `db:"login_listener_cnt"`    // 登陆过的XXX
		PaidOrderCnt        int64     `db:"paid_order_cnt"`        // 支付订单总数
		PaidAmount          int64     `db:"paid_amount"`           // 支付订单总金额
		ApplyRefundAmount   int64     `db:"apply_refund_amount"`   // 申请退款总额
		RefundSuccessAmount int64     `db:"refund_success_amount"` // 退款成功总金额
		ConfirmOrderAmount  int64     `db:"confirm_order_amount"`  // 确认完成订单总金额
		ListenerAmount      int64     `db:"listener_amount"`       // XXX收入总金额
		PlatformAmount      int64     `db:"platform_amount"`       // 平台收入总金额
		Channel             string    `db:"channel"`
		CreateTime          time.Time `db:"create_time"`
	}
)

func newStatDailyModel(conn sqlx.SqlConn) *defaultStatDailyModel {
	return &defaultStatDailyModel{
		conn:  conn,
		table: `"jakarta"."stat_daily"`,
	}
}

func (m *defaultStatDailyModel) Delete(ctx context.Context, id string) error {
	query := fmt.Sprintf("delete from %s where id = $1", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultStatDailyModel) FindOne(ctx context.Context, id string) (*StatDaily, error) {
	query := fmt.Sprintf("select %s from %s where id = $1 limit 1", statDailyRows, m.table)
	var resp StatDaily
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultStatDailyModel) Insert(ctx context.Context, data *StatDaily) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13)", m.table, statDailyRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Id, data.NewUserCnt, data.LoginUserCnt, data.PaidUserCnt, data.LoginListenerCnt, data.PaidOrderCnt, data.PaidAmount, data.ApplyRefundAmount, data.RefundSuccessAmount, data.ConfirmOrderAmount, data.ListenerAmount, data.PlatformAmount, data.Channel)
	return ret, err
}

func (m *defaultStatDailyModel) Update(ctx context.Context, data *StatDaily) error {
	query := fmt.Sprintf("update %s set %s where id = $1", m.table, statDailyRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.Id, data.NewUserCnt, data.LoginUserCnt, data.PaidUserCnt, data.LoginListenerCnt, data.PaidOrderCnt, data.PaidAmount, data.ApplyRefundAmount, data.RefundSuccessAmount, data.ConfirmOrderAmount, data.ListenerAmount, data.PlatformAmount, data.Channel)
	return err
}

func (m *defaultStatDailyModel) tableName() string {
	return m.table
}
