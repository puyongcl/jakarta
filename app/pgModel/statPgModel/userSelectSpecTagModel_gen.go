// Code generated by goctl. DO NOT EDIT!

package statPgModel

import (
	"context"
	"database/sql"
	"fmt"
	"github.com/lib/pq"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	userSelectSpecTagFieldNames          = builder.RawFieldNames(&UserSelectSpecTag{}, true)
	userSelectSpecTagRows                = strings.Join(userSelectSpecTagFieldNames, ",")
	userSelectSpecTagRowsExpectAutoSet   = strings.Join(stringx.Remove(userSelectSpecTagFieldNames, "create_time", "update_time", "create_at", "update_at"), ",")
	userSelectSpecTagRowsWithPlaceHolder = builder.PostgreSqlJoin(stringx.Remove(userSelectSpecTagFieldNames, "uid", "create_time", "update_time", "create_at", "update_at"))
)

type (
	userSelectSpecTagModel interface {
		Insert(ctx context.Context, data *UserSelectSpecTag) (sql.Result, error)
		FindOne(ctx context.Context, uid int64) (*UserSelectSpecTag, error)
		Update(ctx context.Context, data *UserSelectSpecTag) error
		Delete(ctx context.Context, uid int64) error
	}

	defaultUserSelectSpecTagModel struct {
		conn  sqlx.SqlConn
		table string
	}

	UserSelectSpecTag struct {
		CreateTime  time.Time     `db:"create_time"`
		Uid         int64         `db:"uid"`
		Specialties pq.Int64Array `db:"specialties"`
		Channel     string        `db:"channel"`
	}
)

func newUserSelectSpecTagModel(conn sqlx.SqlConn) *defaultUserSelectSpecTagModel {
	return &defaultUserSelectSpecTagModel{
		conn:  conn,
		table: `"jakarta"."user_select_spec_tag"`,
	}
}

func (m *defaultUserSelectSpecTagModel) Delete(ctx context.Context, uid int64) error {
	query := fmt.Sprintf("delete from %s where uid = $1", m.table)
	_, err := m.conn.ExecCtx(ctx, query, uid)
	return err
}

func (m *defaultUserSelectSpecTagModel) FindOne(ctx context.Context, uid int64) (*UserSelectSpecTag, error) {
	query := fmt.Sprintf("select %s from %s where uid = $1 limit 1", userSelectSpecTagRows, m.table)
	var resp UserSelectSpecTag
	err := m.conn.QueryRowCtx(ctx, &resp, query, uid)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserSelectSpecTagModel) Insert(ctx context.Context, data *UserSelectSpecTag) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values ($1, $2, $3)", m.table, userSelectSpecTagRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Uid, data.Specialties, data.Channel)
	return ret, err
}

func (m *defaultUserSelectSpecTagModel) Update(ctx context.Context, data *UserSelectSpecTag) error {
	query := fmt.Sprintf("update %s set %s where uid = $1", m.table, userSelectSpecTagRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.Uid, data.Specialties, data.Channel)
	return err
}

func (m *defaultUserSelectSpecTagModel) tableName() string {
	return m.table
}
