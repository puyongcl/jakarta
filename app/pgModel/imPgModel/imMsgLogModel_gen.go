// Code generated by goctl. DO NOT EDIT!

package imPgModel

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	imMsgLogFieldNames          = builder.RawFieldNames(&ImMsgLog{}, true)
	imMsgLogRows                = strings.Join(imMsgLogFieldNames, ",")
	imMsgLogRowsExpectAutoSet   = strings.Join(stringx.Remove(imMsgLogFieldNames, "create_time", "update_time", "create_at", "update_at"), ",")
	imMsgLogRowsWithPlaceHolder = builder.PostgreSqlJoin(stringx.Remove(imMsgLogFieldNames, "msg_id", "create_time", "update_time", "create_at", "update_at"))
)

type (
	imMsgLogModel interface {
		Insert(ctx context.Context, data *ImMsgLog) (sql.Result, error)
		FindOne(ctx context.Context, msgId string) (*ImMsgLog, error)
		Update(ctx context.Context, data *ImMsgLog) error
		Delete(ctx context.Context, msgId string) error
	}

	defaultImMsgLogModel struct {
		conn  sqlx.SqlConn
		table string
	}

	ImMsgLog struct {
		CreateTime   time.Time `db:"create_time"`
		FromUid      int64     `db:"from_uid"`
		ToUid        int64     `db:"to_uid"`
		MsgTime      time.Time `db:"msg_time"`
		MsgId        string    `db:"msg_id"`
		MsgType      string    `db:"msg_type"`
		MsgSeq       int64     `db:"msg_seq"`
		FromUserType int64     `db:"from_user_type"`
	}
)

func newImMsgLogModel(conn sqlx.SqlConn) *defaultImMsgLogModel {
	return &defaultImMsgLogModel{
		conn:  conn,
		table: `"jakarta"."im_msg_log"`,
	}
}

func (m *defaultImMsgLogModel) Delete(ctx context.Context, msgId string) error {
	query := fmt.Sprintf("delete from %s where msg_id = $1", m.table)
	_, err := m.conn.ExecCtx(ctx, query, msgId)
	return err
}

func (m *defaultImMsgLogModel) FindOne(ctx context.Context, msgId string) (*ImMsgLog, error) {
	query := fmt.Sprintf("select %s from %s where msg_id = $1 limit 1", imMsgLogRows, m.table)
	var resp ImMsgLog
	err := m.conn.QueryRowCtx(ctx, &resp, query, msgId)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultImMsgLogModel) Insert(ctx context.Context, data *ImMsgLog) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values ($1, $2, $3, $4, $5, $6, $7)", m.table, imMsgLogRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.FromUid, data.ToUid, data.MsgTime, data.MsgId, data.MsgType, data.MsgSeq, data.FromUserType)
	return ret, err
}

func (m *defaultImMsgLogModel) Update(ctx context.Context, data *ImMsgLog) error {
	query := fmt.Sprintf("update %s set %s where msg_id = $1", m.table, imMsgLogRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.MsgId, data.FromUid, data.ToUid, data.MsgTime, data.MsgType, data.MsgSeq, data.FromUserType)
	return err
}

func (m *defaultImMsgLogModel) tableName() string {
	return m.table
}
