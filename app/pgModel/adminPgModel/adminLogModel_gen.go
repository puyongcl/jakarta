// Code generated by goctl. DO NOT EDIT!

package adminPgModel

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	adminLogFieldNames          = builder.RawFieldNames(&AdminLog{}, true)
	adminLogRows                = strings.Join(adminLogFieldNames, ",")
	adminLogRowsExpectAutoSet   = strings.Join(stringx.Remove(adminLogFieldNames, "id", "create_time", "update_time", "create_t", "update_at"), ",")
	adminLogRowsWithPlaceHolder = builder.PostgreSqlJoin(stringx.Remove(adminLogFieldNames, "id", "create_time", "update_time", "create_at", "update_at"))
)

type (
	adminLogModel interface {
		Insert(ctx context.Context, data *AdminLog) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*AdminLog, error)
		Update(ctx context.Context, newData *AdminLog) error
		Delete(ctx context.Context, id int64) error
	}

	defaultAdminLogModel struct {
		conn  sqlx.SqlConn
		table string
	}

	AdminLog struct {
		CreateTime time.Time `db:"create_time"`
		Id         int64     `db:"id"`
		AdminUid   int64     `db:"admin_uid"`
		Request    string    `db:"request"`    // http请求的数据
		Response   string    `db:"response"`   // 请求的返回结果，有错误则存错误
		RoutePath  string    `db:"route_path"` // http请求的path
	}
)

func newAdminLogModel(conn sqlx.SqlConn) *defaultAdminLogModel {
	return &defaultAdminLogModel{
		conn:  conn,
		table: `"jakarta"."admin_log"`,
	}
}

func (m *defaultAdminLogModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where id = $1", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultAdminLogModel) FindOne(ctx context.Context, id int64) (*AdminLog, error) {
	query := fmt.Sprintf("select %s from %s where id = $1 limit 1", adminLogRows, m.table)
	var resp AdminLog
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultAdminLogModel) Insert(ctx context.Context, data *AdminLog) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values ($1, $2, $3, $4)", m.table, adminLogRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.AdminUid, data.Request, data.Response, data.RoutePath)
	return ret, err
}

func (m *defaultAdminLogModel) Update(ctx context.Context, data *AdminLog) error {
	query := fmt.Sprintf("update %s set %s where id = $1", m.table, adminLogRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.Id, data.AdminUid, data.Request, data.Response, data.RoutePath)
	return err
}

func (m *defaultAdminLogModel) tableName() string {
	return m.table
}
