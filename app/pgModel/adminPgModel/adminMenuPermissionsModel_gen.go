// Code generated by goctl. DO NOT EDIT!

package adminPgModel

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	adminMenuPermissionsFieldNames          = builder.RawFieldNames(&AdminMenuPermissions{}, true)
	adminMenuPermissionsRows                = strings.Join(adminMenuPermissionsFieldNames, ",")
	adminMenuPermissionsRowsExpectAutoSet   = strings.Join(stringx.Remove(adminMenuPermissionsFieldNames, "create_time", "update_time", "create_t", "update_at"), ",")
	adminMenuPermissionsRowsWithPlaceHolder = builder.PostgreSqlJoin(stringx.Remove(adminMenuPermissionsFieldNames, "id", "create_time", "update_time", "create_at", "update_at"))
)

type (
	adminMenuPermissionsModel interface {
		Insert(ctx context.Context, data *AdminMenuPermissions) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*AdminMenuPermissions, error)
		Update(ctx context.Context, newData *AdminMenuPermissions) error
		Delete(ctx context.Context, id int64) error
	}

	defaultAdminMenuPermissionsModel struct {
		conn  sqlx.SqlConn
		table string
	}

	AdminMenuPermissions struct {
		Id         int64     `db:"id"`
		Uid        int64     `db:"uid"`
		Menu1Id    int64     `db:"menu_1_id"`  // 一级菜单id
		Menu2Id    int64     `db:"menu_2_id"`  // 二级菜单id
		MenuValue  string    `db:"menu_value"` // 菜单对应的json结构
		State      int64     `db:"state"`      // 生效状态2生效4不生效
		CreateTime time.Time `db:"create_time"`
	}
)

func newAdminMenuPermissionsModel(conn sqlx.SqlConn) *defaultAdminMenuPermissionsModel {
	return &defaultAdminMenuPermissionsModel{
		conn:  conn,
		table: `"jakarta"."admin_menu_permissions"`,
	}
}

func (m *defaultAdminMenuPermissionsModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where id = $1", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultAdminMenuPermissionsModel) FindOne(ctx context.Context, id int64) (*AdminMenuPermissions, error) {
	query := fmt.Sprintf("select %s from %s where id = $1 limit 1", adminMenuPermissionsRows, m.table)
	var resp AdminMenuPermissions
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultAdminMenuPermissionsModel) Insert(ctx context.Context, data *AdminMenuPermissions) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values ($1, $2, $3, $4, $5, $6)", m.table, adminMenuPermissionsRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Id, data.Uid, data.Menu1Id, data.Menu2Id, data.MenuValue, data.State)
	return ret, err
}

func (m *defaultAdminMenuPermissionsModel) Update(ctx context.Context, data *AdminMenuPermissions) error {
	query := fmt.Sprintf("update %s set %s where id = $1", m.table, adminMenuPermissionsRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.Id, data.Uid, data.Menu1Id, data.Menu2Id, data.MenuValue, data.State)
	return err
}

func (m *defaultAdminMenuPermissionsModel) tableName() string {
	return m.table
}
