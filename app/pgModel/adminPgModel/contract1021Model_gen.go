// Code generated by goctl. DO NOT EDIT!

package adminPgModel

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	contract1021FieldNames          = builder.RawFieldNames(&Contract1021{}, true)
	contract1021Rows                = strings.Join(contract1021FieldNames, ",")
	contract1021RowsExpectAutoSet   = strings.Join(stringx.Remove(contract1021FieldNames, "create_time", "update_time", "create_at", "update_at"), ",")
	contract1021RowsWithPlaceHolder = builder.PostgreSqlJoin(stringx.Remove(contract1021FieldNames, "contract_id", "create_time", "update_time", "create_at", "update_at"))
)

type (
	contract1021Model interface {
		Insert(ctx context.Context, data *Contract1021) (sql.Result, error)
		FindOne(ctx context.Context, contractId string) (*Contract1021, error)
		Update(ctx context.Context, data *Contract1021) error
		Delete(ctx context.Context, contractId string) error
	}

	defaultContract1021Model struct {
		conn  sqlx.SqlConn
		table string
	}

	Contract1021 struct {
		ContractId  string       `db:"contract_id"`
		UserName    string       `db:"user_name"`
		PhoneNumber string       `db:"phone_number"`
		StartDate   time.Time    `db:"start_date"`
		EndDate     time.Time    `db:"end_date"`
		Amount      int64        `db:"amount"`
		CreateTime  time.Time    `db:"create_time"`
		SignTime    sql.NullTime `db:"sign_time"`
		Idno        string       `db:"idno"`
		SignName    string       `db:"sign_name"`
	}
)

func newContract1021Model(conn sqlx.SqlConn) *defaultContract1021Model {
	return &defaultContract1021Model{
		conn:  conn,
		table: `"jakarta"."contract_1021"`,
	}
}

func (m *defaultContract1021Model) Delete(ctx context.Context, contractId string) error {
	query := fmt.Sprintf("delete from %s where contract_id = $1", m.table)
	_, err := m.conn.ExecCtx(ctx, query, contractId)
	return err
}

func (m *defaultContract1021Model) FindOne(ctx context.Context, contractId string) (*Contract1021, error) {
	query := fmt.Sprintf("select %s from %s where contract_id = $1 limit 1", contract1021Rows, m.table)
	var resp Contract1021
	err := m.conn.QueryRowCtx(ctx, &resp, query, contractId)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultContract1021Model) Insert(ctx context.Context, data *Contract1021) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values ($1, $2, $3, $4, $5, $6, $7, $8, $9)", m.table, contract1021RowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.ContractId, data.UserName, data.PhoneNumber, data.StartDate, data.EndDate, data.Amount, data.SignTime, data.Idno, data.SignName)
	return ret, err
}

func (m *defaultContract1021Model) Update(ctx context.Context, data *Contract1021) error {
	query := fmt.Sprintf("update %s set %s where contract_id = $1", m.table, contract1021RowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.ContractId, data.UserName, data.PhoneNumber, data.StartDate, data.EndDate, data.Amount, data.SignTime, data.Idno, data.SignName)
	return err
}

func (m *defaultContract1021Model) tableName() string {
	return m.table
}
