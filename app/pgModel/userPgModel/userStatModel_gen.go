// Code generated by goctl. DO NOT EDIT!

package userPgModel

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	userStatFieldNames          = builder.RawFieldNames(&UserStat{}, true)
	userStatRows                = strings.Join(userStatFieldNames, ",")
	userStatRowsExpectAutoSet   = strings.Join(stringx.Remove(userStatFieldNames, "create_time", "update_time", "create_t", "update_at"), ",")
	userStatRowsWithPlaceHolder = builder.PostgreSqlJoin(stringx.Remove(userStatFieldNames, "uid", "create_time", "update_time", "create_at", "update_at"))

	cacheJakartaUserStatUidPrefix = "cache:jakarta:userStat:uid:"
)

type (
	userStatModel interface {
		Insert(ctx context.Context, data *UserStat) (sql.Result, error)
		FindOne(ctx context.Context, uid int64) (*UserStat, error)
		Update(ctx context.Context, data *UserStat) error
		Delete(ctx context.Context, uid int64) error
	}

	defaultUserStatModel struct {
		sqlc.CachedConn
		table string
	}

	UserStat struct {
		CreateTime      time.Time `db:"create_time"`
		UpdateTime      time.Time `db:"update_time"`
		Uid             int64     `db:"uid"`
		CostAmountSum   int64     `db:"cost_amount_sum"`    // 支付成功总额
		RefundAmountSum int64     `db:"refund_amount_sum"`  // 退款总额
		PaidOrderCnt    int64     `db:"paid_order_cnt"`     // 支付成功订单数量
		RefundOrderCnt  int64     `db:"refund_order_cnt"`   // 退款订单数
		NoCondRefundCnt int64     `db:"no_cond_refund_cnt"` // 无条件退款机会
	}
)

func newUserStatModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultUserStatModel {
	return &defaultUserStatModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      `"jakarta"."user_stat"`,
	}
}

func (m *defaultUserStatModel) Delete(ctx context.Context, uid int64) error {
	jakartaUserStatUidKey := fmt.Sprintf("%s%v", cacheJakartaUserStatUidPrefix, uid)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where uid = $1", m.table)
		return conn.ExecCtx(ctx, query, uid)
	}, jakartaUserStatUidKey)
	return err
}

func (m *defaultUserStatModel) FindOne(ctx context.Context, uid int64) (*UserStat, error) {
	jakartaUserStatUidKey := fmt.Sprintf("%s%v", cacheJakartaUserStatUidPrefix, uid)
	var resp UserStat
	err := m.QueryRowCtx(ctx, &resp, jakartaUserStatUidKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where uid = $1 limit 1", userStatRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, uid)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserStatModel) Insert(ctx context.Context, data *UserStat) (sql.Result, error) {
	jakartaUserStatUidKey := fmt.Sprintf("%s%v", cacheJakartaUserStatUidPrefix, data.Uid)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values ($1, $2, $3, $4, $5, $6)", m.table, userStatRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Uid, data.CostAmountSum, data.RefundAmountSum, data.PaidOrderCnt, data.RefundOrderCnt, data.NoCondRefundCnt)
	}, jakartaUserStatUidKey)
	return ret, err
}

func (m *defaultUserStatModel) Update(ctx context.Context, data *UserStat) error {
	jakartaUserStatUidKey := fmt.Sprintf("%s%v", cacheJakartaUserStatUidPrefix, data.Uid)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where uid = $1", m.table, userStatRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.Uid, data.CostAmountSum, data.RefundAmountSum, data.PaidOrderCnt, data.RefundOrderCnt, data.NoCondRefundCnt)
	}, jakartaUserStatUidKey)
	return err
}

func (m *defaultUserStatModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheJakartaUserStatUidPrefix, primary)
}

func (m *defaultUserStatModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where uid = $1 limit 1", userStatRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultUserStatModel) tableName() string {
	return m.table
}
