// Code generated by goctl. DO NOT EDIT!

package userPgModel

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	userWechatInfoFieldNames          = builder.RawFieldNames(&UserWechatInfo{}, true)
	userWechatInfoRows                = strings.Join(userWechatInfoFieldNames, ",")
	userWechatInfoRowsExpectAutoSet   = strings.Join(stringx.Remove(userWechatInfoFieldNames, "create_time", "update_time", "create_at", "update_at"), ",")
	userWechatInfoRowsWithPlaceHolder = builder.PostgreSqlJoin(stringx.Remove(userWechatInfoFieldNames, "union_id", "create_time", "update_time", "create_at", "update_at"))

	cacheJakartaUserWechatInfoUnionIdPrefix = "cache:jakarta:userWechatInfo:unionId:"
	cacheJakartaUserWechatInfoUidPrefix     = "cache:jakarta:userWechatInfo:uid:"
)

type (
	userWechatInfoModel interface {
		Insert(ctx context.Context, data *UserWechatInfo) (sql.Result, error)
		FindOne(ctx context.Context, unionId string) (*UserWechatInfo, error)
		FindOneByUid(ctx context.Context, uid int64) (*UserWechatInfo, error)
		Update(ctx context.Context, data *UserWechatInfo) error
		Delete(ctx context.Context, unionId string) error
	}

	defaultUserWechatInfoModel struct {
		sqlc.CachedConn
		table string
	}

	UserWechatInfo struct {
		CreateTime time.Time `db:"create_time"`
		UpdateTime time.Time `db:"update_time"`
		Uid        int64     `db:"uid"`
		MpOpenid   string    `db:"mp_openid"`  // 小程序openid
		FwhOpenid  string    `db:"fwh_openid"` // 服务号openid
		UnionId    string    `db:"union_id"`
		FwhState   int64     `db:"fwh_state"` // 服务号关注状态0未关注2关注4取消关注
	}
)

func newUserWechatInfoModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultUserWechatInfoModel {
	return &defaultUserWechatInfoModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      `"jakarta"."user_wechat_info"`,
	}
}

func (m *defaultUserWechatInfoModel) Delete(ctx context.Context, unionId string) error {
	data, err := m.FindOne(ctx, unionId)
	if err != nil {
		return err
	}

	jakartaUserWechatInfoUidKey := fmt.Sprintf("%s%v", cacheJakartaUserWechatInfoUidPrefix, data.Uid)
	jakartaUserWechatInfoUnionIdKey := fmt.Sprintf("%s%v", cacheJakartaUserWechatInfoUnionIdPrefix, unionId)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where union_id = $1", m.table)
		return conn.ExecCtx(ctx, query, unionId)
	}, jakartaUserWechatInfoUidKey, jakartaUserWechatInfoUnionIdKey)
	return err
}

func (m *defaultUserWechatInfoModel) FindOne(ctx context.Context, unionId string) (*UserWechatInfo, error) {
	jakartaUserWechatInfoUnionIdKey := fmt.Sprintf("%s%v", cacheJakartaUserWechatInfoUnionIdPrefix, unionId)
	var resp UserWechatInfo
	err := m.QueryRowCtx(ctx, &resp, jakartaUserWechatInfoUnionIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where union_id = $1 limit 1", userWechatInfoRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, unionId)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserWechatInfoModel) FindOneByUid(ctx context.Context, uid int64) (*UserWechatInfo, error) {
	jakartaUserWechatInfoUidKey := fmt.Sprintf("%s%v", cacheJakartaUserWechatInfoUidPrefix, uid)
	var resp UserWechatInfo
	err := m.QueryRowIndexCtx(ctx, &resp, jakartaUserWechatInfoUidKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) (i interface{}, e error) {
		query := fmt.Sprintf("select %s from %s where uid = $1 limit 1", userWechatInfoRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, uid); err != nil {
			return nil, err
		}
		return resp.UnionId, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserWechatInfoModel) Insert(ctx context.Context, data *UserWechatInfo) (sql.Result, error) {
	jakartaUserWechatInfoUidKey := fmt.Sprintf("%s%v", cacheJakartaUserWechatInfoUidPrefix, data.Uid)
	jakartaUserWechatInfoUnionIdKey := fmt.Sprintf("%s%v", cacheJakartaUserWechatInfoUnionIdPrefix, data.UnionId)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values ($1, $2, $3, $4, $5)", m.table, userWechatInfoRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Uid, data.MpOpenid, data.FwhOpenid, data.UnionId, data.FwhState)
	}, jakartaUserWechatInfoUidKey, jakartaUserWechatInfoUnionIdKey)
	return ret, err
}

func (m *defaultUserWechatInfoModel) Update(ctx context.Context, newData *UserWechatInfo) error {
	data, err := m.FindOne(ctx, newData.UnionId)
	if err != nil {
		return err
	}

	jakartaUserWechatInfoUidKey := fmt.Sprintf("%s%v", cacheJakartaUserWechatInfoUidPrefix, data.Uid)
	jakartaUserWechatInfoUnionIdKey := fmt.Sprintf("%s%v", cacheJakartaUserWechatInfoUnionIdPrefix, data.UnionId)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where union_id = $1", m.table, userWechatInfoRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, newData.UnionId, newData.Uid, newData.MpOpenid, newData.FwhOpenid, newData.FwhState)
	}, jakartaUserWechatInfoUidKey, jakartaUserWechatInfoUnionIdKey)
	return err
}

func (m *defaultUserWechatInfoModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheJakartaUserWechatInfoUnionIdPrefix, primary)
}

func (m *defaultUserWechatInfoModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where union_id = $1 limit 1", userWechatInfoRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultUserWechatInfoModel) tableName() string {
	return m.table
}
