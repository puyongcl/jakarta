// Code generated by goctl. DO NOT EDIT!

package userPgModel

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	userChannelCallbackFieldNames          = builder.RawFieldNames(&UserChannelCallback{}, true)
	userChannelCallbackRows                = strings.Join(userChannelCallbackFieldNames, ",")
	userChannelCallbackRowsExpectAutoSet   = strings.Join(stringx.Remove(userChannelCallbackFieldNames, "create_time", "update_time", "create_at", "update_at"), ",")
	userChannelCallbackRowsWithPlaceHolder = builder.PostgreSqlJoin(stringx.Remove(userChannelCallbackFieldNames, "uid", "create_time", "update_time", "create_at", "update_at"))

	cacheJakartaUserChannelCallbackUidPrefix = "cache:jakarta:userChannelCallback:uid:"
)

type (
	userChannelCallbackModel interface {
		Insert(ctx context.Context, data *UserChannelCallback) (sql.Result, error)
		FindOne(ctx context.Context, uid int64) (*UserChannelCallback, error)
		Update(ctx context.Context, data *UserChannelCallback) error
		Delete(ctx context.Context, uid int64) error
	}

	defaultUserChannelCallbackModel struct {
		sqlc.CachedConn
		table string
	}

	UserChannelCallback struct {
		CreateTime time.Time `db:"create_time"`
		UpdateTime time.Time `db:"update_time"`
		Uid        int64     `db:"uid"`
		Channel    string    `db:"channel"`
		Cb         string    `db:"cb"`
	}
)

func newUserChannelCallbackModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultUserChannelCallbackModel {
	return &defaultUserChannelCallbackModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      `"jakarta"."user_channel_callback"`,
	}
}

func (m *defaultUserChannelCallbackModel) Delete(ctx context.Context, uid int64) error {
	jakartaUserChannelCallbackUidKey := fmt.Sprintf("%s%v", cacheJakartaUserChannelCallbackUidPrefix, uid)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where uid = $1", m.table)
		return conn.ExecCtx(ctx, query, uid)
	}, jakartaUserChannelCallbackUidKey)
	return err
}

func (m *defaultUserChannelCallbackModel) FindOne(ctx context.Context, uid int64) (*UserChannelCallback, error) {
	jakartaUserChannelCallbackUidKey := fmt.Sprintf("%s%v", cacheJakartaUserChannelCallbackUidPrefix, uid)
	var resp UserChannelCallback
	err := m.QueryRowCtx(ctx, &resp, jakartaUserChannelCallbackUidKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where uid = $1 limit 1", userChannelCallbackRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, uid)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserChannelCallbackModel) Insert(ctx context.Context, data *UserChannelCallback) (sql.Result, error) {
	jakartaUserChannelCallbackUidKey := fmt.Sprintf("%s%v", cacheJakartaUserChannelCallbackUidPrefix, data.Uid)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values ($1, $2, $3)", m.table, userChannelCallbackRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Uid, data.Channel, data.Cb)
	}, jakartaUserChannelCallbackUidKey)
	return ret, err
}

func (m *defaultUserChannelCallbackModel) Update(ctx context.Context, data *UserChannelCallback) error {
	jakartaUserChannelCallbackUidKey := fmt.Sprintf("%s%v", cacheJakartaUserChannelCallbackUidPrefix, data.Uid)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where uid = $1", m.table, userChannelCallbackRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.Uid, data.Channel, data.Cb)
	}, jakartaUserChannelCallbackUidKey)
	return err
}

func (m *defaultUserChannelCallbackModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheJakartaUserChannelCallbackUidPrefix, primary)
}

func (m *defaultUserChannelCallbackModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where uid = $1 limit 1", userChannelCallbackRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultUserChannelCallbackModel) tableName() string {
	return m.table
}
