// Code generated by goctl. DO NOT EDIT!

package userPgModel

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	userLoginStateFieldNames          = builder.RawFieldNames(&UserLoginState{}, true)
	userLoginStateRows                = strings.Join(userLoginStateFieldNames, ",")
	userLoginStateRowsExpectAutoSet   = strings.Join(stringx.Remove(userLoginStateFieldNames, "create_time", "update_time", "create_at", "update_at"), ",")
	userLoginStateRowsWithPlaceHolder = builder.PostgreSqlJoin(stringx.Remove(userLoginStateFieldNames, "uid", "create_time", "update_time", "create_at", "update_at"))

	cacheJakartaUserLoginStateUidPrefix = "cache:jakarta:userLoginState:uid:"
)

type (
	userLoginStateModel interface {
		Insert(ctx context.Context, data *UserLoginState) (sql.Result, error)
		FindOne(ctx context.Context, uid int64) (*UserLoginState, error)
		Update(ctx context.Context, data *UserLoginState) error
		Delete(ctx context.Context, uid int64) error
	}

	defaultUserLoginStateModel struct {
		sqlc.CachedConn
		table string
	}

	UserLoginState struct {
		Uid           int64     `db:"uid"`
		LoginTime     time.Time `db:"login_time"`
		OfflineTime   time.Time `db:"offline_time"`
		LoginState    int64     `db:"login_state"`     // 1 在线 3 离线
		LoginCntSum   int64     `db:"login_cnt_sum"`   // 累计登陆次数
		LoginCntToday int64     `db:"login_cnt_today"` // 今日登陆次数
		CreateTime    time.Time `db:"create_time"`
		UpdateTime    time.Time `db:"update_time"`
		ImEventTime   time.Time `db:"im_event_time"`
	}
)

func newUserLoginStateModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultUserLoginStateModel {
	return &defaultUserLoginStateModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      `"jakarta"."user_login_state"`,
	}
}

func (m *defaultUserLoginStateModel) Delete(ctx context.Context, uid int64) error {
	jakartaUserLoginStateUidKey := fmt.Sprintf("%s%v", cacheJakartaUserLoginStateUidPrefix, uid)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where uid = $1", m.table)
		return conn.ExecCtx(ctx, query, uid)
	}, jakartaUserLoginStateUidKey)
	return err
}

func (m *defaultUserLoginStateModel) FindOne(ctx context.Context, uid int64) (*UserLoginState, error) {
	jakartaUserLoginStateUidKey := fmt.Sprintf("%s%v", cacheJakartaUserLoginStateUidPrefix, uid)
	var resp UserLoginState
	err := m.QueryRowCtx(ctx, &resp, jakartaUserLoginStateUidKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where uid = $1 limit 1", userLoginStateRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, uid)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserLoginStateModel) Insert(ctx context.Context, data *UserLoginState) (sql.Result, error) {
	jakartaUserLoginStateUidKey := fmt.Sprintf("%s%v", cacheJakartaUserLoginStateUidPrefix, data.Uid)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values ($1, $2, $3, $4, $5, $6, $7)", m.table, userLoginStateRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Uid, data.LoginTime, data.OfflineTime, data.LoginState, data.LoginCntSum, data.LoginCntToday, data.ImEventTime)
	}, jakartaUserLoginStateUidKey)
	return ret, err
}

func (m *defaultUserLoginStateModel) Update(ctx context.Context, data *UserLoginState) error {
	jakartaUserLoginStateUidKey := fmt.Sprintf("%s%v", cacheJakartaUserLoginStateUidPrefix, data.Uid)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where uid = $1", m.table, userLoginStateRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.Uid, data.LoginTime, data.OfflineTime, data.LoginState, data.LoginCntSum, data.LoginCntToday, data.ImEventTime)
	}, jakartaUserLoginStateUidKey)
	return err
}

func (m *defaultUserLoginStateModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheJakartaUserLoginStateUidPrefix, primary)
}

func (m *defaultUserLoginStateModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where uid = $1 limit 1", userLoginStateRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultUserLoginStateModel) tableName() string {
	return m.table
}
