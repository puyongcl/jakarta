// Code generated by goctl. DO NOT EDIT!

package userPgModel

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	userBlacklistFieldNames          = builder.RawFieldNames(&UserBlacklist{}, true)
	userBlacklistRows                = strings.Join(userBlacklistFieldNames, ",")
	userBlacklistRowsExpectAutoSet   = strings.Join(stringx.Remove(userBlacklistFieldNames, "create_time", "update_time", "create_t", "update_at"), ",")
	userBlacklistRowsWithPlaceHolder = builder.PostgreSqlJoin(stringx.Remove(userBlacklistFieldNames, "id", "create_time", "update_time", "create_at", "update_at"))
)

type (
	userBlacklistModel interface {
		Insert(ctx context.Context, data *UserBlacklist) (sql.Result, error)
		FindOne(ctx context.Context, id string) (*UserBlacklist, error)
		FindOneByUidTargetUid(ctx context.Context, uid int64, targetUid int64) (*UserBlacklist, error)
		Update(ctx context.Context, data *UserBlacklist) error
		Delete(ctx context.Context, id string) error
	}

	defaultUserBlacklistModel struct {
		conn  sqlx.SqlConn
		table string
	}

	UserBlacklist struct {
		CreateTime     time.Time `db:"create_time"`
		UpdateTime     time.Time `db:"update_time"`
		Uid            int64     `db:"uid"`
		Id             string    `db:"id"`
		TargetUid      int64     `db:"target_uid"`
		State          int64     `db:"state"`
		TargetAvatar   string    `db:"target_avatar"`
		TargetNickName string    `db:"target_nick_name"`
	}
)

func newUserBlacklistModel(conn sqlx.SqlConn) *defaultUserBlacklistModel {
	return &defaultUserBlacklistModel{
		conn:  conn,
		table: `"jakarta"."user_blacklist"`,
	}
}

func (m *defaultUserBlacklistModel) Delete(ctx context.Context, id string) error {
	query := fmt.Sprintf("delete from %s where id = $1", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultUserBlacklistModel) FindOne(ctx context.Context, id string) (*UserBlacklist, error) {
	query := fmt.Sprintf("select %s from %s where id = $1 limit 1", userBlacklistRows, m.table)
	var resp UserBlacklist
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserBlacklistModel) FindOneByUidTargetUid(ctx context.Context, uid int64, targetUid int64) (*UserBlacklist, error) {
	var resp UserBlacklist
	query := fmt.Sprintf("select %s from %s where uid = $1 and target_uid = $2 limit 1", userBlacklistRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, uid, targetUid)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserBlacklistModel) Insert(ctx context.Context, data *UserBlacklist) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values ($1, $2, $3, $4, $5, $6)", m.table, userBlacklistRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Uid, data.Id, data.TargetUid, data.State, data.TargetAvatar, data.TargetNickName)
	return ret, err
}

func (m *defaultUserBlacklistModel) Update(ctx context.Context, newData *UserBlacklist) error {
	query := fmt.Sprintf("update %s set %s where id = $1", m.table, userBlacklistRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, newData.Id, newData.Uid, newData.TargetUid, newData.State, newData.TargetAvatar, newData.TargetNickName)
	return err
}

func (m *defaultUserBlacklistModel) tableName() string {
	return m.table
}
