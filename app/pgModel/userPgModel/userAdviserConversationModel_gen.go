// Code generated by goctl. DO NOT EDIT!

package userPgModel

import (
	"context"
	"database/sql"
	"fmt"
	"github.com/lib/pq"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	userAdviserConversationFieldNames          = builder.RawFieldNames(&UserAdviserConversation{}, true)
	userAdviserConversationRows                = strings.Join(userAdviserConversationFieldNames, ",")
	userAdviserConversationRowsExpectAutoSet   = strings.Join(stringx.Remove(userAdviserConversationFieldNames, "create_time", "update_time", "create_at", "update_at"), ",")
	userAdviserConversationRowsWithPlaceHolder = builder.PostgreSqlJoin(stringx.Remove(userAdviserConversationFieldNames, "uid", "create_time", "update_time", "create_at", "update_at"))

	cacheJakartaUserAdviserConversationUidPrefix = "cache:jakarta:userAdviserConversation:uid:"
)

type (
	userAdviserConversationModel interface {
		Insert(ctx context.Context, data *UserAdviserConversation) (sql.Result, error)
		FindOne(ctx context.Context, uid int64) (*UserAdviserConversation, error)
		Update(ctx context.Context, data *UserAdviserConversation) error
		Delete(ctx context.Context, uid int64) error
	}

	defaultUserAdviserConversationModel struct {
		sqlc.CachedConn
		table string
	}

	UserAdviserConversation struct {
		CreateTime   time.Time      `db:"create_time"`
		UpdateTime   time.Time      `db:"update_time"`
		Uid          int64          `db:"uid"`
		Step         int64          `db:"step"`         // 完成进度
		SelectSpec   pq.Int64Array  `db:"select_spec"`  // 用户选择的标签
		Conversation pq.StringArray `db:"conversation"` // 会话记录 序号#用户uid#内容
	}
)

func newUserAdviserConversationModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultUserAdviserConversationModel {
	return &defaultUserAdviserConversationModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      `"jakarta"."user_adviser_conversation"`,
	}
}

func (m *defaultUserAdviserConversationModel) Delete(ctx context.Context, uid int64) error {
	jakartaUserAdviserConversationUidKey := fmt.Sprintf("%s%v", cacheJakartaUserAdviserConversationUidPrefix, uid)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where uid = $1", m.table)
		return conn.ExecCtx(ctx, query, uid)
	}, jakartaUserAdviserConversationUidKey)
	return err
}

func (m *defaultUserAdviserConversationModel) FindOne(ctx context.Context, uid int64) (*UserAdviserConversation, error) {
	jakartaUserAdviserConversationUidKey := fmt.Sprintf("%s%v", cacheJakartaUserAdviserConversationUidPrefix, uid)
	var resp UserAdviserConversation
	err := m.QueryRowCtx(ctx, &resp, jakartaUserAdviserConversationUidKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where uid = $1 limit 1", userAdviserConversationRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, uid)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserAdviserConversationModel) Insert(ctx context.Context, data *UserAdviserConversation) (sql.Result, error) {
	jakartaUserAdviserConversationUidKey := fmt.Sprintf("%s%v", cacheJakartaUserAdviserConversationUidPrefix, data.Uid)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values ($1, $2, $3, $4)", m.table, userAdviserConversationRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Uid, data.Step, data.SelectSpec, data.Conversation)
	}, jakartaUserAdviserConversationUidKey)
	return ret, err
}

func (m *defaultUserAdviserConversationModel) Update(ctx context.Context, data *UserAdviserConversation) error {
	jakartaUserAdviserConversationUidKey := fmt.Sprintf("%s%v", cacheJakartaUserAdviserConversationUidPrefix, data.Uid)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where uid = $1", m.table, userAdviserConversationRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.Uid, data.Step, data.SelectSpec, data.Conversation)
	}, jakartaUserAdviserConversationUidKey)
	return err
}

func (m *defaultUserAdviserConversationModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheJakartaUserAdviserConversationUidPrefix, primary)
}

func (m *defaultUserAdviserConversationModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where uid = $1 limit 1", userAdviserConversationRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultUserAdviserConversationModel) tableName() string {
	return m.table
}
