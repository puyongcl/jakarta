// Code generated by goctl. DO NOT EDIT!

package userPgModel

import (
	"context"
	"database/sql"
	"fmt"
	"github.com/lib/pq"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	userReportFieldNames          = builder.RawFieldNames(&UserReport{}, true)
	userReportRows                = strings.Join(userReportFieldNames, ",")
	userReportRowsExpectAutoSet   = strings.Join(stringx.Remove(userReportFieldNames, "create_time", "update_time", "create_t", "update_at"), ",")
	userReportRowsWithPlaceHolder = builder.PostgreSqlJoin(stringx.Remove(userReportFieldNames, "id", "create_time", "update_time", "create_at", "update_at"))
)

type (
	userReportModel interface {
		Insert(ctx context.Context, data *UserReport) (sql.Result, error)
		FindOne(ctx context.Context, id string) (*UserReport, error)
		Update(ctx context.Context, data *UserReport) error
		Delete(ctx context.Context, id string) error
	}

	defaultUserReportModel struct {
		conn  sqlx.SqlConn
		table string
	}

	UserReport struct {
		CreateTime     time.Time     `db:"create_time"`
		UpdateTime     time.Time     `db:"update_time"`
		Id             string        `db:"id"`
		Uid            int64         `db:"uid"`
		TargetUid      int64         `db:"target_uid"`
		ReportContent  string        `db:"report_content"`
		ReportTag      pq.Int64Array `db:"report_tag"`
		Attachment     string        `db:"attachment"`
		Remark         string        `db:"remark"`
		State          int64         `db:"state"`
		Avatar         string        `db:"avatar"`
		NickName       string        `db:"nick_name"`
		TargetAvatar   string        `db:"target_avatar"`
		TargetNickName string        `db:"target_nick_name"`
	}
)

func newUserReportModel(conn sqlx.SqlConn) *defaultUserReportModel {
	return &defaultUserReportModel{
		conn:  conn,
		table: `"jakarta"."user_report"`,
	}
}

func (m *defaultUserReportModel) Delete(ctx context.Context, id string) error {
	query := fmt.Sprintf("delete from %s where id = $1", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultUserReportModel) FindOne(ctx context.Context, id string) (*UserReport, error) {
	query := fmt.Sprintf("select %s from %s where id = $1 limit 1", userReportRows, m.table)
	var resp UserReport
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserReportModel) Insert(ctx context.Context, data *UserReport) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12)", m.table, userReportRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Id, data.Uid, data.TargetUid, data.ReportContent, data.ReportTag, data.Attachment, data.Remark, data.State, data.Avatar, data.NickName, data.TargetAvatar, data.TargetNickName)
	return ret, err
}

func (m *defaultUserReportModel) Update(ctx context.Context, data *UserReport) error {
	query := fmt.Sprintf("update %s set %s where id = $1", m.table, userReportRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.Id, data.Uid, data.TargetUid, data.ReportContent, data.ReportTag, data.Attachment, data.Remark, data.State, data.Avatar, data.NickName, data.TargetAvatar, data.TargetNickName)
	return err
}

func (m *defaultUserReportModel) tableName() string {
	return m.table
}
