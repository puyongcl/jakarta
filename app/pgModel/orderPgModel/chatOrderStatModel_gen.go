// Code generated by goctl. DO NOT EDIT!

package orderPgModel

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	chatOrderStatFieldNames          = builder.RawFieldNames(&ChatOrderStat{}, true)
	chatOrderStatRows                = strings.Join(chatOrderStatFieldNames, ",")
	chatOrderStatRowsExpectAutoSet   = strings.Join(stringx.Remove(chatOrderStatFieldNames, "create_time", "update_time", "create_at", "update_at"), ",")
	chatOrderStatRowsWithPlaceHolder = builder.PostgreSqlJoin(stringx.Remove(chatOrderStatFieldNames, "id", "create_time", "update_time", "create_at", "update_at"))

	cacheJakartaChatOrderStatIdPrefix = "cache:jakarta:chatOrderStat:id:"
)

type (
	chatOrderStatModel interface {
		Insert(ctx context.Context, data *ChatOrderStat) (sql.Result, error)
		FindOne(ctx context.Context, id string) (*ChatOrderStat, error)
		Update(ctx context.Context, data *ChatOrderStat) error
		Delete(ctx context.Context, id string) error
	}

	defaultChatOrderStatModel struct {
		sqlc.CachedConn
		table string
	}

	ChatOrderStat struct {
		CreateTime       time.Time `db:"create_time"`
		UpdateTime       time.Time `db:"update_time"`
		Id               string    `db:"id"`
		ListenerUid      int64     `db:"listener_uid"`
		Uid              int64     `db:"uid"`
		ConfirmMinuteSum int64     `db:"confirm_minute_sum"`
	}
)

func newChatOrderStatModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultChatOrderStatModel {
	return &defaultChatOrderStatModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      `"jakarta"."chat_order_stat"`,
	}
}

func (m *defaultChatOrderStatModel) Delete(ctx context.Context, id string) error {
	jakartaChatOrderStatIdKey := fmt.Sprintf("%s%v", cacheJakartaChatOrderStatIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where id = $1", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, jakartaChatOrderStatIdKey)
	return err
}

func (m *defaultChatOrderStatModel) FindOne(ctx context.Context, id string) (*ChatOrderStat, error) {
	jakartaChatOrderStatIdKey := fmt.Sprintf("%s%v", cacheJakartaChatOrderStatIdPrefix, id)
	var resp ChatOrderStat
	err := m.QueryRowCtx(ctx, &resp, jakartaChatOrderStatIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where id = $1 limit 1", chatOrderStatRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultChatOrderStatModel) Insert(ctx context.Context, data *ChatOrderStat) (sql.Result, error) {
	jakartaChatOrderStatIdKey := fmt.Sprintf("%s%v", cacheJakartaChatOrderStatIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values ($1, $2, $3, $4)", m.table, chatOrderStatRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Id, data.ListenerUid, data.Uid, data.ConfirmMinuteSum)
	}, jakartaChatOrderStatIdKey)
	return ret, err
}

func (m *defaultChatOrderStatModel) Update(ctx context.Context, data *ChatOrderStat) error {
	jakartaChatOrderStatIdKey := fmt.Sprintf("%s%v", cacheJakartaChatOrderStatIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where id = $1", m.table, chatOrderStatRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.Id, data.ListenerUid, data.Uid, data.ConfirmMinuteSum)
	}, jakartaChatOrderStatIdKey)
	return err
}

func (m *defaultChatOrderStatModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheJakartaChatOrderStatIdPrefix, primary)
}

func (m *defaultChatOrderStatModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where id = $1 limit 1", chatOrderStatRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultChatOrderStatModel) tableName() string {
	return m.table
}
