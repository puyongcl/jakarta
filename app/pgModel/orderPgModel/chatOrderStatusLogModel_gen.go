// Code generated by goctl. DO NOT EDIT!

package orderPgModel

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	chatOrderStatusLogFieldNames          = builder.RawFieldNames(&ChatOrderStatusLog{}, true)
	chatOrderStatusLogRows                = strings.Join(chatOrderStatusLogFieldNames, ",")
	chatOrderStatusLogRowsExpectAutoSet   = strings.Join(stringx.Remove(chatOrderStatusLogFieldNames, "create_time", "update_time", "create_at", "update_at"), ",")
	chatOrderStatusLogRowsWithPlaceHolder = builder.PostgreSqlJoin(stringx.Remove(chatOrderStatusLogFieldNames, "id", "create_time", "update_time", "create_at", "update_at"))
)

type (
	chatOrderStatusLogModel interface {
		Insert(ctx context.Context, data *ChatOrderStatusLog) (sql.Result, error)
		FindOne(ctx context.Context, id string) (*ChatOrderStatusLog, error)
		Update(ctx context.Context, data *ChatOrderStatusLog) error
		Delete(ctx context.Context, id string) error
	}

	defaultChatOrderStatusLogModel struct {
		conn  sqlx.SqlConn
		table string
	}

	ChatOrderStatusLog struct {
		CreateTime   time.Time `db:"create_time"`
		Id           string    `db:"id"`
		OrderId      string    `db:"order_id"`
		State        int64     `db:"state"`
		OperatorUid  int64     `db:"operator_uid"`  // 操作人uid、系统自动操作ID为1
		Remark       string    `db:"remark"`        // 附加、补充文字、文件
		ActionResult int64     `db:"action_result"` // 0 没有错误 非0 有错误 详情在remark
	}
)

func newChatOrderStatusLogModel(conn sqlx.SqlConn) *defaultChatOrderStatusLogModel {
	return &defaultChatOrderStatusLogModel{
		conn:  conn,
		table: `"jakarta"."chat_order_status_log"`,
	}
}

func (m *defaultChatOrderStatusLogModel) Delete(ctx context.Context, id string) error {
	query := fmt.Sprintf("delete from %s where id = $1", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultChatOrderStatusLogModel) FindOne(ctx context.Context, id string) (*ChatOrderStatusLog, error) {
	query := fmt.Sprintf("select %s from %s where id = $1 limit 1", chatOrderStatusLogRows, m.table)
	var resp ChatOrderStatusLog
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultChatOrderStatusLogModel) Insert(ctx context.Context, data *ChatOrderStatusLog) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values ($1, $2, $3, $4, $5, $6)", m.table, chatOrderStatusLogRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Id, data.OrderId, data.State, data.OperatorUid, data.Remark, data.ActionResult)
	return ret, err
}

func (m *defaultChatOrderStatusLogModel) Update(ctx context.Context, data *ChatOrderStatusLog) error {
	query := fmt.Sprintf("update %s set %s where id = $1", m.table, chatOrderStatusLogRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.Id, data.OrderId, data.State, data.OperatorUid, data.Remark, data.ActionResult)
	return err
}

func (m *defaultChatOrderStatusLogModel) tableName() string {
	return m.table
}
