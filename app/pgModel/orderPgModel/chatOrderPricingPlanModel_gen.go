// Code generated by goctl. DO NOT EDIT!

package orderPgModel

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	chatOrderPricingPlanFieldNames          = builder.RawFieldNames(&ChatOrderPricingPlan{}, true)
	chatOrderPricingPlanRows                = strings.Join(chatOrderPricingPlanFieldNames, ",")
	chatOrderPricingPlanRowsExpectAutoSet   = strings.Join(stringx.Remove(chatOrderPricingPlanFieldNames, "id", "create_time", "update_time", "create_at", "update_at"), ",")
	chatOrderPricingPlanRowsWithPlaceHolder = builder.PostgreSqlJoin(stringx.Remove(chatOrderPricingPlanFieldNames, "id", "create_time", "update_time", "create_at", "update_at"))
)

type (
	chatOrderPricingPlanModel interface {
		Insert(ctx context.Context, data *ChatOrderPricingPlan) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*ChatOrderPricingPlan, error)
		Update(ctx context.Context, data *ChatOrderPricingPlan) error
		Delete(ctx context.Context, id int64) error
	}

	defaultChatOrderPricingPlanModel struct {
		conn  sqlx.SqlConn
		table string
	}

	ChatOrderPricingPlan struct {
		CreateTime             time.Time `db:"create_time"`
		Id                     int64     `db:"id"`
		TaxRate                int64     `db:"tax_rate"`                   // 税率（千分）
		NightAddPriceRate      int64     `db:"night_add_price_rate"`       // 夜间加收费率（千分）
		ShareRateStep1Star5    int64     `db:"share_rate_step_1_star_5"`   // 1阶段满意评价平台抽佣比率（千分）
		ShareRateStep1Star3    int64     `db:"share_rate_step_1_star_3"`   // 1阶段一般评价平台抽佣比率（千分）
		ShareRateStep1Star1    int64     `db:"share_rate_step_1_star_1"`   // 1阶段不满意评价平台抽佣比率（千分）
		ShareAmountStep1Unit   int64     `db:"share_amount_step_1_unit"`   // 1阶段时长单位个数
		ShareRateStep2Star5    int64     `db:"share_rate_step_2_star_5"`   // 2阶段满意评价平台抽佣比率（千分）
		ShareRateStep2Star3    int64     `db:"share_rate_step_2_star_3"`   // 2阶段一般评价平台抽佣比率（千分）
		ShareRateStep2Star1    int64     `db:"share_rate_step_2_star_1"`   // 2阶段不满意评价平台抽佣比率（千分）
		NightAddPriceHourStart int64     `db:"night_add_price_hour_start"` // 夜间服务加价开始时刻（时）
		NightAddPriceHourEnd   int64     `db:"night_add_price_hour_end"`   // 夜间加价结束时刻（时）
		ChatUnitMinute         int64     `db:"chat_unit_minute"`           // 单位时长的分钟数
		NewUserDiscount        int64     `db:"new_user_discount"`          // 新用户减免比率（千分）
		DefaultTextChatPrice   int64     `db:"default_text_chat_price"`    // 默认文字聊天价格（分）
		DefaultVoiceChatPrice  int64     `db:"default_voice_chat_price"`   // 默认语音聊天价格（分）
		State                  int64     `db:"state"`                      // 生效状态2生效4不生效
		FreeMinute             int64     `db:"free_minute"`
	}
)

func newChatOrderPricingPlanModel(conn sqlx.SqlConn) *defaultChatOrderPricingPlanModel {
	return &defaultChatOrderPricingPlanModel{
		conn:  conn,
		table: `"jakarta"."chat_order_pricing_plan"`,
	}
}

func (m *defaultChatOrderPricingPlanModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where id = $1", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultChatOrderPricingPlanModel) FindOne(ctx context.Context, id int64) (*ChatOrderPricingPlan, error) {
	query := fmt.Sprintf("select %s from %s where id = $1 limit 1", chatOrderPricingPlanRows, m.table)
	var resp ChatOrderPricingPlan
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultChatOrderPricingPlanModel) Insert(ctx context.Context, data *ChatOrderPricingPlan) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17)", m.table, chatOrderPricingPlanRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.TaxRate, data.NightAddPriceRate, data.ShareRateStep1Star5, data.ShareRateStep1Star3, data.ShareRateStep1Star1, data.ShareAmountStep1Unit, data.ShareRateStep2Star5, data.ShareRateStep2Star3, data.ShareRateStep2Star1, data.NightAddPriceHourStart, data.NightAddPriceHourEnd, data.ChatUnitMinute, data.NewUserDiscount, data.DefaultTextChatPrice, data.DefaultVoiceChatPrice, data.State, data.FreeMinute)
	return ret, err
}

func (m *defaultChatOrderPricingPlanModel) Update(ctx context.Context, data *ChatOrderPricingPlan) error {
	query := fmt.Sprintf("update %s set %s where id = $1", m.table, chatOrderPricingPlanRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.Id, data.TaxRate, data.NightAddPriceRate, data.ShareRateStep1Star5, data.ShareRateStep1Star3, data.ShareRateStep1Star1, data.ShareAmountStep1Unit, data.ShareRateStep2Star5, data.ShareRateStep2Star3, data.ShareRateStep2Star1, data.NightAddPriceHourStart, data.NightAddPriceHourEnd, data.ChatUnitMinute, data.NewUserDiscount, data.DefaultTextChatPrice, data.DefaultVoiceChatPrice, data.State, data.FreeMinute)
	return err
}

func (m *defaultChatOrderPricingPlanModel) tableName() string {
	return m.table
}
