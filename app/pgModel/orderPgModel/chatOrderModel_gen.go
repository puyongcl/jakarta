// Code generated by goctl. DO NOT EDIT!

package orderPgModel

import (
	"context"
	"database/sql"
	"fmt"
	"github.com/lib/pq"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	chatOrderFieldNames          = builder.RawFieldNames(&ChatOrder{}, true)
	chatOrderRows                = strings.Join(chatOrderFieldNames, ",")
	chatOrderRowsExpectAutoSet   = strings.Join(stringx.Remove(chatOrderFieldNames, "create_time", "update_time", "create_t", "update_at"), ",")
	chatOrderRowsWithPlaceHolder = builder.PostgreSqlJoin(stringx.Remove(chatOrderFieldNames, "order_id", "create_time", "update_time", "create_at", "update_at"))

	cacheJakartaChatOrderOrderIdPrefix = "cache:jakarta:chatOrder:orderId:"
)

type (
	chatOrderModel interface {
		Insert(ctx context.Context, data *ChatOrder) (sql.Result, error)
		FindOne(ctx context.Context, orderId string) (*ChatOrder, error)
		Update(ctx context.Context, data *ChatOrder) error
		Delete(ctx context.Context, orderId string) error
	}

	defaultChatOrderModel struct {
		sqlc.CachedConn
		table string
	}

	ChatOrder struct {
		CreateTime          time.Time     `db:"create_time"`
		UpdateTime          time.Time     `db:"update_time"` // 更新状态时间
		OrderId             string        `db:"order_id"`
		ListenerNickName    string        `db:"listener_nick_name"` // XXX昵称
		ListenerAvatar      string        `db:"listener_avatar"`    // XXX头像
		ListenerUid         int64         `db:"listener_uid"`
		Uid                 int64         `db:"uid"`
		ChatUnitMinute      int64         `db:"chat_unit_minute"`      // 服务单价包含多少分钟
		BuyUnit             int64         `db:"buy_unit"`              // 购买的时长单位数
		OrderType           int64         `db:"order_type"`            // 聊天类型2文字4语音
		UnitPrice           int64         `db:"unit_price"`            // 单价（分）
		BaseAmount          int64         `db:"base_amount"`           // 服务费（分）
		TaxAmount           int64         `db:"tax_amount"`            // 税费（分）
		NightAddAmount      int64         `db:"night_add_amount"`      // 夜间加收费用（分）
		SaveAmount          int64         `db:"save_amount"`           // 优惠减免金额（分）
		ActualAmount        int64         `db:"actual_amount"`         // 实际总费用（分）
		ExpiryTime          sql.NullTime  `db:"expiry_time"`           // 服务有效期
		UsedChatMinute      int64         `db:"used_chat_minute"`      // 实际使用时长分钟（有多次累加）
		StartTime           sql.NullTime  `db:"start_time"`            // 服务开始时间
		EndTime             sql.NullTime  `db:"end_time"`              // 服务结束时间（有多次，最近一次）
		PricingPlanId       int64         `db:"pricing_plan_id"`       // 定价分成方案id
		PlatformShareAmount int64         `db:"platform_share_amount"` // 平台收益金额（分）
		OrderState          int64         `db:"order_state"`           // 订单状态
		ListenerAmount      int64         `db:"listener_amount"`       // XXX收益
		BuyMinuteSum        int64         `db:"buy_minute_sum"`        // 用户当前累计购买此位XXX分钟总数
		NickName            string        `db:"nick_name"`             // 用户昵称
		Avatar              string        `db:"avatar"`                // 用户头像
		CommentTime         sql.NullTime  `db:"comment_time"`          // 用户评价时间
		Comment             string        `db:"comment"`               // 用户评价内容
		CommentTag          pq.Int64Array `db:"comment_tag"`           // 评价标签
		Star                int64         `db:"star"`                  // 用户评价1不满意3一般5满意
		ReplyTime           sql.NullTime  `db:"reply_time"`            // XXX回复时间
		Reply               string        `db:"reply"`                 // XXX回复内容
		FeedbackTime        sql.NullTime  `db:"feedback_time"`         // XXX反馈时间
		Feedback            string        `db:"feedback"`              // XXX反馈
		ApplyRefundTime     sql.NullTime  `db:"apply_refund_time"`     // 首次申请退款时间
		RefundReason        string        `db:"refund_reason"`         // 退款原因
		RefundReasonTag     int64         `db:"refund_reason_tag"`     // 退款原因标签
		Additional          string        `db:"additional"`            // 补充信息
		Attachment          string        `db:"attachment"`            // 附加图片 #分隔
		RefundCheckRemark   string        `db:"refund_check_remark"`   // XXX退款审核意见
		RefundSuccessTime   sql.NullTime  `db:"refund_success_time"`   // 退款成功时间
		SettleTime          sql.NullTime  `db:"settle_time"`           // 订单分成确认时间
		UserChannel         string        `db:"user_channel"`          // 用户渠道
		ListenerChannel     string        `db:"listener_channel"`      // XXX渠道
	}
)

func newChatOrderModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultChatOrderModel {
	return &defaultChatOrderModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      `"jakarta"."chat_order"`,
	}
}

func (m *defaultChatOrderModel) Delete(ctx context.Context, orderId string) error {
	jakartaChatOrderOrderIdKey := fmt.Sprintf("%s%v", cacheJakartaChatOrderOrderIdPrefix, orderId)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where order_id = $1", m.table)
		return conn.ExecCtx(ctx, query, orderId)
	}, jakartaChatOrderOrderIdKey)
	return err
}

func (m *defaultChatOrderModel) FindOne(ctx context.Context, orderId string) (*ChatOrder, error) {
	jakartaChatOrderOrderIdKey := fmt.Sprintf("%s%v", cacheJakartaChatOrderOrderIdPrefix, orderId)
	var resp ChatOrder
	err := m.QueryRowCtx(ctx, &resp, jakartaChatOrderOrderIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where order_id = $1 limit 1", chatOrderRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, orderId)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultChatOrderModel) Insert(ctx context.Context, data *ChatOrder) (sql.Result, error) {
	jakartaChatOrderOrderIdKey := fmt.Sprintf("%s%v", cacheJakartaChatOrderOrderIdPrefix, data.OrderId)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22, $23, $24, $25, $26, $27, $28, $29, $30, $31, $32, $33, $34, $35, $36, $37, $38, $39, $40, $41, $42, $43)", m.table, chatOrderRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.OrderId, data.ListenerNickName, data.ListenerAvatar, data.ListenerUid, data.Uid, data.ChatUnitMinute, data.BuyUnit, data.OrderType, data.UnitPrice, data.BaseAmount, data.TaxAmount, data.NightAddAmount, data.SaveAmount, data.ActualAmount, data.ExpiryTime, data.UsedChatMinute, data.StartTime, data.EndTime, data.PricingPlanId, data.PlatformShareAmount, data.OrderState, data.ListenerAmount, data.BuyMinuteSum, data.NickName, data.Avatar, data.CommentTime, data.Comment, data.CommentTag, data.Star, data.ReplyTime, data.Reply, data.FeedbackTime, data.Feedback, data.ApplyRefundTime, data.RefundReason, data.RefundReasonTag, data.Additional, data.Attachment, data.RefundCheckRemark, data.RefundSuccessTime, data.SettleTime, data.UserChannel, data.ListenerChannel)
	}, jakartaChatOrderOrderIdKey)
	return ret, err
}

func (m *defaultChatOrderModel) Update(ctx context.Context, data *ChatOrder) error {
	jakartaChatOrderOrderIdKey := fmt.Sprintf("%s%v", cacheJakartaChatOrderOrderIdPrefix, data.OrderId)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where order_id = $1", m.table, chatOrderRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.OrderId, data.ListenerNickName, data.ListenerAvatar, data.ListenerUid, data.Uid, data.ChatUnitMinute, data.BuyUnit, data.OrderType, data.UnitPrice, data.BaseAmount, data.TaxAmount, data.NightAddAmount, data.SaveAmount, data.ActualAmount, data.ExpiryTime, data.UsedChatMinute, data.StartTime, data.EndTime, data.PricingPlanId, data.PlatformShareAmount, data.OrderState, data.ListenerAmount, data.BuyMinuteSum, data.NickName, data.Avatar, data.CommentTime, data.Comment, data.CommentTag, data.Star, data.ReplyTime, data.Reply, data.FeedbackTime, data.Feedback, data.ApplyRefundTime, data.RefundReason, data.RefundReasonTag, data.Additional, data.Attachment, data.RefundCheckRemark, data.RefundSuccessTime, data.SettleTime, data.UserChannel, data.ListenerChannel)
	}, jakartaChatOrderOrderIdKey)
	return err
}

func (m *defaultChatOrderModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheJakartaChatOrderOrderIdPrefix, primary)
}

func (m *defaultChatOrderModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where order_id = $1 limit 1", chatOrderRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultChatOrderModel) tableName() string {
	return m.table
}
