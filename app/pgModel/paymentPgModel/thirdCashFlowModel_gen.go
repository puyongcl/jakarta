// Code generated by goctl. DO NOT EDIT!

package paymentPgModel

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	thirdCashFlowFieldNames          = builder.RawFieldNames(&ThirdCashFlow{}, true)
	thirdCashFlowRows                = strings.Join(thirdCashFlowFieldNames, ",")
	thirdCashFlowRowsExpectAutoSet   = strings.Join(stringx.Remove(thirdCashFlowFieldNames, "create_time", "update_time", "create_at", "update_at"), ",")
	thirdCashFlowRowsWithPlaceHolder = builder.PostgreSqlJoin(stringx.Remove(thirdCashFlowFieldNames, "flow_no", "create_time", "update_time", "create_at", "update_at"))
)

type (
	thirdCashFlowModel interface {
		Insert(ctx context.Context, data *ThirdCashFlow) (sql.Result, error)
		FindOne(ctx context.Context, flowNo string) (*ThirdCashFlow, error)
		Update(ctx context.Context, data *ThirdCashFlow) error
		Delete(ctx context.Context, flowNo string) error
	}

	defaultThirdCashFlowModel struct {
		conn  sqlx.SqlConn
		table string
	}

	ThirdCashFlow struct {
		CreateTime        time.Time    `db:"create_time"`
		UpdateTime        time.Time    `db:"update_time"`
		FlowNo            string       `db:"flow_no"`
		WorkNumber        string       `db:"work_number"`
		Amount            int64        `db:"amount"`
		PhoneNumber       string       `db:"phone_number"`
		Uid               int64        `db:"uid"`
		Name              string       `db:"name"`
		IdNo              string       `db:"id_no"`
		BankCardNo        string       `db:"bank_card_no"`
		TransactionNumber string       `db:"transaction_number"`
		PayStatus         int64        `db:"pay_status"`
		PayTime           sql.NullTime `db:"pay_time"`
		ErrMsg            string       `db:"err_msg"`
		WalletFlowNo      string       `db:"wallet_flow_no"`
	}
)

func newThirdCashFlowModel(conn sqlx.SqlConn) *defaultThirdCashFlowModel {
	return &defaultThirdCashFlowModel{
		conn:  conn,
		table: `"jakarta"."third_cash_flow"`,
	}
}

func (m *defaultThirdCashFlowModel) Delete(ctx context.Context, flowNo string) error {
	query := fmt.Sprintf("delete from %s where flow_no = $1", m.table)
	_, err := m.conn.ExecCtx(ctx, query, flowNo)
	return err
}

func (m *defaultThirdCashFlowModel) FindOne(ctx context.Context, flowNo string) (*ThirdCashFlow, error) {
	query := fmt.Sprintf("select %s from %s where flow_no = $1 limit 1", thirdCashFlowRows, m.table)
	var resp ThirdCashFlow
	err := m.conn.QueryRowCtx(ctx, &resp, query, flowNo)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultThirdCashFlowModel) Insert(ctx context.Context, data *ThirdCashFlow) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13)", m.table, thirdCashFlowRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.FlowNo, data.WorkNumber, data.Amount, data.PhoneNumber, data.Uid, data.Name, data.IdNo, data.BankCardNo, data.TransactionNumber, data.PayStatus, data.PayTime, data.ErrMsg, data.WalletFlowNo)
	return ret, err
}

func (m *defaultThirdCashFlowModel) Update(ctx context.Context, data *ThirdCashFlow) error {
	query := fmt.Sprintf("update %s set %s where flow_no = $1", m.table, thirdCashFlowRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.FlowNo, data.WorkNumber, data.Amount, data.PhoneNumber, data.Uid, data.Name, data.IdNo, data.BankCardNo, data.TransactionNumber, data.PayStatus, data.PayTime, data.ErrMsg, data.WalletFlowNo)
	return err
}

func (m *defaultThirdCashFlowModel) tableName() string {
	return m.table
}
