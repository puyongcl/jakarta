// Code generated by goctl. DO NOT EDIT!

package chatPgModel

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	voiceChatLogFieldNames          = builder.RawFieldNames(&VoiceChatLog{}, true)
	voiceChatLogRows                = strings.Join(voiceChatLogFieldNames, ",")
	voiceChatLogRowsExpectAutoSet   = strings.Join(stringx.Remove(voiceChatLogFieldNames, "create_time", "update_time", "create_t", "update_at"), ",")
	voiceChatLogRowsWithPlaceHolder = builder.PostgreSqlJoin(stringx.Remove(voiceChatLogFieldNames, "id", "create_time", "update_time", "create_at", "update_at"))
)

type (
	voiceChatLogModel interface {
		Insert(ctx context.Context, data *VoiceChatLog) (sql.Result, error)
		FindOne(ctx context.Context, id string) (*VoiceChatLog, error)
		Update(ctx context.Context, data *VoiceChatLog) error
		Delete(ctx context.Context, id string) error
	}

	defaultVoiceChatLogModel struct {
		conn  sqlx.SqlConn
		table string
	}

	VoiceChatLog struct {
		CreateTime  time.Time    `db:"create_time"`
		Id          string       `db:"id"`
		ListenerUid int64        `db:"listener_uid"`
		Uid         int64        `db:"uid"`
		EndTime     sql.NullTime `db:"end_time"`
		StartTime   time.Time    `db:"start_time"`
		StartAction int64        `db:"start_action"`
		StopAction  int64        `db:"stop_action"`
		State       int64        `db:"state"`
	}
)

func newVoiceChatLogModel(conn sqlx.SqlConn) *defaultVoiceChatLogModel {
	return &defaultVoiceChatLogModel{
		conn:  conn,
		table: `"jakarta"."voice_chat_log"`,
	}
}

func (m *defaultVoiceChatLogModel) Delete(ctx context.Context, id string) error {
	query := fmt.Sprintf("delete from %s where id = $1", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultVoiceChatLogModel) FindOne(ctx context.Context, id string) (*VoiceChatLog, error) {
	query := fmt.Sprintf("select %s from %s where id = $1 limit 1", voiceChatLogRows, m.table)
	var resp VoiceChatLog
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultVoiceChatLogModel) Insert(ctx context.Context, data *VoiceChatLog) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values ($1, $2, $3, $4, $5, $6, $7, $8)", m.table, voiceChatLogRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Id, data.ListenerUid, data.Uid, data.EndTime, data.StartTime, data.StartAction, data.StopAction, data.State)
	return ret, err
}

func (m *defaultVoiceChatLogModel) Update(ctx context.Context, data *VoiceChatLog) error {
	query := fmt.Sprintf("update %s set %s where id = $1", m.table, voiceChatLogRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.Id, data.ListenerUid, data.Uid, data.EndTime, data.StartTime, data.StartAction, data.StopAction, data.State)
	return err
}

func (m *defaultVoiceChatLogModel) tableName() string {
	return m.table
}
