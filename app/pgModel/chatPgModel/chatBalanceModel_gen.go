// Code generated by goctl. DO NOT EDIT!

package chatPgModel

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	chatBalanceFieldNames          = builder.RawFieldNames(&ChatBalance{}, true)
	chatBalanceRows                = strings.Join(chatBalanceFieldNames, ",")
	chatBalanceRowsExpectAutoSet   = strings.Join(stringx.Remove(chatBalanceFieldNames, "create_time", "update_time", "create_at", "update_at"), ",")
	chatBalanceRowsWithPlaceHolder = builder.PostgreSqlJoin(stringx.Remove(chatBalanceFieldNames, "id", "create_time", "update_time", "create_at", "update_at"))

	cacheJakartaChatBalanceIdPrefix = "cache:jakarta:chatBalance:id:"
)

type (
	chatBalanceModel interface {
		Insert(ctx context.Context, data *ChatBalance) (sql.Result, error)
		FindOne(ctx context.Context, id string) (*ChatBalance, error)
		Update(ctx context.Context, data *ChatBalance) error
		Delete(ctx context.Context, id string) error
	}

	defaultChatBalanceModel struct {
		sqlc.CachedConn
		table string
	}

	ChatBalance struct {
		Uid                        int64        `db:"uid"`
		CreateTime                 time.Time    `db:"create_time"`
		UpdateTime                 time.Time    `db:"update_time"`
		TextChatExpiryTime         sql.NullTime `db:"text_chat_expiry_time"`
		AvailableVoiceChatMinute   int64        `db:"available_voice_chat_minute"`
		UsedVoiceChatMinute        int64        `db:"used_voice_chat_minute"`
		ListenerUid                int64        `db:"listener_uid"`
		CurrentChatLogId           string       `db:"current_chat_log_id"`
		CurrentStartTime           sql.NullTime `db:"current_start_time"`             // 当前最近一次通话开始时间
		CurrentStopTime            sql.NullTime `db:"current_stop_time"`              // 当前最近一次通话结束时间
		CurrentVoiceChatExpiryTime sql.NullTime `db:"current_voice_chat_expiry_time"` // 本次通话预计到期时间
		CurrentVoiceChatState      int64        `db:"current_voice_chat_state"`       // 当前或最近一次通话状态
		Id                         string       `db:"id"`
		CurrentTextChatState       int64        `db:"current_text_chat_state"` // 当前文字聊天状态
		TodayFirstEnterTime        time.Time    `db:"today_first_enter_time"`  // 今天第一次进入聊天页面时间
	}
)

func newChatBalanceModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultChatBalanceModel {
	return &defaultChatBalanceModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      `"jakarta"."chat_balance"`,
	}
}

func (m *defaultChatBalanceModel) Delete(ctx context.Context, id string) error {
	jakartaChatBalanceIdKey := fmt.Sprintf("%s%v", cacheJakartaChatBalanceIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where id = $1", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, jakartaChatBalanceIdKey)
	return err
}

func (m *defaultChatBalanceModel) FindOne(ctx context.Context, id string) (*ChatBalance, error) {
	jakartaChatBalanceIdKey := fmt.Sprintf("%s%v", cacheJakartaChatBalanceIdPrefix, id)
	var resp ChatBalance
	err := m.QueryRowCtx(ctx, &resp, jakartaChatBalanceIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where id = $1 limit 1", chatBalanceRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultChatBalanceModel) Insert(ctx context.Context, data *ChatBalance) (sql.Result, error) {
	jakartaChatBalanceIdKey := fmt.Sprintf("%s%v", cacheJakartaChatBalanceIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13)", m.table, chatBalanceRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Uid, data.TextChatExpiryTime, data.AvailableVoiceChatMinute, data.UsedVoiceChatMinute, data.ListenerUid, data.CurrentChatLogId, data.CurrentStartTime, data.CurrentStopTime, data.CurrentVoiceChatExpiryTime, data.CurrentVoiceChatState, data.Id, data.CurrentTextChatState, data.TodayFirstEnterTime)
	}, jakartaChatBalanceIdKey)
	return ret, err
}

func (m *defaultChatBalanceModel) Update(ctx context.Context, data *ChatBalance) error {
	jakartaChatBalanceIdKey := fmt.Sprintf("%s%v", cacheJakartaChatBalanceIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where id = $1", m.table, chatBalanceRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.Id, data.Uid, data.TextChatExpiryTime, data.AvailableVoiceChatMinute, data.UsedVoiceChatMinute, data.ListenerUid, data.CurrentChatLogId, data.CurrentStartTime, data.CurrentStopTime, data.CurrentVoiceChatExpiryTime, data.CurrentVoiceChatState, data.CurrentTextChatState, data.TodayFirstEnterTime)
	}, jakartaChatBalanceIdKey)
	return err
}

func (m *defaultChatBalanceModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheJakartaChatBalanceIdPrefix, primary)
}

func (m *defaultChatBalanceModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where id = $1 limit 1", chatBalanceRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultChatBalanceModel) tableName() string {
	return m.table
}
