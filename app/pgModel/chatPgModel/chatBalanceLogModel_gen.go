// Code generated by goctl. DO NOT EDIT!

package chatPgModel

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	chatBalanceLogFieldNames          = builder.RawFieldNames(&ChatBalanceLog{}, true)
	chatBalanceLogRows                = strings.Join(chatBalanceLogFieldNames, ",")
	chatBalanceLogRowsExpectAutoSet   = strings.Join(stringx.Remove(chatBalanceLogFieldNames, "create_time", "update_time", "create_t", "update_at"), ",")
	chatBalanceLogRowsWithPlaceHolder = builder.PostgreSqlJoin(stringx.Remove(chatBalanceLogFieldNames, "id", "create_time", "update_time", "create_at", "update_at"))
)

type (
	chatBalanceLogModel interface {
		Insert(ctx context.Context, data *ChatBalanceLog) (sql.Result, error)
		FindOne(ctx context.Context, id string) (*ChatBalanceLog, error)
		FindOneByEventTypeEventId(ctx context.Context, eventType int64, eventId string) (*ChatBalanceLog, error)
		Update(ctx context.Context, data *ChatBalanceLog) error
		Delete(ctx context.Context, id string) error
	}

	defaultChatBalanceLogModel struct {
		conn  sqlx.SqlConn
		table string
	}

	ChatBalanceLog struct {
		Id            string    `db:"id"`
		CreateTime    time.Time `db:"create_time"`
		EventType     int64     `db:"event_type"`
		EventId       string    `db:"event_id"`
		Value         int64     `db:"value"`
		Uid           int64     `db:"uid"`
		ListenerUid   int64     `db:"listener_uid"`
		ChatBalanceId string    `db:"chat_balance_id"`
	}
)

func newChatBalanceLogModel(conn sqlx.SqlConn) *defaultChatBalanceLogModel {
	return &defaultChatBalanceLogModel{
		conn:  conn,
		table: `"jakarta"."chat_balance_log"`,
	}
}

func (m *defaultChatBalanceLogModel) Delete(ctx context.Context, id string) error {
	query := fmt.Sprintf("delete from %s where id = $1", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultChatBalanceLogModel) FindOne(ctx context.Context, id string) (*ChatBalanceLog, error) {
	query := fmt.Sprintf("select %s from %s where id = $1 limit 1", chatBalanceLogRows, m.table)
	var resp ChatBalanceLog
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultChatBalanceLogModel) FindOneByEventTypeEventId(ctx context.Context, eventType int64, eventId string) (*ChatBalanceLog, error) {
	var resp ChatBalanceLog
	query := fmt.Sprintf("select %s from %s where event_type = $1 and event_id = $2 limit 1", chatBalanceLogRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, eventType, eventId)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultChatBalanceLogModel) Insert(ctx context.Context, data *ChatBalanceLog) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values ($1, $2, $3, $4, $5, $6, $7)", m.table, chatBalanceLogRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Id, data.EventType, data.EventId, data.Value, data.Uid, data.ListenerUid, data.ChatBalanceId)
	return ret, err
}

func (m *defaultChatBalanceLogModel) Update(ctx context.Context, newData *ChatBalanceLog) error {
	query := fmt.Sprintf("update %s set %s where id = $1", m.table, chatBalanceLogRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, newData.Id, newData.EventType, newData.EventId, newData.Value, newData.Uid, newData.ListenerUid, newData.ChatBalanceId)
	return err
}

func (m *defaultChatBalanceLogModel) tableName() string {
	return m.table
}
