// Code generated by goctl. DO NOT EDIT!

package bbsPgModel

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	storyFieldNames          = builder.RawFieldNames(&Story{}, true)
	storyRows                = strings.Join(storyFieldNames, ",")
	storyRowsExpectAutoSet   = strings.Join(stringx.Remove(storyFieldNames, "create_time", "update_time", "create_at", "update_at"), ",")
	storyRowsWithPlaceHolder = builder.PostgreSqlJoin(stringx.Remove(storyFieldNames, "id", "create_time", "update_time", "create_at", "update_at"))

	cacheJakartaStoryIdPrefix = "cache:jakarta:story:id:"
)

type (
	storyModel interface {
		Insert(ctx context.Context, data *Story) (sql.Result, error)
		FindOne(ctx context.Context, id string) (*Story, error)
		Update(ctx context.Context, data *Story) error
		Delete(ctx context.Context, id string) error
	}

	defaultStoryModel struct {
		sqlc.CachedConn
		table string
	}

	Story struct {
		CreateTime time.Time `db:"create_time"`
		UpdateTime time.Time `db:"update_time"`
		Id         string    `db:"id"`
		Uid        int64     `db:"uid"`
		StoryType  int64     `db:"story_type"` // XX类型
		Spec       int64     `db:"spec"`       // 擅长领域
		Tittle     string    `db:"tittle"`     // 标题
		Content    string    `db:"content"`    // 发布内容
		State      int64     `db:"state"`      // 状态
		ViewCnt    int64     `db:"view_cnt"`   // 浏览次数
		ReplyCnt   int64     `db:"reply_cnt"`  // 回复人数
		TextMd5    string    `db:"text_md5"`
	}
)

func newStoryModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultStoryModel {
	return &defaultStoryModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      `"jakarta"."story"`,
	}
}

func (m *defaultStoryModel) Delete(ctx context.Context, id string) error {
	jakartaStoryIdKey := fmt.Sprintf("%s%v", cacheJakartaStoryIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where id = $1", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, jakartaStoryIdKey)
	return err
}

func (m *defaultStoryModel) FindOne(ctx context.Context, id string) (*Story, error) {
	jakartaStoryIdKey := fmt.Sprintf("%s%v", cacheJakartaStoryIdPrefix, id)
	var resp Story
	err := m.QueryRowCtx(ctx, &resp, jakartaStoryIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where id = $1 limit 1", storyRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultStoryModel) Insert(ctx context.Context, data *Story) (sql.Result, error) {
	jakartaStoryIdKey := fmt.Sprintf("%s%v", cacheJakartaStoryIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10)", m.table, storyRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Id, data.Uid, data.StoryType, data.Spec, data.Tittle, data.Content, data.State, data.ViewCnt, data.ReplyCnt, data.TextMd5)
	}, jakartaStoryIdKey)
	return ret, err
}

func (m *defaultStoryModel) Update(ctx context.Context, data *Story) error {
	jakartaStoryIdKey := fmt.Sprintf("%s%v", cacheJakartaStoryIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where id = $1", m.table, storyRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.Id, data.Uid, data.StoryType, data.Spec, data.Tittle, data.Content, data.State, data.ViewCnt, data.ReplyCnt, data.TextMd5)
	}, jakartaStoryIdKey)
	return err
}

func (m *defaultStoryModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheJakartaStoryIdPrefix, primary)
}

func (m *defaultStoryModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where id = $1 limit 1", storyRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultStoryModel) tableName() string {
	return m.table
}
