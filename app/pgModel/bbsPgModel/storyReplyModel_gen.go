// Code generated by goctl. DO NOT EDIT!

package bbsPgModel

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	storyReplyFieldNames          = builder.RawFieldNames(&StoryReply{}, true)
	storyReplyRows                = strings.Join(storyReplyFieldNames, ",")
	storyReplyRowsExpectAutoSet   = strings.Join(stringx.Remove(storyReplyFieldNames, "create_time", "update_time", "create_at", "update_at"), ",")
	storyReplyRowsWithPlaceHolder = builder.PostgreSqlJoin(stringx.Remove(storyReplyFieldNames, "id", "create_time", "update_time", "create_at", "update_at"))

	cacheJakartaStoryReplyIdPrefix = "cache:jakarta:storyReply:id:"
)

type (
	storyReplyModel interface {
		Insert(ctx context.Context, data *StoryReply) (sql.Result, error)
		FindOne(ctx context.Context, id string) (*StoryReply, error)
		Update(ctx context.Context, data *StoryReply) error
		Delete(ctx context.Context, id string) error
	}

	defaultStoryReplyModel struct {
		sqlc.CachedConn
		table string
	}

	StoryReply struct {
		CreateTime  time.Time `db:"create_time"`
		UpdateTime  time.Time `db:"update_time"`
		Id          string    `db:"id"`
		StoryId     string    `db:"story_id"`
		ListenerUid int64     `db:"listener_uid"`
		ReplyText   string    `db:"reply_text"`
		ReplyVoice  string    `db:"reply_voice"`
		LikeCnt     int64     `db:"like_cnt"` // 点赞人数
		State       int64     `db:"state"`
		Uid         int64     `db:"uid"`
		TextMd5     string    `db:"text_md5"`
	}
)

func newStoryReplyModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultStoryReplyModel {
	return &defaultStoryReplyModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      `"jakarta"."story_reply"`,
	}
}

func (m *defaultStoryReplyModel) Delete(ctx context.Context, id string) error {
	jakartaStoryReplyIdKey := fmt.Sprintf("%s%v", cacheJakartaStoryReplyIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where id = $1", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, jakartaStoryReplyIdKey)
	return err
}

func (m *defaultStoryReplyModel) FindOne(ctx context.Context, id string) (*StoryReply, error) {
	jakartaStoryReplyIdKey := fmt.Sprintf("%s%v", cacheJakartaStoryReplyIdPrefix, id)
	var resp StoryReply
	err := m.QueryRowCtx(ctx, &resp, jakartaStoryReplyIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where id = $1 limit 1", storyReplyRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultStoryReplyModel) Insert(ctx context.Context, data *StoryReply) (sql.Result, error) {
	jakartaStoryReplyIdKey := fmt.Sprintf("%s%v", cacheJakartaStoryReplyIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values ($1, $2, $3, $4, $5, $6, $7, $8, $9)", m.table, storyReplyRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Id, data.StoryId, data.ListenerUid, data.ReplyText, data.ReplyVoice, data.LikeCnt, data.State, data.Uid, data.TextMd5)
	}, jakartaStoryReplyIdKey)
	return ret, err
}

func (m *defaultStoryReplyModel) Update(ctx context.Context, data *StoryReply) error {
	jakartaStoryReplyIdKey := fmt.Sprintf("%s%v", cacheJakartaStoryReplyIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where id = $1", m.table, storyReplyRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.Id, data.StoryId, data.ListenerUid, data.ReplyText, data.ReplyVoice, data.LikeCnt, data.State, data.Uid, data.TextMd5)
	}, jakartaStoryReplyIdKey)
	return err
}

func (m *defaultStoryReplyModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheJakartaStoryReplyIdPrefix, primary)
}

func (m *defaultStoryReplyModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where id = $1 limit 1", storyReplyRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultStoryReplyModel) tableName() string {
	return m.table
}
