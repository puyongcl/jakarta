// Code generated by goctl. DO NOT EDIT!

package bbsPgModel

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	storyViewLogFieldNames          = builder.RawFieldNames(&StoryViewLog{}, true)
	storyViewLogRows                = strings.Join(storyViewLogFieldNames, ",")
	storyViewLogRowsExpectAutoSet   = strings.Join(stringx.Remove(storyViewLogFieldNames, "create_time", "update_time", "create_at", "update_at"), ",")
	storyViewLogRowsWithPlaceHolder = builder.PostgreSqlJoin(stringx.Remove(storyViewLogFieldNames, "id", "create_time", "update_time", "create_at", "update_at"))
)

type (
	storyViewLogModel interface {
		Insert(ctx context.Context, data *StoryViewLog) (sql.Result, error)
		FindOne(ctx context.Context, id string) (*StoryViewLog, error)
		Update(ctx context.Context, data *StoryViewLog) error
		Delete(ctx context.Context, id string) error
	}

	defaultStoryViewLogModel struct {
		conn  sqlx.SqlConn
		table string
	}

	StoryViewLog struct {
		CreateTime time.Time `db:"create_time"`
		UpdateTime time.Time `db:"update_time"`
		Id         string    `db:"id"`
		ViewCnt    int64     `db:"view_cnt"` // 浏览次数
		Uid        int64     `db:"uid"`
		StoryId    string    `db:"story_id"`
	}
)

func newStoryViewLogModel(conn sqlx.SqlConn) *defaultStoryViewLogModel {
	return &defaultStoryViewLogModel{
		conn:  conn,
		table: `"jakarta"."story_view_log"`,
	}
}

func (m *defaultStoryViewLogModel) Delete(ctx context.Context, id string) error {
	query := fmt.Sprintf("delete from %s where id = $1", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultStoryViewLogModel) FindOne(ctx context.Context, id string) (*StoryViewLog, error) {
	query := fmt.Sprintf("select %s from %s where id = $1 limit 1", storyViewLogRows, m.table)
	var resp StoryViewLog
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultStoryViewLogModel) Insert(ctx context.Context, data *StoryViewLog) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values ($1, $2, $3, $4)", m.table, storyViewLogRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Id, data.ViewCnt, data.Uid, data.StoryId)
	return ret, err
}

func (m *defaultStoryViewLogModel) Update(ctx context.Context, data *StoryViewLog) error {
	query := fmt.Sprintf("update %s set %s where id = $1", m.table, storyViewLogRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.Id, data.ViewCnt, data.Uid, data.StoryId)
	return err
}

func (m *defaultStoryViewLogModel) tableName() string {
	return m.table
}
