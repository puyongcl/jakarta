// Code generated by goctl. DO NOT EDIT!
// Source: statistic.proto

package statistic

import (
	"context"

	"jakarta/app/statistic/rpc/pb"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	DailyStat                    = pb.DailyStat
	GetAdultQuizEcrReq           = pb.GetAdultQuizEcrReq
	GetAdultQuizEcrResp          = pb.GetAdultQuizEcrResp
	GetDailyStatListReq          = pb.GetDailyStatListReq
	GetDailyStatListResp         = pb.GetDailyStatListResp
	GetLifeTimeValueStatReq      = pb.GetLifeTimeValueStatReq
	GetLifeTimeValueStatResp     = pb.GetLifeTimeValueStatResp
	GetUserChannelListReq        = pb.GetUserChannelListReq
	GetUserChannelListResp       = pb.GetUserChannelListResp
	GetUserListReq               = pb.GetUserListReq
	GetUserListResp              = pb.GetUserListResp
	LifeTimeValueStat            = pb.LifeTimeValueStat
	SaveAdultQuizEcrReq          = pb.SaveAdultQuizEcrReq
	SaveAdultQuizEcrResp         = pb.SaveAdultQuizEcrResp
	SaveNewUserSelectSpecReq     = pb.SaveNewUserSelectSpecReq
	SaveNewUserSelectSpecResp    = pb.SaveNewUserSelectSpecResp
	UpdateLoginLogReq            = pb.UpdateLoginLogReq
	UpdateLoginLogResp           = pb.UpdateLoginLogResp
	UpdateStatisticDailyDataReq  = pb.UpdateStatisticDailyDataReq
	UpdateStatisticDailyDataResp = pb.UpdateStatisticDailyDataResp
	UpdateUserStateStatReq       = pb.UpdateUserStateStatReq
	UpdateUserStateStatResp      = pb.UpdateUserStateStatResp
	UserDetail                   = pb.UserDetail

	Statistic interface {
		// 获取用户列表
		GetUserList(ctx context.Context, in *GetUserListReq, opts ...grpc.CallOption) (*GetUserListResp, error)
		// 更新每日统计数据
		UpdateStatisticDailyData(ctx context.Context, in *UpdateStatisticDailyDataReq, opts ...grpc.CallOption) (*UpdateStatisticDailyDataResp, error)
		// 获取每日统计数据
		GetDailyStatList(ctx context.Context, in *GetDailyStatListReq, opts ...grpc.CallOption) (*GetDailyStatListResp, error)
		// 更新每日登陆时间
		UpdateLoginLog(ctx context.Context, in *UpdateLoginLogReq, opts ...grpc.CallOption) (*UpdateLoginLogResp, error)
		// 获取统计近多少日的用户在昨日累计数据
		GetLifeTimeValueStat(ctx context.Context, in *GetLifeTimeValueStatReq, opts ...grpc.CallOption) (*GetLifeTimeValueStatResp, error)
		// 获取用户渠道列表
		GetUserChannelList(ctx context.Context, in *GetUserChannelListReq, opts ...grpc.CallOption) (*GetUserChannelListResp, error)
		// 新用户选择的XX标签
		SaveNewUserSelectSpec(ctx context.Context, in *SaveNewUserSelectSpecReq, opts ...grpc.CallOption) (*SaveNewUserSelectSpecResp, error)
		// 定时统计用户和XXX状态数据
		UpdateUserStateStat(ctx context.Context, in *UpdateUserStateStatReq, opts ...grpc.CallOption) (*UpdateUserStateStatResp, error)
		// 保存成人依恋量表测试结果
		SaveAdultQuizECR(ctx context.Context, in *SaveAdultQuizEcrReq, opts ...grpc.CallOption) (*SaveAdultQuizEcrResp, error)
		// 获取最新成人依恋量表测试结果
		GetAdultQuizEcr(ctx context.Context, in *GetAdultQuizEcrReq, opts ...grpc.CallOption) (*GetAdultQuizEcrResp, error)
	}

	defaultStatistic struct {
		cli zrpc.Client
	}
)

func NewStatistic(cli zrpc.Client) Statistic {
	return &defaultStatistic{
		cli: cli,
	}
}

// 获取用户列表
func (m *defaultStatistic) GetUserList(ctx context.Context, in *GetUserListReq, opts ...grpc.CallOption) (*GetUserListResp, error) {
	client := pb.NewStatisticClient(m.cli.Conn())
	return client.GetUserList(ctx, in, opts...)
}

// 更新每日统计数据
func (m *defaultStatistic) UpdateStatisticDailyData(ctx context.Context, in *UpdateStatisticDailyDataReq, opts ...grpc.CallOption) (*UpdateStatisticDailyDataResp, error) {
	client := pb.NewStatisticClient(m.cli.Conn())
	return client.UpdateStatisticDailyData(ctx, in, opts...)
}

// 获取每日统计数据
func (m *defaultStatistic) GetDailyStatList(ctx context.Context, in *GetDailyStatListReq, opts ...grpc.CallOption) (*GetDailyStatListResp, error) {
	client := pb.NewStatisticClient(m.cli.Conn())
	return client.GetDailyStatList(ctx, in, opts...)
}

// 更新每日登陆时间
func (m *defaultStatistic) UpdateLoginLog(ctx context.Context, in *UpdateLoginLogReq, opts ...grpc.CallOption) (*UpdateLoginLogResp, error) {
	client := pb.NewStatisticClient(m.cli.Conn())
	return client.UpdateLoginLog(ctx, in, opts...)
}

// 获取统计近多少日的用户在昨日累计数据
func (m *defaultStatistic) GetLifeTimeValueStat(ctx context.Context, in *GetLifeTimeValueStatReq, opts ...grpc.CallOption) (*GetLifeTimeValueStatResp, error) {
	client := pb.NewStatisticClient(m.cli.Conn())
	return client.GetLifeTimeValueStat(ctx, in, opts...)
}

// 获取用户渠道列表
func (m *defaultStatistic) GetUserChannelList(ctx context.Context, in *GetUserChannelListReq, opts ...grpc.CallOption) (*GetUserChannelListResp, error) {
	client := pb.NewStatisticClient(m.cli.Conn())
	return client.GetUserChannelList(ctx, in, opts...)
}

// 新用户选择的XX标签
func (m *defaultStatistic) SaveNewUserSelectSpec(ctx context.Context, in *SaveNewUserSelectSpecReq, opts ...grpc.CallOption) (*SaveNewUserSelectSpecResp, error) {
	client := pb.NewStatisticClient(m.cli.Conn())
	return client.SaveNewUserSelectSpec(ctx, in, opts...)
}

// 定时统计用户和XXX状态数据
func (m *defaultStatistic) UpdateUserStateStat(ctx context.Context, in *UpdateUserStateStatReq, opts ...grpc.CallOption) (*UpdateUserStateStatResp, error) {
	client := pb.NewStatisticClient(m.cli.Conn())
	return client.UpdateUserStateStat(ctx, in, opts...)
}

// 保存成人依恋量表测试结果
func (m *defaultStatistic) SaveAdultQuizECR(ctx context.Context, in *SaveAdultQuizEcrReq, opts ...grpc.CallOption) (*SaveAdultQuizEcrResp, error) {
	client := pb.NewStatisticClient(m.cli.Conn())
	return client.SaveAdultQuizECR(ctx, in, opts...)
}

// 获取最新成人依恋量表测试结果
func (m *defaultStatistic) GetAdultQuizEcr(ctx context.Context, in *GetAdultQuizEcrReq, opts ...grpc.CallOption) (*GetAdultQuizEcrResp, error) {
	client := pb.NewStatisticClient(m.cli.Conn())
	return client.GetAdultQuizEcr(ctx, in, opts...)
}
