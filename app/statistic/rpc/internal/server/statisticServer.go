// Code generated by goctl. DO NOT EDIT!
// Source: statistic.proto

package server

import (
	"context"

	"jakarta/app/statistic/rpc/internal/logic"
	"jakarta/app/statistic/rpc/internal/svc"
	"jakarta/app/statistic/rpc/pb"
)

type StatisticServer struct {
	svcCtx *svc.ServiceContext
	pb.UnimplementedStatisticServer
}

func NewStatisticServer(svcCtx *svc.ServiceContext) *StatisticServer {
	return &StatisticServer{
		svcCtx: svcCtx,
	}
}

// 获取用户列表
func (s *StatisticServer) GetUserList(ctx context.Context, in *pb.GetUserListReq) (*pb.GetUserListResp, error) {
	l := logic.NewGetUserListLogic(ctx, s.svcCtx)
	return l.GetUserList(in)
}

// 更新每日统计数据
func (s *StatisticServer) UpdateStatisticDailyData(ctx context.Context, in *pb.UpdateStatisticDailyDataReq) (*pb.UpdateStatisticDailyDataResp, error) {
	l := logic.NewUpdateStatisticDailyDataLogic(ctx, s.svcCtx)
	return l.UpdateStatisticDailyData(in)
}

// 获取每日统计数据
func (s *StatisticServer) GetDailyStatList(ctx context.Context, in *pb.GetDailyStatListReq) (*pb.GetDailyStatListResp, error) {
	l := logic.NewGetDailyStatListLogic(ctx, s.svcCtx)
	return l.GetDailyStatList(in)
}

// 更新每日登陆时间
func (s *StatisticServer) UpdateLoginLog(ctx context.Context, in *pb.UpdateLoginLogReq) (*pb.UpdateLoginLogResp, error) {
	l := logic.NewUpdateLoginLogLogic(ctx, s.svcCtx)
	return l.UpdateLoginLog(in)
}

// 获取统计近多少日的用户在昨日累计数据
func (s *StatisticServer) GetLifeTimeValueStat(ctx context.Context, in *pb.GetLifeTimeValueStatReq) (*pb.GetLifeTimeValueStatResp, error) {
	l := logic.NewGetLifeTimeValueStatLogic(ctx, s.svcCtx)
	return l.GetLifeTimeValueStat(in)
}

// 获取用户渠道列表
func (s *StatisticServer) GetUserChannelList(ctx context.Context, in *pb.GetUserChannelListReq) (*pb.GetUserChannelListResp, error) {
	l := logic.NewGetUserChannelListLogic(ctx, s.svcCtx)
	return l.GetUserChannelList(in)
}

// 新用户选择的XX标签
func (s *StatisticServer) SaveNewUserSelectSpec(ctx context.Context, in *pb.SaveNewUserSelectSpecReq) (*pb.SaveNewUserSelectSpecResp, error) {
	l := logic.NewSaveNewUserSelectSpecLogic(ctx, s.svcCtx)
	return l.SaveNewUserSelectSpec(in)
}

// 定时统计用户和XXX状态数据
func (s *StatisticServer) UpdateUserStateStat(ctx context.Context, in *pb.UpdateUserStateStatReq) (*pb.UpdateUserStateStatResp, error) {
	l := logic.NewUpdateUserStateStatLogic(ctx, s.svcCtx)
	return l.UpdateUserStateStat(in)
}

// 保存成人依恋量表测试结果
func (s *StatisticServer) SaveAdultQuizECR(ctx context.Context, in *pb.SaveAdultQuizEcrReq) (*pb.SaveAdultQuizEcrResp, error) {
	l := logic.NewSaveAdultQuizECRLogic(ctx, s.svcCtx)
	return l.SaveAdultQuizECR(in)
}

// 获取最新成人依恋量表测试结果
func (s *StatisticServer) GetAdultQuizEcr(ctx context.Context, in *pb.GetAdultQuizEcrReq) (*pb.GetAdultQuizEcrResp, error) {
	l := logic.NewGetAdultQuizEcrLogic(ctx, s.svcCtx)
	return l.GetAdultQuizEcr(in)
}
