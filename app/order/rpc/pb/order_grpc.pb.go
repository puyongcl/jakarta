// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: order.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// OrderClient is the client API for Order service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrderClient interface {
	// 获取订单费用估算
	EstimateOrder(ctx context.Context, in *EstimateOrderReq, opts ...grpc.CallOption) (*EstimateOrderResp, error)
	// 咨询服务下订单
	CreateChatOrder(ctx context.Context, in *CreateChatOrderReq, opts ...grpc.CallOption) (*CreateChatOrderResp, error)
	// 获取订单详情
	GetChatOrderDetail(ctx context.Context, in *GetChatOrderDetailReq, opts ...grpc.CallOption) (*GetChatOrderDetailResp, error)
	// 订单操作
	DoChatOrderAction(ctx context.Context, in *DoChatOrderActionReq, opts ...grpc.CallOption) (*DoChatOrderActionResp, error)
	// 订单列表
	GetChatOrderList(ctx context.Context, in *GetChatOrderListReq, opts ...grpc.CallOption) (*GetChatOrderListResp, error)
	// 获取聊天服务价格配置
	GetBusinessChatPricePlan(ctx context.Context, in *GetBusinessChatPricePlanReq, opts ...grpc.CallOption) (*GetBusinessChatPricePlanResp, error)
	// 获取用户订单状态变化记录
	GetChatOrderStateLog(ctx context.Context, in *GetChatOrderStateLogReq, opts ...grpc.CallOption) (*GetChatOrderStateLogResp, error)
	// 更新订单的使用情况
	UpdateChatOrderUse(ctx context.Context, in *UpdateChatOrderUseReq, opts ...grpc.CallOption) (*UpdateChatOrderUseResp, error)
	// 获取过期的语音订单
	GetExpireVoiceChatOrder(ctx context.Context, in *GetExpireVoiceChatOrderReq, opts ...grpc.CallOption) (*GetExpireVoiceChatOrderResp, error)
	// 结算订单
	SettleChatOrder(ctx context.Context, in *SettleChatOrderReq, opts ...grpc.CallOption) (*SettleChatOrderResp, error)
	// 获取XXX评价列表
	GetListenerCommentList(ctx context.Context, in *GetListenerCommentListReq, opts ...grpc.CallOption) (*GetListenerCommentListResp, error)
	// XXX回复用户的订单评价
	ReplyOrderComment(ctx context.Context, in *ReplyOrderCommentReq, opts ...grpc.CallOption) (*ReplyOrderCommentResp, error)
	// XXX反馈
	FeedbackOrder(ctx context.Context, in *FeedbackOrderReq, opts ...grpc.CallOption) (*FeedbackOrderResp, error)
	// 管理后台获取订单列表
	GetOrderListByAdmin(ctx context.Context, in *GetOrderListByAdminReq, opts ...grpc.CallOption) (*GetOrderListByAdminResp, error)
	// 获取需要自动处理的订单
	GetAutoProcessOrder(ctx context.Context, in *GetAutoProcessOrderReq, opts ...grpc.CallOption) (*GetAutoProcessOrderResp, error)
	// 更新XXX订单统计数据
	UpdateOrderLastDaysStat(ctx context.Context, in *UpdateOrderLastDaysStatReq, opts ...grpc.CallOption) (*UpdateOrderLastDaysStatResp, error)
	// 获取最近的好评
	GetRecentGoodComment(ctx context.Context, in *GetRecentGoodCommentReq, opts ...grpc.CallOption) (*GetRecentGoodCommentResp, error)
	// 获取指定XXX的好评
	GetListenerRecentGoodComment(ctx context.Context, in *GetListenerRecentGoodCommentReq, opts ...grpc.CallOption) (*GetListenerRecentGoodCommentResp, error)
	// 获取最近一条评价
	GetLastCommentOrder(ctx context.Context, in *GetLastCommentOrderReq, opts ...grpc.CallOption) (*GetLastCommentOrderResp, error)
	// 获取最近时间段付费用户数
	GetRecentPaidUserCnt(ctx context.Context, in *GetRecentPaidUserCntReq, opts ...grpc.CallOption) (*GetRecentPaidUserCntResp, error)
	// 用户获取反馈列表
	GetChatOrderFeedbackListByUser(ctx context.Context, in *GetChatOrderFeedbackListByUserReq, opts ...grpc.CallOption) (*GetChatOrderFeedbackListByUserResp, error)
}

type orderClient struct {
	cc grpc.ClientConnInterface
}

func NewOrderClient(cc grpc.ClientConnInterface) OrderClient {
	return &orderClient{cc}
}

func (c *orderClient) EstimateOrder(ctx context.Context, in *EstimateOrderReq, opts ...grpc.CallOption) (*EstimateOrderResp, error) {
	out := new(EstimateOrderResp)
	err := c.cc.Invoke(ctx, "/pb.order/estimateOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderClient) CreateChatOrder(ctx context.Context, in *CreateChatOrderReq, opts ...grpc.CallOption) (*CreateChatOrderResp, error) {
	out := new(CreateChatOrderResp)
	err := c.cc.Invoke(ctx, "/pb.order/createChatOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderClient) GetChatOrderDetail(ctx context.Context, in *GetChatOrderDetailReq, opts ...grpc.CallOption) (*GetChatOrderDetailResp, error) {
	out := new(GetChatOrderDetailResp)
	err := c.cc.Invoke(ctx, "/pb.order/getChatOrderDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderClient) DoChatOrderAction(ctx context.Context, in *DoChatOrderActionReq, opts ...grpc.CallOption) (*DoChatOrderActionResp, error) {
	out := new(DoChatOrderActionResp)
	err := c.cc.Invoke(ctx, "/pb.order/doChatOrderAction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderClient) GetChatOrderList(ctx context.Context, in *GetChatOrderListReq, opts ...grpc.CallOption) (*GetChatOrderListResp, error) {
	out := new(GetChatOrderListResp)
	err := c.cc.Invoke(ctx, "/pb.order/getChatOrderList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderClient) GetBusinessChatPricePlan(ctx context.Context, in *GetBusinessChatPricePlanReq, opts ...grpc.CallOption) (*GetBusinessChatPricePlanResp, error) {
	out := new(GetBusinessChatPricePlanResp)
	err := c.cc.Invoke(ctx, "/pb.order/getBusinessChatPricePlan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderClient) GetChatOrderStateLog(ctx context.Context, in *GetChatOrderStateLogReq, opts ...grpc.CallOption) (*GetChatOrderStateLogResp, error) {
	out := new(GetChatOrderStateLogResp)
	err := c.cc.Invoke(ctx, "/pb.order/getChatOrderStateLog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderClient) UpdateChatOrderUse(ctx context.Context, in *UpdateChatOrderUseReq, opts ...grpc.CallOption) (*UpdateChatOrderUseResp, error) {
	out := new(UpdateChatOrderUseResp)
	err := c.cc.Invoke(ctx, "/pb.order/updateChatOrderUse", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderClient) GetExpireVoiceChatOrder(ctx context.Context, in *GetExpireVoiceChatOrderReq, opts ...grpc.CallOption) (*GetExpireVoiceChatOrderResp, error) {
	out := new(GetExpireVoiceChatOrderResp)
	err := c.cc.Invoke(ctx, "/pb.order/getExpireVoiceChatOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderClient) SettleChatOrder(ctx context.Context, in *SettleChatOrderReq, opts ...grpc.CallOption) (*SettleChatOrderResp, error) {
	out := new(SettleChatOrderResp)
	err := c.cc.Invoke(ctx, "/pb.order/settleChatOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderClient) GetListenerCommentList(ctx context.Context, in *GetListenerCommentListReq, opts ...grpc.CallOption) (*GetListenerCommentListResp, error) {
	out := new(GetListenerCommentListResp)
	err := c.cc.Invoke(ctx, "/pb.order/getListenerCommentList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderClient) ReplyOrderComment(ctx context.Context, in *ReplyOrderCommentReq, opts ...grpc.CallOption) (*ReplyOrderCommentResp, error) {
	out := new(ReplyOrderCommentResp)
	err := c.cc.Invoke(ctx, "/pb.order/replyOrderComment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderClient) FeedbackOrder(ctx context.Context, in *FeedbackOrderReq, opts ...grpc.CallOption) (*FeedbackOrderResp, error) {
	out := new(FeedbackOrderResp)
	err := c.cc.Invoke(ctx, "/pb.order/feedbackOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderClient) GetOrderListByAdmin(ctx context.Context, in *GetOrderListByAdminReq, opts ...grpc.CallOption) (*GetOrderListByAdminResp, error) {
	out := new(GetOrderListByAdminResp)
	err := c.cc.Invoke(ctx, "/pb.order/getOrderListByAdmin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderClient) GetAutoProcessOrder(ctx context.Context, in *GetAutoProcessOrderReq, opts ...grpc.CallOption) (*GetAutoProcessOrderResp, error) {
	out := new(GetAutoProcessOrderResp)
	err := c.cc.Invoke(ctx, "/pb.order/getAutoProcessOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderClient) UpdateOrderLastDaysStat(ctx context.Context, in *UpdateOrderLastDaysStatReq, opts ...grpc.CallOption) (*UpdateOrderLastDaysStatResp, error) {
	out := new(UpdateOrderLastDaysStatResp)
	err := c.cc.Invoke(ctx, "/pb.order/updateOrderLastDaysStat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderClient) GetRecentGoodComment(ctx context.Context, in *GetRecentGoodCommentReq, opts ...grpc.CallOption) (*GetRecentGoodCommentResp, error) {
	out := new(GetRecentGoodCommentResp)
	err := c.cc.Invoke(ctx, "/pb.order/getRecentGoodComment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderClient) GetListenerRecentGoodComment(ctx context.Context, in *GetListenerRecentGoodCommentReq, opts ...grpc.CallOption) (*GetListenerRecentGoodCommentResp, error) {
	out := new(GetListenerRecentGoodCommentResp)
	err := c.cc.Invoke(ctx, "/pb.order/getListenerRecentGoodComment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderClient) GetLastCommentOrder(ctx context.Context, in *GetLastCommentOrderReq, opts ...grpc.CallOption) (*GetLastCommentOrderResp, error) {
	out := new(GetLastCommentOrderResp)
	err := c.cc.Invoke(ctx, "/pb.order/getLastCommentOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderClient) GetRecentPaidUserCnt(ctx context.Context, in *GetRecentPaidUserCntReq, opts ...grpc.CallOption) (*GetRecentPaidUserCntResp, error) {
	out := new(GetRecentPaidUserCntResp)
	err := c.cc.Invoke(ctx, "/pb.order/getRecentPaidUserCnt", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderClient) GetChatOrderFeedbackListByUser(ctx context.Context, in *GetChatOrderFeedbackListByUserReq, opts ...grpc.CallOption) (*GetChatOrderFeedbackListByUserResp, error) {
	out := new(GetChatOrderFeedbackListByUserResp)
	err := c.cc.Invoke(ctx, "/pb.order/getChatOrderFeedbackListByUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrderServer is the server API for Order service.
// All implementations must embed UnimplementedOrderServer
// for forward compatibility
type OrderServer interface {
	// 获取订单费用估算
	EstimateOrder(context.Context, *EstimateOrderReq) (*EstimateOrderResp, error)
	// 咨询服务下订单
	CreateChatOrder(context.Context, *CreateChatOrderReq) (*CreateChatOrderResp, error)
	// 获取订单详情
	GetChatOrderDetail(context.Context, *GetChatOrderDetailReq) (*GetChatOrderDetailResp, error)
	// 订单操作
	DoChatOrderAction(context.Context, *DoChatOrderActionReq) (*DoChatOrderActionResp, error)
	// 订单列表
	GetChatOrderList(context.Context, *GetChatOrderListReq) (*GetChatOrderListResp, error)
	// 获取聊天服务价格配置
	GetBusinessChatPricePlan(context.Context, *GetBusinessChatPricePlanReq) (*GetBusinessChatPricePlanResp, error)
	// 获取用户订单状态变化记录
	GetChatOrderStateLog(context.Context, *GetChatOrderStateLogReq) (*GetChatOrderStateLogResp, error)
	// 更新订单的使用情况
	UpdateChatOrderUse(context.Context, *UpdateChatOrderUseReq) (*UpdateChatOrderUseResp, error)
	// 获取过期的语音订单
	GetExpireVoiceChatOrder(context.Context, *GetExpireVoiceChatOrderReq) (*GetExpireVoiceChatOrderResp, error)
	// 结算订单
	SettleChatOrder(context.Context, *SettleChatOrderReq) (*SettleChatOrderResp, error)
	// 获取XXX评价列表
	GetListenerCommentList(context.Context, *GetListenerCommentListReq) (*GetListenerCommentListResp, error)
	// XXX回复用户的订单评价
	ReplyOrderComment(context.Context, *ReplyOrderCommentReq) (*ReplyOrderCommentResp, error)
	// XXX反馈
	FeedbackOrder(context.Context, *FeedbackOrderReq) (*FeedbackOrderResp, error)
	// 管理后台获取订单列表
	GetOrderListByAdmin(context.Context, *GetOrderListByAdminReq) (*GetOrderListByAdminResp, error)
	// 获取需要自动处理的订单
	GetAutoProcessOrder(context.Context, *GetAutoProcessOrderReq) (*GetAutoProcessOrderResp, error)
	// 更新XXX订单统计数据
	UpdateOrderLastDaysStat(context.Context, *UpdateOrderLastDaysStatReq) (*UpdateOrderLastDaysStatResp, error)
	// 获取最近的好评
	GetRecentGoodComment(context.Context, *GetRecentGoodCommentReq) (*GetRecentGoodCommentResp, error)
	// 获取指定XXX的好评
	GetListenerRecentGoodComment(context.Context, *GetListenerRecentGoodCommentReq) (*GetListenerRecentGoodCommentResp, error)
	// 获取最近一条评价
	GetLastCommentOrder(context.Context, *GetLastCommentOrderReq) (*GetLastCommentOrderResp, error)
	// 获取最近时间段付费用户数
	GetRecentPaidUserCnt(context.Context, *GetRecentPaidUserCntReq) (*GetRecentPaidUserCntResp, error)
	// 用户获取反馈列表
	GetChatOrderFeedbackListByUser(context.Context, *GetChatOrderFeedbackListByUserReq) (*GetChatOrderFeedbackListByUserResp, error)
	mustEmbedUnimplementedOrderServer()
}

// UnimplementedOrderServer must be embedded to have forward compatible implementations.
type UnimplementedOrderServer struct {
}

func (UnimplementedOrderServer) EstimateOrder(context.Context, *EstimateOrderReq) (*EstimateOrderResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EstimateOrder not implemented")
}
func (UnimplementedOrderServer) CreateChatOrder(context.Context, *CreateChatOrderReq) (*CreateChatOrderResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateChatOrder not implemented")
}
func (UnimplementedOrderServer) GetChatOrderDetail(context.Context, *GetChatOrderDetailReq) (*GetChatOrderDetailResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChatOrderDetail not implemented")
}
func (UnimplementedOrderServer) DoChatOrderAction(context.Context, *DoChatOrderActionReq) (*DoChatOrderActionResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DoChatOrderAction not implemented")
}
func (UnimplementedOrderServer) GetChatOrderList(context.Context, *GetChatOrderListReq) (*GetChatOrderListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChatOrderList not implemented")
}
func (UnimplementedOrderServer) GetBusinessChatPricePlan(context.Context, *GetBusinessChatPricePlanReq) (*GetBusinessChatPricePlanResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBusinessChatPricePlan not implemented")
}
func (UnimplementedOrderServer) GetChatOrderStateLog(context.Context, *GetChatOrderStateLogReq) (*GetChatOrderStateLogResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChatOrderStateLog not implemented")
}
func (UnimplementedOrderServer) UpdateChatOrderUse(context.Context, *UpdateChatOrderUseReq) (*UpdateChatOrderUseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateChatOrderUse not implemented")
}
func (UnimplementedOrderServer) GetExpireVoiceChatOrder(context.Context, *GetExpireVoiceChatOrderReq) (*GetExpireVoiceChatOrderResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetExpireVoiceChatOrder not implemented")
}
func (UnimplementedOrderServer) SettleChatOrder(context.Context, *SettleChatOrderReq) (*SettleChatOrderResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SettleChatOrder not implemented")
}
func (UnimplementedOrderServer) GetListenerCommentList(context.Context, *GetListenerCommentListReq) (*GetListenerCommentListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetListenerCommentList not implemented")
}
func (UnimplementedOrderServer) ReplyOrderComment(context.Context, *ReplyOrderCommentReq) (*ReplyOrderCommentResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReplyOrderComment not implemented")
}
func (UnimplementedOrderServer) FeedbackOrder(context.Context, *FeedbackOrderReq) (*FeedbackOrderResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FeedbackOrder not implemented")
}
func (UnimplementedOrderServer) GetOrderListByAdmin(context.Context, *GetOrderListByAdminReq) (*GetOrderListByAdminResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrderListByAdmin not implemented")
}
func (UnimplementedOrderServer) GetAutoProcessOrder(context.Context, *GetAutoProcessOrderReq) (*GetAutoProcessOrderResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAutoProcessOrder not implemented")
}
func (UnimplementedOrderServer) UpdateOrderLastDaysStat(context.Context, *UpdateOrderLastDaysStatReq) (*UpdateOrderLastDaysStatResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOrderLastDaysStat not implemented")
}
func (UnimplementedOrderServer) GetRecentGoodComment(context.Context, *GetRecentGoodCommentReq) (*GetRecentGoodCommentResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRecentGoodComment not implemented")
}
func (UnimplementedOrderServer) GetListenerRecentGoodComment(context.Context, *GetListenerRecentGoodCommentReq) (*GetListenerRecentGoodCommentResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetListenerRecentGoodComment not implemented")
}
func (UnimplementedOrderServer) GetLastCommentOrder(context.Context, *GetLastCommentOrderReq) (*GetLastCommentOrderResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLastCommentOrder not implemented")
}
func (UnimplementedOrderServer) GetRecentPaidUserCnt(context.Context, *GetRecentPaidUserCntReq) (*GetRecentPaidUserCntResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRecentPaidUserCnt not implemented")
}
func (UnimplementedOrderServer) GetChatOrderFeedbackListByUser(context.Context, *GetChatOrderFeedbackListByUserReq) (*GetChatOrderFeedbackListByUserResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChatOrderFeedbackListByUser not implemented")
}
func (UnimplementedOrderServer) mustEmbedUnimplementedOrderServer() {}

// UnsafeOrderServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrderServer will
// result in compilation errors.
type UnsafeOrderServer interface {
	mustEmbedUnimplementedOrderServer()
}

func RegisterOrderServer(s grpc.ServiceRegistrar, srv OrderServer) {
	s.RegisterService(&Order_ServiceDesc, srv)
}

func _Order_EstimateOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EstimateOrderReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServer).EstimateOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.order/estimateOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServer).EstimateOrder(ctx, req.(*EstimateOrderReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Order_CreateChatOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateChatOrderReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServer).CreateChatOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.order/createChatOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServer).CreateChatOrder(ctx, req.(*CreateChatOrderReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Order_GetChatOrderDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChatOrderDetailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServer).GetChatOrderDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.order/getChatOrderDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServer).GetChatOrderDetail(ctx, req.(*GetChatOrderDetailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Order_DoChatOrderAction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DoChatOrderActionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServer).DoChatOrderAction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.order/doChatOrderAction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServer).DoChatOrderAction(ctx, req.(*DoChatOrderActionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Order_GetChatOrderList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChatOrderListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServer).GetChatOrderList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.order/getChatOrderList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServer).GetChatOrderList(ctx, req.(*GetChatOrderListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Order_GetBusinessChatPricePlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBusinessChatPricePlanReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServer).GetBusinessChatPricePlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.order/getBusinessChatPricePlan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServer).GetBusinessChatPricePlan(ctx, req.(*GetBusinessChatPricePlanReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Order_GetChatOrderStateLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChatOrderStateLogReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServer).GetChatOrderStateLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.order/getChatOrderStateLog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServer).GetChatOrderStateLog(ctx, req.(*GetChatOrderStateLogReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Order_UpdateChatOrderUse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateChatOrderUseReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServer).UpdateChatOrderUse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.order/updateChatOrderUse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServer).UpdateChatOrderUse(ctx, req.(*UpdateChatOrderUseReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Order_GetExpireVoiceChatOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetExpireVoiceChatOrderReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServer).GetExpireVoiceChatOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.order/getExpireVoiceChatOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServer).GetExpireVoiceChatOrder(ctx, req.(*GetExpireVoiceChatOrderReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Order_SettleChatOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SettleChatOrderReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServer).SettleChatOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.order/settleChatOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServer).SettleChatOrder(ctx, req.(*SettleChatOrderReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Order_GetListenerCommentList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetListenerCommentListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServer).GetListenerCommentList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.order/getListenerCommentList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServer).GetListenerCommentList(ctx, req.(*GetListenerCommentListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Order_ReplyOrderComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReplyOrderCommentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServer).ReplyOrderComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.order/replyOrderComment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServer).ReplyOrderComment(ctx, req.(*ReplyOrderCommentReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Order_FeedbackOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FeedbackOrderReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServer).FeedbackOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.order/feedbackOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServer).FeedbackOrder(ctx, req.(*FeedbackOrderReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Order_GetOrderListByAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrderListByAdminReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServer).GetOrderListByAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.order/getOrderListByAdmin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServer).GetOrderListByAdmin(ctx, req.(*GetOrderListByAdminReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Order_GetAutoProcessOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAutoProcessOrderReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServer).GetAutoProcessOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.order/getAutoProcessOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServer).GetAutoProcessOrder(ctx, req.(*GetAutoProcessOrderReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Order_UpdateOrderLastDaysStat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOrderLastDaysStatReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServer).UpdateOrderLastDaysStat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.order/updateOrderLastDaysStat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServer).UpdateOrderLastDaysStat(ctx, req.(*UpdateOrderLastDaysStatReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Order_GetRecentGoodComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRecentGoodCommentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServer).GetRecentGoodComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.order/getRecentGoodComment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServer).GetRecentGoodComment(ctx, req.(*GetRecentGoodCommentReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Order_GetListenerRecentGoodComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetListenerRecentGoodCommentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServer).GetListenerRecentGoodComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.order/getListenerRecentGoodComment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServer).GetListenerRecentGoodComment(ctx, req.(*GetListenerRecentGoodCommentReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Order_GetLastCommentOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLastCommentOrderReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServer).GetLastCommentOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.order/getLastCommentOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServer).GetLastCommentOrder(ctx, req.(*GetLastCommentOrderReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Order_GetRecentPaidUserCnt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRecentPaidUserCntReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServer).GetRecentPaidUserCnt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.order/getRecentPaidUserCnt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServer).GetRecentPaidUserCnt(ctx, req.(*GetRecentPaidUserCntReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Order_GetChatOrderFeedbackListByUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChatOrderFeedbackListByUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServer).GetChatOrderFeedbackListByUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.order/getChatOrderFeedbackListByUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServer).GetChatOrderFeedbackListByUser(ctx, req.(*GetChatOrderFeedbackListByUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Order_ServiceDesc is the grpc.ServiceDesc for Order service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Order_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.order",
	HandlerType: (*OrderServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "estimateOrder",
			Handler:    _Order_EstimateOrder_Handler,
		},
		{
			MethodName: "createChatOrder",
			Handler:    _Order_CreateChatOrder_Handler,
		},
		{
			MethodName: "getChatOrderDetail",
			Handler:    _Order_GetChatOrderDetail_Handler,
		},
		{
			MethodName: "doChatOrderAction",
			Handler:    _Order_DoChatOrderAction_Handler,
		},
		{
			MethodName: "getChatOrderList",
			Handler:    _Order_GetChatOrderList_Handler,
		},
		{
			MethodName: "getBusinessChatPricePlan",
			Handler:    _Order_GetBusinessChatPricePlan_Handler,
		},
		{
			MethodName: "getChatOrderStateLog",
			Handler:    _Order_GetChatOrderStateLog_Handler,
		},
		{
			MethodName: "updateChatOrderUse",
			Handler:    _Order_UpdateChatOrderUse_Handler,
		},
		{
			MethodName: "getExpireVoiceChatOrder",
			Handler:    _Order_GetExpireVoiceChatOrder_Handler,
		},
		{
			MethodName: "settleChatOrder",
			Handler:    _Order_SettleChatOrder_Handler,
		},
		{
			MethodName: "getListenerCommentList",
			Handler:    _Order_GetListenerCommentList_Handler,
		},
		{
			MethodName: "replyOrderComment",
			Handler:    _Order_ReplyOrderComment_Handler,
		},
		{
			MethodName: "feedbackOrder",
			Handler:    _Order_FeedbackOrder_Handler,
		},
		{
			MethodName: "getOrderListByAdmin",
			Handler:    _Order_GetOrderListByAdmin_Handler,
		},
		{
			MethodName: "getAutoProcessOrder",
			Handler:    _Order_GetAutoProcessOrder_Handler,
		},
		{
			MethodName: "updateOrderLastDaysStat",
			Handler:    _Order_UpdateOrderLastDaysStat_Handler,
		},
		{
			MethodName: "getRecentGoodComment",
			Handler:    _Order_GetRecentGoodComment_Handler,
		},
		{
			MethodName: "getListenerRecentGoodComment",
			Handler:    _Order_GetListenerRecentGoodComment_Handler,
		},
		{
			MethodName: "getLastCommentOrder",
			Handler:    _Order_GetLastCommentOrder_Handler,
		},
		{
			MethodName: "getRecentPaidUserCnt",
			Handler:    _Order_GetRecentPaidUserCnt_Handler,
		},
		{
			MethodName: "getChatOrderFeedbackListByUser",
			Handler:    _Order_GetChatOrderFeedbackListByUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "order.proto",
}
