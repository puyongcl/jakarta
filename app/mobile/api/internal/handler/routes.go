// Code generated by goctl. DO NOT EDIT.
package handler

import (
	"net/http"

	bbs "jakarta/app/mobile/api/internal/handler/bbs"
	chat "jakarta/app/mobile/api/internal/handler/chat"
	chatorder "jakarta/app/mobile/api/internal/handler/chatorder"
	listener "jakarta/app/mobile/api/internal/handler/listener"
	stat "jakarta/app/mobile/api/internal/handler/stat"
	user "jakarta/app/mobile/api/internal/handler/user"
	wxmp "jakarta/app/mobile/api/internal/handler/wxmp"
	"jakarta/app/mobile/api/internal/svc"

	"github.com/zeromicro/go-zero/rest"
)

func RegisterHandlers(server *rest.Server, serverCtx *svc.ServiceContext) {
	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/user/login",
				Handler: user.LoginHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/user/wxmini/auth",
				Handler: user.WxMiniAuthHandler(serverCtx),
			},
		},
		rest.WithPrefix("/mobile/v1"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/user/controlcfg",
				Handler: user.GetUserControlConfigHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/user/detail",
				Handler: user.DetailHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/user/edit",
				Handler: user.EditUserProfileHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/user/wxphonenumer/get",
				Handler: user.GetUserWxPhoneNumberHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/user/cloud/config",
				Handler: user.GetCloudConfigHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/user/area/config",
				Handler: user.GetAreaHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/user/block",
				Handler: user.BlockUserHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/user/block/list",
				Handler: user.GetUserBlockListHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/user/notify/send",
				Handler: user.SendNotifyMsgHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/user/notify/subscribe",
				Handler: user.SubscribeNotifyMsgHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/user/illegal/report",
				Handler: user.ReportUserHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/user/needhelp/report",
				Handler: user.ReportNeedHelpUserHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/user/delete",
				Handler: user.DeleteUserAccountHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/user/subscribe/query",
				Handler: user.QuerySubscribeHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/user/multinotify/subscribe",
				Handler: user.SubscribeMultiNotifyMsgHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/user/multisubscribe/query",
				Handler: user.QueryMultiSubscribeHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/user/adviser",
				Handler: user.GetSetUserAndAdviserConversationHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.JwtAuth.AccessSecret),
		rest.WithPrefix("/mobile/v1"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/chatstate/sync",
				Handler: chat.SyncListenerChatStateHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/im/sendtextmsg",
				Handler: chat.SendTextMsgHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.JwtAuth.AccessSecret),
		rest.WithPrefix("/mobile/v1"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/listener/edit",
				Handler: listener.EditListenerProfileHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/listener/checkcommit",
				Handler: listener.CommitNewListenerCheckHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/listener/userdetail",
				Handler: listener.DetailListenerHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/listener/get",
				Handler: listener.GetListenerOwnProfileHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/listener/feedback",
				Handler: listener.ListenerFeedbackUserHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/listener/remark",
				Handler: listener.ListenerRemarkUserHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/listener/remark/get",
				Handler: listener.GetListenerRemarkUserHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/listener/user/comment",
				Handler: listener.CommentListenerHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/listener/reply",
				Handler: listener.ReplyCommentHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/listener/state/change",
				Handler: listener.ChangeWorkStateHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/listener/state",
				Handler: listener.GetWorkStateHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/listener/bankcard",
				Handler: listener.SetBankCardHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/listener/bankcard/get",
				Handler: listener.GetBankCardHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/listener/cashlog",
				Handler: listener.GetCashLogHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/listener/incomelog",
				Handler: listener.GetIncomeLogHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/listener/wallet",
				Handler: listener.GetListenerWalletHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/listener/wallet/move",
				Handler: listener.ListenerMoveCashHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/listener/words",
				Handler: listener.GetListenerWordsHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/listener/words/edit",
				Handler: listener.EditListenerWordsHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/listener/home/dashboard",
				Handler: listener.GetListenerHomePageDashboardHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/listener/business/config",
				Handler: listener.GetDefineBusinessConfigHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/listener/recommend",
				Handler: listener.GetRecommendListenerListHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/listener/rating/list",
				Handler: listener.GetListenerRatingListHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/listener/rating/stat",
				Handler: listener.GetListenerRatingStatHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/listener/user/toprel",
				Handler: listener.GetUserTopRelationListenerHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.JwtAuth.AccessSecret),
		rest.WithPrefix("/mobile/v1"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/chatorder/estimate",
				Handler: chatorder.EstimateChatOrderHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/chatorder/price/current",
				Handler: chatorder.GetCurrentListenerChatPriceHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/chatorder/create",
				Handler: chatorder.CreateChatOrderHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/chatorder/userlist",
				Handler: chatorder.UserChatOrderListHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/chatorder/userdetail",
				Handler: chatorder.UserChatOrderDetailHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/chatorder/listenerlist",
				Handler: chatorder.ListenerChatOrderListHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/chatorder/listenerdetail",
				Handler: chatorder.ListenerChatOrderDetailHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/chatorder/userstatelog",
				Handler: chatorder.UserChatOrderStateLogHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/chatorder/refundlog",
				Handler: chatorder.GetChatOrderRefundLogHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/chatorder/action",
				Handler: chatorder.DoChatOrderActionHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/chatorder/priceconfig",
				Handler: chatorder.GetBusinessChatPriceHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/chatorder/recentcomment",
				Handler: chatorder.GetRecentGoodCommentHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/chatorder/user/feedback/list",
				Handler: chatorder.GetOrderFeedbackListByUserHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.JwtAuth.AccessSecret),
		rest.WithPrefix("/mobile/v1"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodGet,
				Path:    "/wxmp/preload",
				Handler: wxmp.WxMpPreloadDataHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/user/wxlogin",
				Handler: wxmp.WxLoginHandler(serverCtx),
			},
		},
		rest.WithPrefix("/mobile/v1"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/stat/newuser/selectspec/save",
				Handler: stat.SaveNewUserSelectSpecHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/stat/user/ecr/save",
				Handler: stat.SaveAdultQuizECRHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/stat/user/ecr",
				Handler: stat.GetAdultQuizECRHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.JwtAuth.AccessSecret),
		rest.WithPrefix("/mobile/v1"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/bbs/story/add",
				Handler: bbs.AddStoryHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/bbs/story/reply/add",
				Handler: bbs.AddStoryReplyHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/bbs/story/reply/like",
				Handler: bbs.AddStoryReplyLikeHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/bbs/story/reply/list",
				Handler: bbs.GetStoryReplyListHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/bbs/story/del",
				Handler: bbs.DelStoryHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/bbs/story/reply/del",
				Handler: bbs.DelStoryReplyHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/bbs/story/rec",
				Handler: bbs.RecStoryHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/bbs/story/list",
				Handler: bbs.GetStoryListByOwnHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/bbs/story/reply/mylist",
				Handler: bbs.GetStoryReplyListByOwnHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/bbs/story/get",
				Handler: bbs.GetStoryByIdHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/bbs/storyreply/get",
				Handler: bbs.GetStoryReplyByIdHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.JwtAuth.AccessSecret),
		rest.WithPrefix("/mobile/v1"),
	)
}
