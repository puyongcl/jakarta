// Code generated by goctl. DO NOT EDIT!
// Source: usercenter.proto

package usercenter

import (
	"context"

	"jakarta/app/usercenter/rpc/pb"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	AdminMarkNeedHelpUserReq             = pb.AdminMarkNeedHelpUserReq
	AdminMarkNeedHelpUserResp            = pb.AdminMarkNeedHelpUserResp
	AdminProcessReportUserReq            = pb.AdminProcessReportUserReq
	AdminProcessReportUserResp           = pb.AdminProcessReportUserResp
	BlockUserInfo                        = pb.BlockUserInfo
	BlockUserReq                         = pb.BlockUserReq
	BlockUserResp                        = pb.BlockUserResp
	DeleteUserAccountReq                 = pb.DeleteUserAccountReq
	DeleteUserAccountResp                = pb.DeleteUserAccountResp
	EditUserProfileReq                   = pb.EditUserProfileReq
	EditUserProfileResp                  = pb.EditUserProfileResp
	GenerateTokenReq                     = pb.GenerateTokenReq
	GenerateTokenResp                    = pb.GenerateTokenResp
	GetNeedHelpUserListReq               = pb.GetNeedHelpUserListReq
	GetNeedHelpUserListResp              = pb.GetNeedHelpUserListResp
	GetReportUserListReq                 = pb.GetReportUserListReq
	GetReportUserListResp                = pb.GetReportUserListResp
	GetSetUserAndAdviserConversationReq  = pb.GetSetUserAndAdviserConversationReq
	GetSetUserAndAdviserConversationResp = pb.GetSetUserAndAdviserConversationResp
	GetUserAuthByAuthKeyReq              = pb.GetUserAuthByAuthKeyReq
	GetUserAuthByAuthKeyResp             = pb.GetUserAuthByAuthKeyResp
	GetUserAuthByUserIdReq               = pb.GetUserAuthByUserIdReq
	GetUserAuthyUserIdResp               = pb.GetUserAuthyUserIdResp
	GetUserBlockListReq                  = pb.GetUserBlockListReq
	GetUserBlockListResp                 = pb.GetUserBlockListResp
	GetUserChannelCallbackReq            = pb.GetUserChannelCallbackReq
	GetUserChannelCallbackResp           = pb.GetUserChannelCallbackResp
	GetUserOnlineStateReq                = pb.GetUserOnlineStateReq
	GetUserOnlineStateResp               = pb.GetUserOnlineStateResp
	GetUserProfileReq                    = pb.GetUserProfileReq
	GetUserProfileResp                   = pb.GetUserProfileResp
	GetUserShortProfileReq               = pb.GetUserShortProfileReq
	GetUserShortProfileResp              = pb.GetUserShortProfileResp
	GetUserStatReq                       = pb.GetUserStatReq
	GetUserStatResp                      = pb.GetUserStatResp
	GetUserWxOpenIdReq                   = pb.GetUserWxOpenIdReq
	GetUserWxOpenIdResp                  = pb.GetUserWxOpenIdResp
	LoginReq                             = pb.LoginReq
	LoginResp                            = pb.LoginResp
	NeedHelpUserData                     = pb.NeedHelpUserData
	RegisterReq                          = pb.RegisterReq
	RegisterResp                         = pb.RegisterResp
	ReportNeedHelpUserReq                = pb.ReportNeedHelpUserReq
	ReportNeedHelpUserResp               = pb.ReportNeedHelpUserResp
	ReportUserData                       = pb.ReportUserData
	ReportUserReq                        = pb.ReportUserReq
	ReportUserResp                       = pb.ReportUserResp
	UpdateNoCondRefundCntReq             = pb.UpdateNoCondRefundCntReq
	UpdateNoCondRefundCntResp            = pb.UpdateNoCondRefundCntResp
	UpdateUserLoginStateReq              = pb.UpdateUserLoginStateReq
	UpdateUserLoginStateResp             = pb.UpdateUserLoginStateResp
	UpdateUserStatReq                    = pb.UpdateUserStatReq
	UpdateUserStatResp                   = pb.UpdateUserStatResp
	UpdateUserTypeReq                    = pb.UpdateUserTypeReq
	UpdateUserTypeResp                   = pb.UpdateUserTypeResp
	UpdateUserWxFwhStateReq              = pb.UpdateUserWxFwhStateReq
	UpdateUserWxFwhStateResp             = pb.UpdateUserWxFwhStateResp
	UserAuth                             = pb.UserAuth
	UserProfile                          = pb.UserProfile

	Usercenter interface {
		//  登陆
		Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginResp, error)
		//  管理后台登陆
		LoginAdmin(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginResp, error)
		//  注册用户
		Register(ctx context.Context, in *RegisterReq, opts ...grpc.CallOption) (*RegisterResp, error)
		//  获取用户资料
		GetUserInfo(ctx context.Context, in *GetUserProfileReq, opts ...grpc.CallOption) (*GetUserProfileResp, error)
		//  通过唯一识别号获取用户账户
		GetUserAuthByAuthKey(ctx context.Context, in *GetUserAuthByAuthKeyReq, opts ...grpc.CallOption) (*GetUserAuthByAuthKeyResp, error)
		//  通过用户uid获取用户账户
		GetUserAuthByUserId(ctx context.Context, in *GetUserAuthByUserIdReq, opts ...grpc.CallOption) (*GetUserAuthyUserIdResp, error)
		//  生成JWT token
		GenerateToken(ctx context.Context, in *GenerateTokenReq, opts ...grpc.CallOption) (*GenerateTokenResp, error)
		//  编辑用户资料
		EditUserProfile(ctx context.Context, in *EditUserProfileReq, opts ...grpc.CallOption) (*EditUserProfileResp, error)
		//  更新用户账户类型
		UpdateUserType(ctx context.Context, in *UpdateUserTypeReq, opts ...grpc.CallOption) (*UpdateUserTypeResp, error)
		//  更新用户登陆统计信息
		UpdateUserLoginState(ctx context.Context, in *UpdateUserLoginStateReq, opts ...grpc.CallOption) (*UpdateUserLoginStateResp, error)
		//  更新用户平台使用情况统计信息
		UpdateUserStat(ctx context.Context, in *UpdateUserStatReq, opts ...grpc.CallOption) (*UpdateUserStatResp, error)
		//  获取用户平台使用情况统计信息
		GetUserStat(ctx context.Context, in *GetUserStatReq, opts ...grpc.CallOption) (*GetUserStatResp, error)
		//  更新用户的优惠条件
		UpdateNoCondRefundCnt(ctx context.Context, in *UpdateNoCondRefundCntReq, opts ...grpc.CallOption) (*UpdateNoCondRefundCntResp, error)
		//  拉黑操作
		BlockUser(ctx context.Context, in *BlockUserReq, opts ...grpc.CallOption) (*BlockUserResp, error)
		//  获取拉黑用户列表
		GetUserBlockerList(ctx context.Context, in *GetUserBlockListReq, opts ...grpc.CallOption) (*GetUserBlockListResp, error)
		//  上报用户
		ReportUser(ctx context.Context, in *ReportUserReq, opts ...grpc.CallOption) (*ReportUserResp, error)
		//  获取上报用户列表
		GetReportUserList(ctx context.Context, in *GetReportUserListReq, opts ...grpc.CallOption) (*GetReportUserListResp, error)
		//  处理上报用户
		ProcessReportUser(ctx context.Context, in *AdminProcessReportUserReq, opts ...grpc.CallOption) (*AdminProcessReportUserResp, error)
		//  上报需要帮助的用户
		ReportNeedHelpUser(ctx context.Context, in *ReportNeedHelpUserReq, opts ...grpc.CallOption) (*ReportNeedHelpUserResp, error)
		//  获取需要帮助用户列表
		GetNeedHelpUserList(ctx context.Context, in *GetNeedHelpUserListReq, opts ...grpc.CallOption) (*GetNeedHelpUserListResp, error)
		//  管理记录需要帮助的用户处理结果
		ProcessNeedHelpUser(ctx context.Context, in *AdminMarkNeedHelpUserReq, opts ...grpc.CallOption) (*AdminMarkNeedHelpUserResp, error)
		//  更新用户服务号的关注情况
		UpdateUserWxFwhState(ctx context.Context, in *UpdateUserWxFwhStateReq, opts ...grpc.CallOption) (*UpdateUserWxFwhStateResp, error)
		//  根据uid获取用户的openid
		GetUserWxOpenId(ctx context.Context, in *GetUserWxOpenIdReq, opts ...grpc.CallOption) (*GetUserWxOpenIdResp, error)
		//  获取用户在线状态和用户类型
		GetUserOnlineState(ctx context.Context, in *GetUserOnlineStateReq, opts ...grpc.CallOption) (*GetUserOnlineStateResp, error)
		//  删除用户账户
		DeleteUserAccount(ctx context.Context, in *DeleteUserAccountReq, opts ...grpc.CallOption) (*DeleteUserAccountResp, error)
		//  获取用户渠道回调地址
		GetUserChannelCallback(ctx context.Context, in *GetUserChannelCallbackReq, opts ...grpc.CallOption) (*GetUserChannelCallbackResp, error)
		//  获取用户个人资料
		GetUserShortProfile(ctx context.Context, in *GetUserShortProfileReq, opts ...grpc.CallOption) (*GetUserShortProfileResp, error)
		//  获取和更新用户与顾问的对话
		GetSetUserAndAdviserConversation(ctx context.Context, in *GetSetUserAndAdviserConversationReq, opts ...grpc.CallOption) (*GetSetUserAndAdviserConversationResp, error)
	}

	defaultUsercenter struct {
		cli zrpc.Client
	}
)

func NewUsercenter(cli zrpc.Client) Usercenter {
	return &defaultUsercenter{
		cli: cli,
	}
}

//  登陆
func (m *defaultUsercenter) Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginResp, error) {
	client := pb.NewUsercenterClient(m.cli.Conn())
	return client.Login(ctx, in, opts...)
}

//  管理后台登陆
func (m *defaultUsercenter) LoginAdmin(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginResp, error) {
	client := pb.NewUsercenterClient(m.cli.Conn())
	return client.LoginAdmin(ctx, in, opts...)
}

//  注册用户
func (m *defaultUsercenter) Register(ctx context.Context, in *RegisterReq, opts ...grpc.CallOption) (*RegisterResp, error) {
	client := pb.NewUsercenterClient(m.cli.Conn())
	return client.Register(ctx, in, opts...)
}

//  获取用户资料
func (m *defaultUsercenter) GetUserInfo(ctx context.Context, in *GetUserProfileReq, opts ...grpc.CallOption) (*GetUserProfileResp, error) {
	client := pb.NewUsercenterClient(m.cli.Conn())
	return client.GetUserInfo(ctx, in, opts...)
}

//  通过唯一识别号获取用户账户
func (m *defaultUsercenter) GetUserAuthByAuthKey(ctx context.Context, in *GetUserAuthByAuthKeyReq, opts ...grpc.CallOption) (*GetUserAuthByAuthKeyResp, error) {
	client := pb.NewUsercenterClient(m.cli.Conn())
	return client.GetUserAuthByAuthKey(ctx, in, opts...)
}

//  通过用户uid获取用户账户
func (m *defaultUsercenter) GetUserAuthByUserId(ctx context.Context, in *GetUserAuthByUserIdReq, opts ...grpc.CallOption) (*GetUserAuthyUserIdResp, error) {
	client := pb.NewUsercenterClient(m.cli.Conn())
	return client.GetUserAuthByUserId(ctx, in, opts...)
}

//  生成JWT token
func (m *defaultUsercenter) GenerateToken(ctx context.Context, in *GenerateTokenReq, opts ...grpc.CallOption) (*GenerateTokenResp, error) {
	client := pb.NewUsercenterClient(m.cli.Conn())
	return client.GenerateToken(ctx, in, opts...)
}

//  编辑用户资料
func (m *defaultUsercenter) EditUserProfile(ctx context.Context, in *EditUserProfileReq, opts ...grpc.CallOption) (*EditUserProfileResp, error) {
	client := pb.NewUsercenterClient(m.cli.Conn())
	return client.EditUserProfile(ctx, in, opts...)
}

//  更新用户账户类型
func (m *defaultUsercenter) UpdateUserType(ctx context.Context, in *UpdateUserTypeReq, opts ...grpc.CallOption) (*UpdateUserTypeResp, error) {
	client := pb.NewUsercenterClient(m.cli.Conn())
	return client.UpdateUserType(ctx, in, opts...)
}

//  更新用户登陆统计信息
func (m *defaultUsercenter) UpdateUserLoginState(ctx context.Context, in *UpdateUserLoginStateReq, opts ...grpc.CallOption) (*UpdateUserLoginStateResp, error) {
	client := pb.NewUsercenterClient(m.cli.Conn())
	return client.UpdateUserLoginState(ctx, in, opts...)
}

//  更新用户平台使用情况统计信息
func (m *defaultUsercenter) UpdateUserStat(ctx context.Context, in *UpdateUserStatReq, opts ...grpc.CallOption) (*UpdateUserStatResp, error) {
	client := pb.NewUsercenterClient(m.cli.Conn())
	return client.UpdateUserStat(ctx, in, opts...)
}

//  获取用户平台使用情况统计信息
func (m *defaultUsercenter) GetUserStat(ctx context.Context, in *GetUserStatReq, opts ...grpc.CallOption) (*GetUserStatResp, error) {
	client := pb.NewUsercenterClient(m.cli.Conn())
	return client.GetUserStat(ctx, in, opts...)
}

//  更新用户的优惠条件
func (m *defaultUsercenter) UpdateNoCondRefundCnt(ctx context.Context, in *UpdateNoCondRefundCntReq, opts ...grpc.CallOption) (*UpdateNoCondRefundCntResp, error) {
	client := pb.NewUsercenterClient(m.cli.Conn())
	return client.UpdateNoCondRefundCnt(ctx, in, opts...)
}

//  拉黑操作
func (m *defaultUsercenter) BlockUser(ctx context.Context, in *BlockUserReq, opts ...grpc.CallOption) (*BlockUserResp, error) {
	client := pb.NewUsercenterClient(m.cli.Conn())
	return client.BlockUser(ctx, in, opts...)
}

//  获取拉黑用户列表
func (m *defaultUsercenter) GetUserBlockerList(ctx context.Context, in *GetUserBlockListReq, opts ...grpc.CallOption) (*GetUserBlockListResp, error) {
	client := pb.NewUsercenterClient(m.cli.Conn())
	return client.GetUserBlockerList(ctx, in, opts...)
}

//  上报用户
func (m *defaultUsercenter) ReportUser(ctx context.Context, in *ReportUserReq, opts ...grpc.CallOption) (*ReportUserResp, error) {
	client := pb.NewUsercenterClient(m.cli.Conn())
	return client.ReportUser(ctx, in, opts...)
}

//  获取上报用户列表
func (m *defaultUsercenter) GetReportUserList(ctx context.Context, in *GetReportUserListReq, opts ...grpc.CallOption) (*GetReportUserListResp, error) {
	client := pb.NewUsercenterClient(m.cli.Conn())
	return client.GetReportUserList(ctx, in, opts...)
}

//  处理上报用户
func (m *defaultUsercenter) ProcessReportUser(ctx context.Context, in *AdminProcessReportUserReq, opts ...grpc.CallOption) (*AdminProcessReportUserResp, error) {
	client := pb.NewUsercenterClient(m.cli.Conn())
	return client.ProcessReportUser(ctx, in, opts...)
}

//  上报需要帮助的用户
func (m *defaultUsercenter) ReportNeedHelpUser(ctx context.Context, in *ReportNeedHelpUserReq, opts ...grpc.CallOption) (*ReportNeedHelpUserResp, error) {
	client := pb.NewUsercenterClient(m.cli.Conn())
	return client.ReportNeedHelpUser(ctx, in, opts...)
}

//  获取需要帮助用户列表
func (m *defaultUsercenter) GetNeedHelpUserList(ctx context.Context, in *GetNeedHelpUserListReq, opts ...grpc.CallOption) (*GetNeedHelpUserListResp, error) {
	client := pb.NewUsercenterClient(m.cli.Conn())
	return client.GetNeedHelpUserList(ctx, in, opts...)
}

//  管理记录需要帮助的用户处理结果
func (m *defaultUsercenter) ProcessNeedHelpUser(ctx context.Context, in *AdminMarkNeedHelpUserReq, opts ...grpc.CallOption) (*AdminMarkNeedHelpUserResp, error) {
	client := pb.NewUsercenterClient(m.cli.Conn())
	return client.ProcessNeedHelpUser(ctx, in, opts...)
}

//  更新用户服务号的关注情况
func (m *defaultUsercenter) UpdateUserWxFwhState(ctx context.Context, in *UpdateUserWxFwhStateReq, opts ...grpc.CallOption) (*UpdateUserWxFwhStateResp, error) {
	client := pb.NewUsercenterClient(m.cli.Conn())
	return client.UpdateUserWxFwhState(ctx, in, opts...)
}

//  根据uid获取用户的openid
func (m *defaultUsercenter) GetUserWxOpenId(ctx context.Context, in *GetUserWxOpenIdReq, opts ...grpc.CallOption) (*GetUserWxOpenIdResp, error) {
	client := pb.NewUsercenterClient(m.cli.Conn())
	return client.GetUserWxOpenId(ctx, in, opts...)
}

//  获取用户在线状态和用户类型
func (m *defaultUsercenter) GetUserOnlineState(ctx context.Context, in *GetUserOnlineStateReq, opts ...grpc.CallOption) (*GetUserOnlineStateResp, error) {
	client := pb.NewUsercenterClient(m.cli.Conn())
	return client.GetUserOnlineState(ctx, in, opts...)
}

//  删除用户账户
func (m *defaultUsercenter) DeleteUserAccount(ctx context.Context, in *DeleteUserAccountReq, opts ...grpc.CallOption) (*DeleteUserAccountResp, error) {
	client := pb.NewUsercenterClient(m.cli.Conn())
	return client.DeleteUserAccount(ctx, in, opts...)
}

//  获取用户渠道回调地址
func (m *defaultUsercenter) GetUserChannelCallback(ctx context.Context, in *GetUserChannelCallbackReq, opts ...grpc.CallOption) (*GetUserChannelCallbackResp, error) {
	client := pb.NewUsercenterClient(m.cli.Conn())
	return client.GetUserChannelCallback(ctx, in, opts...)
}

//  获取用户个人资料
func (m *defaultUsercenter) GetUserShortProfile(ctx context.Context, in *GetUserShortProfileReq, opts ...grpc.CallOption) (*GetUserShortProfileResp, error) {
	client := pb.NewUsercenterClient(m.cli.Conn())
	return client.GetUserShortProfile(ctx, in, opts...)
}

//  获取和更新用户与顾问的对话
func (m *defaultUsercenter) GetSetUserAndAdviserConversation(ctx context.Context, in *GetSetUserAndAdviserConversationReq, opts ...grpc.CallOption) (*GetSetUserAndAdviserConversationResp, error) {
	client := pb.NewUsercenterClient(m.cli.Conn())
	return client.GetSetUserAndAdviserConversation(ctx, in, opts...)
}
