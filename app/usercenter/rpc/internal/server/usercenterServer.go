// Code generated by goctl. DO NOT EDIT!
// Source: usercenter.proto

package server

import (
	"context"

	"jakarta/app/usercenter/rpc/internal/logic"
	"jakarta/app/usercenter/rpc/internal/svc"
	"jakarta/app/usercenter/rpc/pb"
)

type UsercenterServer struct {
	svcCtx *svc.ServiceContext
	pb.UnimplementedUsercenterServer
}

func NewUsercenterServer(svcCtx *svc.ServiceContext) *UsercenterServer {
	return &UsercenterServer{
		svcCtx: svcCtx,
	}
}

//  登陆
func (s *UsercenterServer) Login(ctx context.Context, in *pb.LoginReq) (*pb.LoginResp, error) {
	l := logic.NewLoginLogic(ctx, s.svcCtx)
	return l.Login(in)
}

//  管理后台登陆
func (s *UsercenterServer) LoginAdmin(ctx context.Context, in *pb.LoginReq) (*pb.LoginResp, error) {
	l := logic.NewLoginAdminLogic(ctx, s.svcCtx)
	return l.LoginAdmin(in)
}

//  注册用户
func (s *UsercenterServer) Register(ctx context.Context, in *pb.RegisterReq) (*pb.RegisterResp, error) {
	l := logic.NewRegisterLogic(ctx, s.svcCtx)
	return l.Register(in)
}

//  获取用户资料
func (s *UsercenterServer) GetUserInfo(ctx context.Context, in *pb.GetUserProfileReq) (*pb.GetUserProfileResp, error) {
	l := logic.NewGetUserInfoLogic(ctx, s.svcCtx)
	return l.GetUserInfo(in)
}

//  通过唯一识别号获取用户账户
func (s *UsercenterServer) GetUserAuthByAuthKey(ctx context.Context, in *pb.GetUserAuthByAuthKeyReq) (*pb.GetUserAuthByAuthKeyResp, error) {
	l := logic.NewGetUserAuthByAuthKeyLogic(ctx, s.svcCtx)
	return l.GetUserAuthByAuthKey(in)
}

//  通过用户uid获取用户账户
func (s *UsercenterServer) GetUserAuthByUserId(ctx context.Context, in *pb.GetUserAuthByUserIdReq) (*pb.GetUserAuthyUserIdResp, error) {
	l := logic.NewGetUserAuthByUserIdLogic(ctx, s.svcCtx)
	return l.GetUserAuthByUserId(in)
}

//  生成JWT token
func (s *UsercenterServer) GenerateToken(ctx context.Context, in *pb.GenerateTokenReq) (*pb.GenerateTokenResp, error) {
	l := logic.NewGenerateTokenLogic(ctx, s.svcCtx)
	return l.GenerateToken(in)
}

//  编辑用户资料
func (s *UsercenterServer) EditUserProfile(ctx context.Context, in *pb.EditUserProfileReq) (*pb.EditUserProfileResp, error) {
	l := logic.NewEditUserProfileLogic(ctx, s.svcCtx)
	return l.EditUserProfile(in)
}

//  更新用户账户类型
func (s *UsercenterServer) UpdateUserType(ctx context.Context, in *pb.UpdateUserTypeReq) (*pb.UpdateUserTypeResp, error) {
	l := logic.NewUpdateUserTypeLogic(ctx, s.svcCtx)
	return l.UpdateUserType(in)
}

//  更新用户登陆统计信息
func (s *UsercenterServer) UpdateUserLoginState(ctx context.Context, in *pb.UpdateUserLoginStateReq) (*pb.UpdateUserLoginStateResp, error) {
	l := logic.NewUpdateUserLoginStateLogic(ctx, s.svcCtx)
	return l.UpdateUserLoginState(in)
}

//  更新用户平台使用情况统计信息
func (s *UsercenterServer) UpdateUserStat(ctx context.Context, in *pb.UpdateUserStatReq) (*pb.UpdateUserStatResp, error) {
	l := logic.NewUpdateUserStatLogic(ctx, s.svcCtx)
	return l.UpdateUserStat(in)
}

//  获取用户平台使用情况统计信息
func (s *UsercenterServer) GetUserStat(ctx context.Context, in *pb.GetUserStatReq) (*pb.GetUserStatResp, error) {
	l := logic.NewGetUserStatLogic(ctx, s.svcCtx)
	return l.GetUserStat(in)
}

//  更新用户的优惠条件
func (s *UsercenterServer) UpdateNoCondRefundCnt(ctx context.Context, in *pb.UpdateNoCondRefundCntReq) (*pb.UpdateNoCondRefundCntResp, error) {
	l := logic.NewUpdateNoCondRefundCntLogic(ctx, s.svcCtx)
	return l.UpdateNoCondRefundCnt(in)
}

//  拉黑操作
func (s *UsercenterServer) BlockUser(ctx context.Context, in *pb.BlockUserReq) (*pb.BlockUserResp, error) {
	l := logic.NewBlockUserLogic(ctx, s.svcCtx)
	return l.BlockUser(in)
}

//  获取拉黑用户列表
func (s *UsercenterServer) GetUserBlockerList(ctx context.Context, in *pb.GetUserBlockListReq) (*pb.GetUserBlockListResp, error) {
	l := logic.NewGetUserBlockerListLogic(ctx, s.svcCtx)
	return l.GetUserBlockerList(in)
}

//  上报用户
func (s *UsercenterServer) ReportUser(ctx context.Context, in *pb.ReportUserReq) (*pb.ReportUserResp, error) {
	l := logic.NewReportUserLogic(ctx, s.svcCtx)
	return l.ReportUser(in)
}

//  获取上报用户列表
func (s *UsercenterServer) GetReportUserList(ctx context.Context, in *pb.GetReportUserListReq) (*pb.GetReportUserListResp, error) {
	l := logic.NewGetReportUserListLogic(ctx, s.svcCtx)
	return l.GetReportUserList(in)
}

//  处理上报用户
func (s *UsercenterServer) ProcessReportUser(ctx context.Context, in *pb.AdminProcessReportUserReq) (*pb.AdminProcessReportUserResp, error) {
	l := logic.NewProcessReportUserLogic(ctx, s.svcCtx)
	return l.ProcessReportUser(in)
}

//  上报需要帮助的用户
func (s *UsercenterServer) ReportNeedHelpUser(ctx context.Context, in *pb.ReportNeedHelpUserReq) (*pb.ReportNeedHelpUserResp, error) {
	l := logic.NewReportNeedHelpUserLogic(ctx, s.svcCtx)
	return l.ReportNeedHelpUser(in)
}

//  获取需要帮助用户列表
func (s *UsercenterServer) GetNeedHelpUserList(ctx context.Context, in *pb.GetNeedHelpUserListReq) (*pb.GetNeedHelpUserListResp, error) {
	l := logic.NewGetNeedHelpUserListLogic(ctx, s.svcCtx)
	return l.GetNeedHelpUserList(in)
}

//  管理记录需要帮助的用户处理结果
func (s *UsercenterServer) ProcessNeedHelpUser(ctx context.Context, in *pb.AdminMarkNeedHelpUserReq) (*pb.AdminMarkNeedHelpUserResp, error) {
	l := logic.NewProcessNeedHelpUserLogic(ctx, s.svcCtx)
	return l.ProcessNeedHelpUser(in)
}

//  更新用户服务号的关注情况
func (s *UsercenterServer) UpdateUserWxFwhState(ctx context.Context, in *pb.UpdateUserWxFwhStateReq) (*pb.UpdateUserWxFwhStateResp, error) {
	l := logic.NewUpdateUserWxFwhStateLogic(ctx, s.svcCtx)
	return l.UpdateUserWxFwhState(in)
}

//  根据uid获取用户的openid
func (s *UsercenterServer) GetUserWxOpenId(ctx context.Context, in *pb.GetUserWxOpenIdReq) (*pb.GetUserWxOpenIdResp, error) {
	l := logic.NewGetUserWxOpenIdLogic(ctx, s.svcCtx)
	return l.GetUserWxOpenId(in)
}

//  获取用户在线状态和用户类型
func (s *UsercenterServer) GetUserOnlineState(ctx context.Context, in *pb.GetUserOnlineStateReq) (*pb.GetUserOnlineStateResp, error) {
	l := logic.NewGetUserOnlineStateLogic(ctx, s.svcCtx)
	return l.GetUserOnlineState(in)
}

//  删除用户账户
func (s *UsercenterServer) DeleteUserAccount(ctx context.Context, in *pb.DeleteUserAccountReq) (*pb.DeleteUserAccountResp, error) {
	l := logic.NewDeleteUserAccountLogic(ctx, s.svcCtx)
	return l.DeleteUserAccount(in)
}

//  获取用户渠道回调地址
func (s *UsercenterServer) GetUserChannelCallback(ctx context.Context, in *pb.GetUserChannelCallbackReq) (*pb.GetUserChannelCallbackResp, error) {
	l := logic.NewGetUserChannelCallbackLogic(ctx, s.svcCtx)
	return l.GetUserChannelCallback(in)
}

//  获取用户个人资料
func (s *UsercenterServer) GetUserShortProfile(ctx context.Context, in *pb.GetUserShortProfileReq) (*pb.GetUserShortProfileResp, error) {
	l := logic.NewGetUserShortProfileLogic(ctx, s.svcCtx)
	return l.GetUserShortProfile(in)
}

//  获取和更新用户与顾问的对话
func (s *UsercenterServer) GetSetUserAndAdviserConversation(ctx context.Context, in *pb.GetSetUserAndAdviserConversationReq) (*pb.GetSetUserAndAdviserConversationResp, error) {
	l := logic.NewGetSetUserAndAdviserConversationLogic(ctx, s.svcCtx)
	return l.GetSetUserAndAdviserConversation(in)
}
