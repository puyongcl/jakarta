// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: usercenter.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UsercenterClient is the client API for Usercenter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UsercenterClient interface {
	// 登陆
	Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginResp, error)
	// 管理后台登陆
	LoginAdmin(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginResp, error)
	// 注册用户
	Register(ctx context.Context, in *RegisterReq, opts ...grpc.CallOption) (*RegisterResp, error)
	// 获取用户资料
	GetUserInfo(ctx context.Context, in *GetUserProfileReq, opts ...grpc.CallOption) (*GetUserProfileResp, error)
	// 通过唯一识别号获取用户账户
	GetUserAuthByAuthKey(ctx context.Context, in *GetUserAuthByAuthKeyReq, opts ...grpc.CallOption) (*GetUserAuthByAuthKeyResp, error)
	// 通过用户uid获取用户账户
	GetUserAuthByUserId(ctx context.Context, in *GetUserAuthByUserIdReq, opts ...grpc.CallOption) (*GetUserAuthyUserIdResp, error)
	// 生成JWT token
	GenerateToken(ctx context.Context, in *GenerateTokenReq, opts ...grpc.CallOption) (*GenerateTokenResp, error)
	// 编辑用户资料
	EditUserProfile(ctx context.Context, in *EditUserProfileReq, opts ...grpc.CallOption) (*EditUserProfileResp, error)
	// 更新用户账户类型
	UpdateUserType(ctx context.Context, in *UpdateUserTypeReq, opts ...grpc.CallOption) (*UpdateUserTypeResp, error)
	// 更新用户登陆统计信息
	UpdateUserLoginState(ctx context.Context, in *UpdateUserLoginStateReq, opts ...grpc.CallOption) (*UpdateUserLoginStateResp, error)
	// 更新用户平台使用情况统计信息
	UpdateUserStat(ctx context.Context, in *UpdateUserStatReq, opts ...grpc.CallOption) (*UpdateUserStatResp, error)
	// 获取用户平台使用情况统计信息
	GetUserStat(ctx context.Context, in *GetUserStatReq, opts ...grpc.CallOption) (*GetUserStatResp, error)
	// 更新用户的优惠条件
	UpdateNoCondRefundCnt(ctx context.Context, in *UpdateNoCondRefundCntReq, opts ...grpc.CallOption) (*UpdateNoCondRefundCntResp, error)
	// 拉黑操作
	BlockUser(ctx context.Context, in *BlockUserReq, opts ...grpc.CallOption) (*BlockUserResp, error)
	// 获取拉黑用户列表
	GetUserBlockerList(ctx context.Context, in *GetUserBlockListReq, opts ...grpc.CallOption) (*GetUserBlockListResp, error)
	// 上报用户
	ReportUser(ctx context.Context, in *ReportUserReq, opts ...grpc.CallOption) (*ReportUserResp, error)
	// 获取上报用户列表
	GetReportUserList(ctx context.Context, in *GetReportUserListReq, opts ...grpc.CallOption) (*GetReportUserListResp, error)
	// 处理上报用户
	ProcessReportUser(ctx context.Context, in *AdminProcessReportUserReq, opts ...grpc.CallOption) (*AdminProcessReportUserResp, error)
	// 上报需要帮助的用户
	ReportNeedHelpUser(ctx context.Context, in *ReportNeedHelpUserReq, opts ...grpc.CallOption) (*ReportNeedHelpUserResp, error)
	// 获取需要帮助用户列表
	GetNeedHelpUserList(ctx context.Context, in *GetNeedHelpUserListReq, opts ...grpc.CallOption) (*GetNeedHelpUserListResp, error)
	// 管理记录需要帮助的用户处理结果
	ProcessNeedHelpUser(ctx context.Context, in *AdminMarkNeedHelpUserReq, opts ...grpc.CallOption) (*AdminMarkNeedHelpUserResp, error)
	// 更新用户服务号的关注情况
	UpdateUserWxFwhState(ctx context.Context, in *UpdateUserWxFwhStateReq, opts ...grpc.CallOption) (*UpdateUserWxFwhStateResp, error)
	// 根据uid获取用户的openid
	GetUserWxOpenId(ctx context.Context, in *GetUserWxOpenIdReq, opts ...grpc.CallOption) (*GetUserWxOpenIdResp, error)
	// 获取用户在线状态和用户类型
	GetUserOnlineState(ctx context.Context, in *GetUserOnlineStateReq, opts ...grpc.CallOption) (*GetUserOnlineStateResp, error)
	// 删除用户账户
	DeleteUserAccount(ctx context.Context, in *DeleteUserAccountReq, opts ...grpc.CallOption) (*DeleteUserAccountResp, error)
	// 获取用户渠道回调地址
	GetUserChannelCallback(ctx context.Context, in *GetUserChannelCallbackReq, opts ...grpc.CallOption) (*GetUserChannelCallbackResp, error)
	// 获取用户个人资料
	GetUserShortProfile(ctx context.Context, in *GetUserShortProfileReq, opts ...grpc.CallOption) (*GetUserShortProfileResp, error)
	// 获取和更新用户与顾问的对话
	GetSetUserAndAdviserConversation(ctx context.Context, in *GetSetUserAndAdviserConversationReq, opts ...grpc.CallOption) (*GetSetUserAndAdviserConversationResp, error)
}

type usercenterClient struct {
	cc grpc.ClientConnInterface
}

func NewUsercenterClient(cc grpc.ClientConnInterface) UsercenterClient {
	return &usercenterClient{cc}
}

func (c *usercenterClient) Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginResp, error) {
	out := new(LoginResp)
	err := c.cc.Invoke(ctx, "/pb.usercenter/login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usercenterClient) LoginAdmin(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginResp, error) {
	out := new(LoginResp)
	err := c.cc.Invoke(ctx, "/pb.usercenter/loginAdmin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usercenterClient) Register(ctx context.Context, in *RegisterReq, opts ...grpc.CallOption) (*RegisterResp, error) {
	out := new(RegisterResp)
	err := c.cc.Invoke(ctx, "/pb.usercenter/register", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usercenterClient) GetUserInfo(ctx context.Context, in *GetUserProfileReq, opts ...grpc.CallOption) (*GetUserProfileResp, error) {
	out := new(GetUserProfileResp)
	err := c.cc.Invoke(ctx, "/pb.usercenter/getUserInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usercenterClient) GetUserAuthByAuthKey(ctx context.Context, in *GetUserAuthByAuthKeyReq, opts ...grpc.CallOption) (*GetUserAuthByAuthKeyResp, error) {
	out := new(GetUserAuthByAuthKeyResp)
	err := c.cc.Invoke(ctx, "/pb.usercenter/getUserAuthByAuthKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usercenterClient) GetUserAuthByUserId(ctx context.Context, in *GetUserAuthByUserIdReq, opts ...grpc.CallOption) (*GetUserAuthyUserIdResp, error) {
	out := new(GetUserAuthyUserIdResp)
	err := c.cc.Invoke(ctx, "/pb.usercenter/getUserAuthByUserId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usercenterClient) GenerateToken(ctx context.Context, in *GenerateTokenReq, opts ...grpc.CallOption) (*GenerateTokenResp, error) {
	out := new(GenerateTokenResp)
	err := c.cc.Invoke(ctx, "/pb.usercenter/generateToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usercenterClient) EditUserProfile(ctx context.Context, in *EditUserProfileReq, opts ...grpc.CallOption) (*EditUserProfileResp, error) {
	out := new(EditUserProfileResp)
	err := c.cc.Invoke(ctx, "/pb.usercenter/editUserProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usercenterClient) UpdateUserType(ctx context.Context, in *UpdateUserTypeReq, opts ...grpc.CallOption) (*UpdateUserTypeResp, error) {
	out := new(UpdateUserTypeResp)
	err := c.cc.Invoke(ctx, "/pb.usercenter/updateUserType", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usercenterClient) UpdateUserLoginState(ctx context.Context, in *UpdateUserLoginStateReq, opts ...grpc.CallOption) (*UpdateUserLoginStateResp, error) {
	out := new(UpdateUserLoginStateResp)
	err := c.cc.Invoke(ctx, "/pb.usercenter/updateUserLoginState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usercenterClient) UpdateUserStat(ctx context.Context, in *UpdateUserStatReq, opts ...grpc.CallOption) (*UpdateUserStatResp, error) {
	out := new(UpdateUserStatResp)
	err := c.cc.Invoke(ctx, "/pb.usercenter/updateUserStat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usercenterClient) GetUserStat(ctx context.Context, in *GetUserStatReq, opts ...grpc.CallOption) (*GetUserStatResp, error) {
	out := new(GetUserStatResp)
	err := c.cc.Invoke(ctx, "/pb.usercenter/getUserStat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usercenterClient) UpdateNoCondRefundCnt(ctx context.Context, in *UpdateNoCondRefundCntReq, opts ...grpc.CallOption) (*UpdateNoCondRefundCntResp, error) {
	out := new(UpdateNoCondRefundCntResp)
	err := c.cc.Invoke(ctx, "/pb.usercenter/updateNoCondRefundCnt", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usercenterClient) BlockUser(ctx context.Context, in *BlockUserReq, opts ...grpc.CallOption) (*BlockUserResp, error) {
	out := new(BlockUserResp)
	err := c.cc.Invoke(ctx, "/pb.usercenter/blockUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usercenterClient) GetUserBlockerList(ctx context.Context, in *GetUserBlockListReq, opts ...grpc.CallOption) (*GetUserBlockListResp, error) {
	out := new(GetUserBlockListResp)
	err := c.cc.Invoke(ctx, "/pb.usercenter/getUserBlockerList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usercenterClient) ReportUser(ctx context.Context, in *ReportUserReq, opts ...grpc.CallOption) (*ReportUserResp, error) {
	out := new(ReportUserResp)
	err := c.cc.Invoke(ctx, "/pb.usercenter/reportUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usercenterClient) GetReportUserList(ctx context.Context, in *GetReportUserListReq, opts ...grpc.CallOption) (*GetReportUserListResp, error) {
	out := new(GetReportUserListResp)
	err := c.cc.Invoke(ctx, "/pb.usercenter/getReportUserList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usercenterClient) ProcessReportUser(ctx context.Context, in *AdminProcessReportUserReq, opts ...grpc.CallOption) (*AdminProcessReportUserResp, error) {
	out := new(AdminProcessReportUserResp)
	err := c.cc.Invoke(ctx, "/pb.usercenter/processReportUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usercenterClient) ReportNeedHelpUser(ctx context.Context, in *ReportNeedHelpUserReq, opts ...grpc.CallOption) (*ReportNeedHelpUserResp, error) {
	out := new(ReportNeedHelpUserResp)
	err := c.cc.Invoke(ctx, "/pb.usercenter/reportNeedHelpUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usercenterClient) GetNeedHelpUserList(ctx context.Context, in *GetNeedHelpUserListReq, opts ...grpc.CallOption) (*GetNeedHelpUserListResp, error) {
	out := new(GetNeedHelpUserListResp)
	err := c.cc.Invoke(ctx, "/pb.usercenter/getNeedHelpUserList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usercenterClient) ProcessNeedHelpUser(ctx context.Context, in *AdminMarkNeedHelpUserReq, opts ...grpc.CallOption) (*AdminMarkNeedHelpUserResp, error) {
	out := new(AdminMarkNeedHelpUserResp)
	err := c.cc.Invoke(ctx, "/pb.usercenter/processNeedHelpUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usercenterClient) UpdateUserWxFwhState(ctx context.Context, in *UpdateUserWxFwhStateReq, opts ...grpc.CallOption) (*UpdateUserWxFwhStateResp, error) {
	out := new(UpdateUserWxFwhStateResp)
	err := c.cc.Invoke(ctx, "/pb.usercenter/updateUserWxFwhState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usercenterClient) GetUserWxOpenId(ctx context.Context, in *GetUserWxOpenIdReq, opts ...grpc.CallOption) (*GetUserWxOpenIdResp, error) {
	out := new(GetUserWxOpenIdResp)
	err := c.cc.Invoke(ctx, "/pb.usercenter/getUserWxOpenId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usercenterClient) GetUserOnlineState(ctx context.Context, in *GetUserOnlineStateReq, opts ...grpc.CallOption) (*GetUserOnlineStateResp, error) {
	out := new(GetUserOnlineStateResp)
	err := c.cc.Invoke(ctx, "/pb.usercenter/getUserOnlineState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usercenterClient) DeleteUserAccount(ctx context.Context, in *DeleteUserAccountReq, opts ...grpc.CallOption) (*DeleteUserAccountResp, error) {
	out := new(DeleteUserAccountResp)
	err := c.cc.Invoke(ctx, "/pb.usercenter/deleteUserAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usercenterClient) GetUserChannelCallback(ctx context.Context, in *GetUserChannelCallbackReq, opts ...grpc.CallOption) (*GetUserChannelCallbackResp, error) {
	out := new(GetUserChannelCallbackResp)
	err := c.cc.Invoke(ctx, "/pb.usercenter/getUserChannelCallback", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usercenterClient) GetUserShortProfile(ctx context.Context, in *GetUserShortProfileReq, opts ...grpc.CallOption) (*GetUserShortProfileResp, error) {
	out := new(GetUserShortProfileResp)
	err := c.cc.Invoke(ctx, "/pb.usercenter/getUserShortProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usercenterClient) GetSetUserAndAdviserConversation(ctx context.Context, in *GetSetUserAndAdviserConversationReq, opts ...grpc.CallOption) (*GetSetUserAndAdviserConversationResp, error) {
	out := new(GetSetUserAndAdviserConversationResp)
	err := c.cc.Invoke(ctx, "/pb.usercenter/getSetUserAndAdviserConversation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UsercenterServer is the server API for Usercenter service.
// All implementations must embed UnimplementedUsercenterServer
// for forward compatibility
type UsercenterServer interface {
	// 登陆
	Login(context.Context, *LoginReq) (*LoginResp, error)
	// 管理后台登陆
	LoginAdmin(context.Context, *LoginReq) (*LoginResp, error)
	// 注册用户
	Register(context.Context, *RegisterReq) (*RegisterResp, error)
	// 获取用户资料
	GetUserInfo(context.Context, *GetUserProfileReq) (*GetUserProfileResp, error)
	// 通过唯一识别号获取用户账户
	GetUserAuthByAuthKey(context.Context, *GetUserAuthByAuthKeyReq) (*GetUserAuthByAuthKeyResp, error)
	// 通过用户uid获取用户账户
	GetUserAuthByUserId(context.Context, *GetUserAuthByUserIdReq) (*GetUserAuthyUserIdResp, error)
	// 生成JWT token
	GenerateToken(context.Context, *GenerateTokenReq) (*GenerateTokenResp, error)
	// 编辑用户资料
	EditUserProfile(context.Context, *EditUserProfileReq) (*EditUserProfileResp, error)
	// 更新用户账户类型
	UpdateUserType(context.Context, *UpdateUserTypeReq) (*UpdateUserTypeResp, error)
	// 更新用户登陆统计信息
	UpdateUserLoginState(context.Context, *UpdateUserLoginStateReq) (*UpdateUserLoginStateResp, error)
	// 更新用户平台使用情况统计信息
	UpdateUserStat(context.Context, *UpdateUserStatReq) (*UpdateUserStatResp, error)
	// 获取用户平台使用情况统计信息
	GetUserStat(context.Context, *GetUserStatReq) (*GetUserStatResp, error)
	// 更新用户的优惠条件
	UpdateNoCondRefundCnt(context.Context, *UpdateNoCondRefundCntReq) (*UpdateNoCondRefundCntResp, error)
	// 拉黑操作
	BlockUser(context.Context, *BlockUserReq) (*BlockUserResp, error)
	// 获取拉黑用户列表
	GetUserBlockerList(context.Context, *GetUserBlockListReq) (*GetUserBlockListResp, error)
	// 上报用户
	ReportUser(context.Context, *ReportUserReq) (*ReportUserResp, error)
	// 获取上报用户列表
	GetReportUserList(context.Context, *GetReportUserListReq) (*GetReportUserListResp, error)
	// 处理上报用户
	ProcessReportUser(context.Context, *AdminProcessReportUserReq) (*AdminProcessReportUserResp, error)
	// 上报需要帮助的用户
	ReportNeedHelpUser(context.Context, *ReportNeedHelpUserReq) (*ReportNeedHelpUserResp, error)
	// 获取需要帮助用户列表
	GetNeedHelpUserList(context.Context, *GetNeedHelpUserListReq) (*GetNeedHelpUserListResp, error)
	// 管理记录需要帮助的用户处理结果
	ProcessNeedHelpUser(context.Context, *AdminMarkNeedHelpUserReq) (*AdminMarkNeedHelpUserResp, error)
	// 更新用户服务号的关注情况
	UpdateUserWxFwhState(context.Context, *UpdateUserWxFwhStateReq) (*UpdateUserWxFwhStateResp, error)
	// 根据uid获取用户的openid
	GetUserWxOpenId(context.Context, *GetUserWxOpenIdReq) (*GetUserWxOpenIdResp, error)
	// 获取用户在线状态和用户类型
	GetUserOnlineState(context.Context, *GetUserOnlineStateReq) (*GetUserOnlineStateResp, error)
	// 删除用户账户
	DeleteUserAccount(context.Context, *DeleteUserAccountReq) (*DeleteUserAccountResp, error)
	// 获取用户渠道回调地址
	GetUserChannelCallback(context.Context, *GetUserChannelCallbackReq) (*GetUserChannelCallbackResp, error)
	// 获取用户个人资料
	GetUserShortProfile(context.Context, *GetUserShortProfileReq) (*GetUserShortProfileResp, error)
	// 获取和更新用户与顾问的对话
	GetSetUserAndAdviserConversation(context.Context, *GetSetUserAndAdviserConversationReq) (*GetSetUserAndAdviserConversationResp, error)
	mustEmbedUnimplementedUsercenterServer()
}

// UnimplementedUsercenterServer must be embedded to have forward compatible implementations.
type UnimplementedUsercenterServer struct {
}

func (UnimplementedUsercenterServer) Login(context.Context, *LoginReq) (*LoginResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedUsercenterServer) LoginAdmin(context.Context, *LoginReq) (*LoginResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoginAdmin not implemented")
}
func (UnimplementedUsercenterServer) Register(context.Context, *RegisterReq) (*RegisterResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedUsercenterServer) GetUserInfo(context.Context, *GetUserProfileReq) (*GetUserProfileResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserInfo not implemented")
}
func (UnimplementedUsercenterServer) GetUserAuthByAuthKey(context.Context, *GetUserAuthByAuthKeyReq) (*GetUserAuthByAuthKeyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserAuthByAuthKey not implemented")
}
func (UnimplementedUsercenterServer) GetUserAuthByUserId(context.Context, *GetUserAuthByUserIdReq) (*GetUserAuthyUserIdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserAuthByUserId not implemented")
}
func (UnimplementedUsercenterServer) GenerateToken(context.Context, *GenerateTokenReq) (*GenerateTokenResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateToken not implemented")
}
func (UnimplementedUsercenterServer) EditUserProfile(context.Context, *EditUserProfileReq) (*EditUserProfileResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditUserProfile not implemented")
}
func (UnimplementedUsercenterServer) UpdateUserType(context.Context, *UpdateUserTypeReq) (*UpdateUserTypeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserType not implemented")
}
func (UnimplementedUsercenterServer) UpdateUserLoginState(context.Context, *UpdateUserLoginStateReq) (*UpdateUserLoginStateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserLoginState not implemented")
}
func (UnimplementedUsercenterServer) UpdateUserStat(context.Context, *UpdateUserStatReq) (*UpdateUserStatResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserStat not implemented")
}
func (UnimplementedUsercenterServer) GetUserStat(context.Context, *GetUserStatReq) (*GetUserStatResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserStat not implemented")
}
func (UnimplementedUsercenterServer) UpdateNoCondRefundCnt(context.Context, *UpdateNoCondRefundCntReq) (*UpdateNoCondRefundCntResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNoCondRefundCnt not implemented")
}
func (UnimplementedUsercenterServer) BlockUser(context.Context, *BlockUserReq) (*BlockUserResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BlockUser not implemented")
}
func (UnimplementedUsercenterServer) GetUserBlockerList(context.Context, *GetUserBlockListReq) (*GetUserBlockListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserBlockerList not implemented")
}
func (UnimplementedUsercenterServer) ReportUser(context.Context, *ReportUserReq) (*ReportUserResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportUser not implemented")
}
func (UnimplementedUsercenterServer) GetReportUserList(context.Context, *GetReportUserListReq) (*GetReportUserListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReportUserList not implemented")
}
func (UnimplementedUsercenterServer) ProcessReportUser(context.Context, *AdminProcessReportUserReq) (*AdminProcessReportUserResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessReportUser not implemented")
}
func (UnimplementedUsercenterServer) ReportNeedHelpUser(context.Context, *ReportNeedHelpUserReq) (*ReportNeedHelpUserResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportNeedHelpUser not implemented")
}
func (UnimplementedUsercenterServer) GetNeedHelpUserList(context.Context, *GetNeedHelpUserListReq) (*GetNeedHelpUserListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNeedHelpUserList not implemented")
}
func (UnimplementedUsercenterServer) ProcessNeedHelpUser(context.Context, *AdminMarkNeedHelpUserReq) (*AdminMarkNeedHelpUserResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessNeedHelpUser not implemented")
}
func (UnimplementedUsercenterServer) UpdateUserWxFwhState(context.Context, *UpdateUserWxFwhStateReq) (*UpdateUserWxFwhStateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserWxFwhState not implemented")
}
func (UnimplementedUsercenterServer) GetUserWxOpenId(context.Context, *GetUserWxOpenIdReq) (*GetUserWxOpenIdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserWxOpenId not implemented")
}
func (UnimplementedUsercenterServer) GetUserOnlineState(context.Context, *GetUserOnlineStateReq) (*GetUserOnlineStateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserOnlineState not implemented")
}
func (UnimplementedUsercenterServer) DeleteUserAccount(context.Context, *DeleteUserAccountReq) (*DeleteUserAccountResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUserAccount not implemented")
}
func (UnimplementedUsercenterServer) GetUserChannelCallback(context.Context, *GetUserChannelCallbackReq) (*GetUserChannelCallbackResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserChannelCallback not implemented")
}
func (UnimplementedUsercenterServer) GetUserShortProfile(context.Context, *GetUserShortProfileReq) (*GetUserShortProfileResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserShortProfile not implemented")
}
func (UnimplementedUsercenterServer) GetSetUserAndAdviserConversation(context.Context, *GetSetUserAndAdviserConversationReq) (*GetSetUserAndAdviserConversationResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSetUserAndAdviserConversation not implemented")
}
func (UnimplementedUsercenterServer) mustEmbedUnimplementedUsercenterServer() {}

// UnsafeUsercenterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UsercenterServer will
// result in compilation errors.
type UnsafeUsercenterServer interface {
	mustEmbedUnimplementedUsercenterServer()
}

func RegisterUsercenterServer(s grpc.ServiceRegistrar, srv UsercenterServer) {
	s.RegisterService(&Usercenter_ServiceDesc, srv)
}

func _Usercenter_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsercenterServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.usercenter/login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsercenterServer).Login(ctx, req.(*LoginReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Usercenter_LoginAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsercenterServer).LoginAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.usercenter/loginAdmin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsercenterServer).LoginAdmin(ctx, req.(*LoginReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Usercenter_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsercenterServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.usercenter/register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsercenterServer).Register(ctx, req.(*RegisterReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Usercenter_GetUserInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserProfileReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsercenterServer).GetUserInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.usercenter/getUserInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsercenterServer).GetUserInfo(ctx, req.(*GetUserProfileReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Usercenter_GetUserAuthByAuthKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserAuthByAuthKeyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsercenterServer).GetUserAuthByAuthKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.usercenter/getUserAuthByAuthKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsercenterServer).GetUserAuthByAuthKey(ctx, req.(*GetUserAuthByAuthKeyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Usercenter_GetUserAuthByUserId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserAuthByUserIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsercenterServer).GetUserAuthByUserId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.usercenter/getUserAuthByUserId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsercenterServer).GetUserAuthByUserId(ctx, req.(*GetUserAuthByUserIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Usercenter_GenerateToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateTokenReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsercenterServer).GenerateToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.usercenter/generateToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsercenterServer).GenerateToken(ctx, req.(*GenerateTokenReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Usercenter_EditUserProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EditUserProfileReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsercenterServer).EditUserProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.usercenter/editUserProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsercenterServer).EditUserProfile(ctx, req.(*EditUserProfileReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Usercenter_UpdateUserType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserTypeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsercenterServer).UpdateUserType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.usercenter/updateUserType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsercenterServer).UpdateUserType(ctx, req.(*UpdateUserTypeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Usercenter_UpdateUserLoginState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserLoginStateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsercenterServer).UpdateUserLoginState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.usercenter/updateUserLoginState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsercenterServer).UpdateUserLoginState(ctx, req.(*UpdateUserLoginStateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Usercenter_UpdateUserStat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserStatReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsercenterServer).UpdateUserStat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.usercenter/updateUserStat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsercenterServer).UpdateUserStat(ctx, req.(*UpdateUserStatReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Usercenter_GetUserStat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserStatReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsercenterServer).GetUserStat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.usercenter/getUserStat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsercenterServer).GetUserStat(ctx, req.(*GetUserStatReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Usercenter_UpdateNoCondRefundCnt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateNoCondRefundCntReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsercenterServer).UpdateNoCondRefundCnt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.usercenter/updateNoCondRefundCnt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsercenterServer).UpdateNoCondRefundCnt(ctx, req.(*UpdateNoCondRefundCntReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Usercenter_BlockUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlockUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsercenterServer).BlockUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.usercenter/blockUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsercenterServer).BlockUser(ctx, req.(*BlockUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Usercenter_GetUserBlockerList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserBlockListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsercenterServer).GetUserBlockerList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.usercenter/getUserBlockerList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsercenterServer).GetUserBlockerList(ctx, req.(*GetUserBlockListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Usercenter_ReportUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReportUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsercenterServer).ReportUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.usercenter/reportUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsercenterServer).ReportUser(ctx, req.(*ReportUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Usercenter_GetReportUserList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReportUserListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsercenterServer).GetReportUserList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.usercenter/getReportUserList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsercenterServer).GetReportUserList(ctx, req.(*GetReportUserListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Usercenter_ProcessReportUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminProcessReportUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsercenterServer).ProcessReportUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.usercenter/processReportUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsercenterServer).ProcessReportUser(ctx, req.(*AdminProcessReportUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Usercenter_ReportNeedHelpUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReportNeedHelpUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsercenterServer).ReportNeedHelpUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.usercenter/reportNeedHelpUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsercenterServer).ReportNeedHelpUser(ctx, req.(*ReportNeedHelpUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Usercenter_GetNeedHelpUserList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNeedHelpUserListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsercenterServer).GetNeedHelpUserList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.usercenter/getNeedHelpUserList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsercenterServer).GetNeedHelpUserList(ctx, req.(*GetNeedHelpUserListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Usercenter_ProcessNeedHelpUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminMarkNeedHelpUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsercenterServer).ProcessNeedHelpUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.usercenter/processNeedHelpUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsercenterServer).ProcessNeedHelpUser(ctx, req.(*AdminMarkNeedHelpUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Usercenter_UpdateUserWxFwhState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserWxFwhStateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsercenterServer).UpdateUserWxFwhState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.usercenter/updateUserWxFwhState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsercenterServer).UpdateUserWxFwhState(ctx, req.(*UpdateUserWxFwhStateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Usercenter_GetUserWxOpenId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserWxOpenIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsercenterServer).GetUserWxOpenId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.usercenter/getUserWxOpenId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsercenterServer).GetUserWxOpenId(ctx, req.(*GetUserWxOpenIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Usercenter_GetUserOnlineState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserOnlineStateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsercenterServer).GetUserOnlineState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.usercenter/getUserOnlineState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsercenterServer).GetUserOnlineState(ctx, req.(*GetUserOnlineStateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Usercenter_DeleteUserAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserAccountReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsercenterServer).DeleteUserAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.usercenter/deleteUserAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsercenterServer).DeleteUserAccount(ctx, req.(*DeleteUserAccountReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Usercenter_GetUserChannelCallback_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserChannelCallbackReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsercenterServer).GetUserChannelCallback(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.usercenter/getUserChannelCallback",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsercenterServer).GetUserChannelCallback(ctx, req.(*GetUserChannelCallbackReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Usercenter_GetUserShortProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserShortProfileReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsercenterServer).GetUserShortProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.usercenter/getUserShortProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsercenterServer).GetUserShortProfile(ctx, req.(*GetUserShortProfileReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Usercenter_GetSetUserAndAdviserConversation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSetUserAndAdviserConversationReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsercenterServer).GetSetUserAndAdviserConversation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.usercenter/getSetUserAndAdviserConversation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsercenterServer).GetSetUserAndAdviserConversation(ctx, req.(*GetSetUserAndAdviserConversationReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Usercenter_ServiceDesc is the grpc.ServiceDesc for Usercenter service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Usercenter_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.usercenter",
	HandlerType: (*UsercenterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "login",
			Handler:    _Usercenter_Login_Handler,
		},
		{
			MethodName: "loginAdmin",
			Handler:    _Usercenter_LoginAdmin_Handler,
		},
		{
			MethodName: "register",
			Handler:    _Usercenter_Register_Handler,
		},
		{
			MethodName: "getUserInfo",
			Handler:    _Usercenter_GetUserInfo_Handler,
		},
		{
			MethodName: "getUserAuthByAuthKey",
			Handler:    _Usercenter_GetUserAuthByAuthKey_Handler,
		},
		{
			MethodName: "getUserAuthByUserId",
			Handler:    _Usercenter_GetUserAuthByUserId_Handler,
		},
		{
			MethodName: "generateToken",
			Handler:    _Usercenter_GenerateToken_Handler,
		},
		{
			MethodName: "editUserProfile",
			Handler:    _Usercenter_EditUserProfile_Handler,
		},
		{
			MethodName: "updateUserType",
			Handler:    _Usercenter_UpdateUserType_Handler,
		},
		{
			MethodName: "updateUserLoginState",
			Handler:    _Usercenter_UpdateUserLoginState_Handler,
		},
		{
			MethodName: "updateUserStat",
			Handler:    _Usercenter_UpdateUserStat_Handler,
		},
		{
			MethodName: "getUserStat",
			Handler:    _Usercenter_GetUserStat_Handler,
		},
		{
			MethodName: "updateNoCondRefundCnt",
			Handler:    _Usercenter_UpdateNoCondRefundCnt_Handler,
		},
		{
			MethodName: "blockUser",
			Handler:    _Usercenter_BlockUser_Handler,
		},
		{
			MethodName: "getUserBlockerList",
			Handler:    _Usercenter_GetUserBlockerList_Handler,
		},
		{
			MethodName: "reportUser",
			Handler:    _Usercenter_ReportUser_Handler,
		},
		{
			MethodName: "getReportUserList",
			Handler:    _Usercenter_GetReportUserList_Handler,
		},
		{
			MethodName: "processReportUser",
			Handler:    _Usercenter_ProcessReportUser_Handler,
		},
		{
			MethodName: "reportNeedHelpUser",
			Handler:    _Usercenter_ReportNeedHelpUser_Handler,
		},
		{
			MethodName: "getNeedHelpUserList",
			Handler:    _Usercenter_GetNeedHelpUserList_Handler,
		},
		{
			MethodName: "processNeedHelpUser",
			Handler:    _Usercenter_ProcessNeedHelpUser_Handler,
		},
		{
			MethodName: "updateUserWxFwhState",
			Handler:    _Usercenter_UpdateUserWxFwhState_Handler,
		},
		{
			MethodName: "getUserWxOpenId",
			Handler:    _Usercenter_GetUserWxOpenId_Handler,
		},
		{
			MethodName: "getUserOnlineState",
			Handler:    _Usercenter_GetUserOnlineState_Handler,
		},
		{
			MethodName: "deleteUserAccount",
			Handler:    _Usercenter_DeleteUserAccount_Handler,
		},
		{
			MethodName: "getUserChannelCallback",
			Handler:    _Usercenter_GetUserChannelCallback_Handler,
		},
		{
			MethodName: "getUserShortProfile",
			Handler:    _Usercenter_GetUserShortProfile_Handler,
		},
		{
			MethodName: "getSetUserAndAdviserConversation",
			Handler:    _Usercenter_GetSetUserAndAdviserConversation_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "usercenter.proto",
}
