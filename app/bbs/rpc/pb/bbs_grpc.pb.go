// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: bbs.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BbsClient is the client API for Bbs service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BbsClient interface {
	// 发布
	AddStory(ctx context.Context, in *AddStoryReq, opts ...grpc.CallOption) (*AddStoryResp, error)
	// 获取XX回复列表
	GetStoryReplyListByUser(ctx context.Context, in *GetStoryReplyListByUserReq, opts ...grpc.CallOption) (*GetStoryReplyListByUserResp, error)
	// 回复
	AddStoryReply(ctx context.Context, in *AddStoryReplyReq, opts ...grpc.CallOption) (*AddStoryReplyResp, error)
	// 点赞
	AddLikeStoryReply(ctx context.Context, in *AddLikeStoryReplyReq, opts ...grpc.CallOption) (*AddLikeStoryReplyResp, error)
	// 删除发布
	DelStory(ctx context.Context, in *DelStoryReq, opts ...grpc.CallOption) (*DelStoryResp, error)
	// 删除回复
	DelStoryReply(ctx context.Context, in *DelStoryReplyReq, opts ...grpc.CallOption) (*DelStoryReplyResp, error)
	// 推荐
	GetRecStoryListByUser(ctx context.Context, in *GetRecStoryListByUserReq, opts ...grpc.CallOption) (*GetRecStoryListByUserResp, error)
	// 获取个人所有XX
	GetStoryListByOwn(ctx context.Context, in *GetStoryListByOwnReq, opts ...grpc.CallOption) (*GetStoryListByOwnResp, error)
	// 获取个人所有回复
	GetStoryReplyListByOwn(ctx context.Context, in *GetStoryReplyListByOwnReq, opts ...grpc.CallOption) (*GetStoryReplyListByOwnResp, error)
	// 获取发布的XX（根据id）
	GetStoryById(ctx context.Context, in *GetStoryByIdReq, opts ...grpc.CallOption) (*GetStoryByIdResp, error)
	// 获取XX的回复（根据id）
	GetStoryReplyById(ctx context.Context, in *GetStoryReplyByIdReq, opts ...grpc.CallOption) (*GetStoryReplyByIdResp, error)
}

type bbsClient struct {
	cc grpc.ClientConnInterface
}

func NewBbsClient(cc grpc.ClientConnInterface) BbsClient {
	return &bbsClient{cc}
}

func (c *bbsClient) AddStory(ctx context.Context, in *AddStoryReq, opts ...grpc.CallOption) (*AddStoryResp, error) {
	out := new(AddStoryResp)
	err := c.cc.Invoke(ctx, "/pb.bbs/addStory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bbsClient) GetStoryReplyListByUser(ctx context.Context, in *GetStoryReplyListByUserReq, opts ...grpc.CallOption) (*GetStoryReplyListByUserResp, error) {
	out := new(GetStoryReplyListByUserResp)
	err := c.cc.Invoke(ctx, "/pb.bbs/getStoryReplyListByUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bbsClient) AddStoryReply(ctx context.Context, in *AddStoryReplyReq, opts ...grpc.CallOption) (*AddStoryReplyResp, error) {
	out := new(AddStoryReplyResp)
	err := c.cc.Invoke(ctx, "/pb.bbs/addStoryReply", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bbsClient) AddLikeStoryReply(ctx context.Context, in *AddLikeStoryReplyReq, opts ...grpc.CallOption) (*AddLikeStoryReplyResp, error) {
	out := new(AddLikeStoryReplyResp)
	err := c.cc.Invoke(ctx, "/pb.bbs/addLikeStoryReply", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bbsClient) DelStory(ctx context.Context, in *DelStoryReq, opts ...grpc.CallOption) (*DelStoryResp, error) {
	out := new(DelStoryResp)
	err := c.cc.Invoke(ctx, "/pb.bbs/delStory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bbsClient) DelStoryReply(ctx context.Context, in *DelStoryReplyReq, opts ...grpc.CallOption) (*DelStoryReplyResp, error) {
	out := new(DelStoryReplyResp)
	err := c.cc.Invoke(ctx, "/pb.bbs/delStoryReply", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bbsClient) GetRecStoryListByUser(ctx context.Context, in *GetRecStoryListByUserReq, opts ...grpc.CallOption) (*GetRecStoryListByUserResp, error) {
	out := new(GetRecStoryListByUserResp)
	err := c.cc.Invoke(ctx, "/pb.bbs/getRecStoryListByUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bbsClient) GetStoryListByOwn(ctx context.Context, in *GetStoryListByOwnReq, opts ...grpc.CallOption) (*GetStoryListByOwnResp, error) {
	out := new(GetStoryListByOwnResp)
	err := c.cc.Invoke(ctx, "/pb.bbs/getStoryListByOwn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bbsClient) GetStoryReplyListByOwn(ctx context.Context, in *GetStoryReplyListByOwnReq, opts ...grpc.CallOption) (*GetStoryReplyListByOwnResp, error) {
	out := new(GetStoryReplyListByOwnResp)
	err := c.cc.Invoke(ctx, "/pb.bbs/getStoryReplyListByOwn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bbsClient) GetStoryById(ctx context.Context, in *GetStoryByIdReq, opts ...grpc.CallOption) (*GetStoryByIdResp, error) {
	out := new(GetStoryByIdResp)
	err := c.cc.Invoke(ctx, "/pb.bbs/getStoryById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bbsClient) GetStoryReplyById(ctx context.Context, in *GetStoryReplyByIdReq, opts ...grpc.CallOption) (*GetStoryReplyByIdResp, error) {
	out := new(GetStoryReplyByIdResp)
	err := c.cc.Invoke(ctx, "/pb.bbs/getStoryReplyById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BbsServer is the server API for Bbs service.
// All implementations must embed UnimplementedBbsServer
// for forward compatibility
type BbsServer interface {
	// 发布
	AddStory(context.Context, *AddStoryReq) (*AddStoryResp, error)
	// 获取XX回复列表
	GetStoryReplyListByUser(context.Context, *GetStoryReplyListByUserReq) (*GetStoryReplyListByUserResp, error)
	// 回复
	AddStoryReply(context.Context, *AddStoryReplyReq) (*AddStoryReplyResp, error)
	// 点赞
	AddLikeStoryReply(context.Context, *AddLikeStoryReplyReq) (*AddLikeStoryReplyResp, error)
	// 删除发布
	DelStory(context.Context, *DelStoryReq) (*DelStoryResp, error)
	// 删除回复
	DelStoryReply(context.Context, *DelStoryReplyReq) (*DelStoryReplyResp, error)
	// 推荐
	GetRecStoryListByUser(context.Context, *GetRecStoryListByUserReq) (*GetRecStoryListByUserResp, error)
	// 获取个人所有XX
	GetStoryListByOwn(context.Context, *GetStoryListByOwnReq) (*GetStoryListByOwnResp, error)
	// 获取个人所有回复
	GetStoryReplyListByOwn(context.Context, *GetStoryReplyListByOwnReq) (*GetStoryReplyListByOwnResp, error)
	// 获取发布的XX（根据id）
	GetStoryById(context.Context, *GetStoryByIdReq) (*GetStoryByIdResp, error)
	// 获取XX的回复（根据id）
	GetStoryReplyById(context.Context, *GetStoryReplyByIdReq) (*GetStoryReplyByIdResp, error)
	mustEmbedUnimplementedBbsServer()
}

// UnimplementedBbsServer must be embedded to have forward compatible implementations.
type UnimplementedBbsServer struct {
}

func (UnimplementedBbsServer) AddStory(context.Context, *AddStoryReq) (*AddStoryResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddStory not implemented")
}
func (UnimplementedBbsServer) GetStoryReplyListByUser(context.Context, *GetStoryReplyListByUserReq) (*GetStoryReplyListByUserResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStoryReplyListByUser not implemented")
}
func (UnimplementedBbsServer) AddStoryReply(context.Context, *AddStoryReplyReq) (*AddStoryReplyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddStoryReply not implemented")
}
func (UnimplementedBbsServer) AddLikeStoryReply(context.Context, *AddLikeStoryReplyReq) (*AddLikeStoryReplyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddLikeStoryReply not implemented")
}
func (UnimplementedBbsServer) DelStory(context.Context, *DelStoryReq) (*DelStoryResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelStory not implemented")
}
func (UnimplementedBbsServer) DelStoryReply(context.Context, *DelStoryReplyReq) (*DelStoryReplyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelStoryReply not implemented")
}
func (UnimplementedBbsServer) GetRecStoryListByUser(context.Context, *GetRecStoryListByUserReq) (*GetRecStoryListByUserResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRecStoryListByUser not implemented")
}
func (UnimplementedBbsServer) GetStoryListByOwn(context.Context, *GetStoryListByOwnReq) (*GetStoryListByOwnResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStoryListByOwn not implemented")
}
func (UnimplementedBbsServer) GetStoryReplyListByOwn(context.Context, *GetStoryReplyListByOwnReq) (*GetStoryReplyListByOwnResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStoryReplyListByOwn not implemented")
}
func (UnimplementedBbsServer) GetStoryById(context.Context, *GetStoryByIdReq) (*GetStoryByIdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStoryById not implemented")
}
func (UnimplementedBbsServer) GetStoryReplyById(context.Context, *GetStoryReplyByIdReq) (*GetStoryReplyByIdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStoryReplyById not implemented")
}
func (UnimplementedBbsServer) mustEmbedUnimplementedBbsServer() {}

// UnsafeBbsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BbsServer will
// result in compilation errors.
type UnsafeBbsServer interface {
	mustEmbedUnimplementedBbsServer()
}

func RegisterBbsServer(s grpc.ServiceRegistrar, srv BbsServer) {
	s.RegisterService(&Bbs_ServiceDesc, srv)
}

func _Bbs_AddStory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddStoryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BbsServer).AddStory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.bbs/addStory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BbsServer).AddStory(ctx, req.(*AddStoryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bbs_GetStoryReplyListByUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStoryReplyListByUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BbsServer).GetStoryReplyListByUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.bbs/getStoryReplyListByUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BbsServer).GetStoryReplyListByUser(ctx, req.(*GetStoryReplyListByUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bbs_AddStoryReply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddStoryReplyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BbsServer).AddStoryReply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.bbs/addStoryReply",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BbsServer).AddStoryReply(ctx, req.(*AddStoryReplyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bbs_AddLikeStoryReply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddLikeStoryReplyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BbsServer).AddLikeStoryReply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.bbs/addLikeStoryReply",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BbsServer).AddLikeStoryReply(ctx, req.(*AddLikeStoryReplyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bbs_DelStory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelStoryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BbsServer).DelStory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.bbs/delStory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BbsServer).DelStory(ctx, req.(*DelStoryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bbs_DelStoryReply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelStoryReplyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BbsServer).DelStoryReply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.bbs/delStoryReply",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BbsServer).DelStoryReply(ctx, req.(*DelStoryReplyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bbs_GetRecStoryListByUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRecStoryListByUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BbsServer).GetRecStoryListByUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.bbs/getRecStoryListByUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BbsServer).GetRecStoryListByUser(ctx, req.(*GetRecStoryListByUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bbs_GetStoryListByOwn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStoryListByOwnReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BbsServer).GetStoryListByOwn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.bbs/getStoryListByOwn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BbsServer).GetStoryListByOwn(ctx, req.(*GetStoryListByOwnReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bbs_GetStoryReplyListByOwn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStoryReplyListByOwnReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BbsServer).GetStoryReplyListByOwn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.bbs/getStoryReplyListByOwn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BbsServer).GetStoryReplyListByOwn(ctx, req.(*GetStoryReplyListByOwnReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bbs_GetStoryById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStoryByIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BbsServer).GetStoryById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.bbs/getStoryById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BbsServer).GetStoryById(ctx, req.(*GetStoryByIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bbs_GetStoryReplyById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStoryReplyByIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BbsServer).GetStoryReplyById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.bbs/getStoryReplyById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BbsServer).GetStoryReplyById(ctx, req.(*GetStoryReplyByIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Bbs_ServiceDesc is the grpc.ServiceDesc for Bbs service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Bbs_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.bbs",
	HandlerType: (*BbsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "addStory",
			Handler:    _Bbs_AddStory_Handler,
		},
		{
			MethodName: "getStoryReplyListByUser",
			Handler:    _Bbs_GetStoryReplyListByUser_Handler,
		},
		{
			MethodName: "addStoryReply",
			Handler:    _Bbs_AddStoryReply_Handler,
		},
		{
			MethodName: "addLikeStoryReply",
			Handler:    _Bbs_AddLikeStoryReply_Handler,
		},
		{
			MethodName: "delStory",
			Handler:    _Bbs_DelStory_Handler,
		},
		{
			MethodName: "delStoryReply",
			Handler:    _Bbs_DelStoryReply_Handler,
		},
		{
			MethodName: "getRecStoryListByUser",
			Handler:    _Bbs_GetRecStoryListByUser_Handler,
		},
		{
			MethodName: "getStoryListByOwn",
			Handler:    _Bbs_GetStoryListByOwn_Handler,
		},
		{
			MethodName: "getStoryReplyListByOwn",
			Handler:    _Bbs_GetStoryReplyListByOwn_Handler,
		},
		{
			MethodName: "getStoryById",
			Handler:    _Bbs_GetStoryById_Handler,
		},
		{
			MethodName: "getStoryReplyById",
			Handler:    _Bbs_GetStoryReplyById_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bbs.proto",
}
