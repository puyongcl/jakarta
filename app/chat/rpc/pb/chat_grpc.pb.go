// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: chat.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ChatClient is the client API for Chat service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChatClient interface {
	// 同步聊天状态过程
	SyncChatState(ctx context.Context, in *SyncChatStateReq, opts ...grpc.CallOption) (*SyncChatStateResp, error)
	// 更新用户聊天可用时间
	UpdateUserChatBalance(ctx context.Context, in *UpdateUserChatBalanceReq, opts ...grpc.CallOption) (*UpdateUserChatBalanceResp, error)
	// 结算当前通话记录
	UpdateVoiceChatStat(ctx context.Context, in *UpdateVoiceChatStatReq, opts ...grpc.CallOption) (*UpdateVoiceChatStatResp, error)
	// 获取时间快结束的语音通话
	GetUseOutVoiceChat(ctx context.Context, in *GetUseOutVoiceChatReq, opts ...grpc.CallOption) (*GetUseOutVoiceChatResp, error)
	// 获取时间快结束的文字通话
	GetUseOutTextChat(ctx context.Context, in *GetUseOutTextChatReq, opts ...grpc.CallOption) (*GetUseOutTextChatResp, error)
	// 重置免费聊天次数
	ResetFreeTextChatCnt(ctx context.Context, in *ResetFreeTextChatCntReq, opts ...grpc.CallOption) (*ResetFreeTextChatCntResp, error)
	// 更新统计进入XXX聊天页面用户数
	UpdateTodayEnterChatUserCnt(ctx context.Context, in *UpdateTodayEnterChatUserCntReq, opts ...grpc.CallOption) (*UpdateTodayEnterChatUserCntResp, error)
	// 更新统计近几天进入XXX页面用户数
	UpdateLastDaysEnterChatUserCnt(ctx context.Context, in *UpdateLastDaysEnterChatUserCntReq, opts ...grpc.CallOption) (*UpdateLastDaysEnterChatUserCntResp, error)
	// 更新文字聊天时间用完
	UpdateTextChatOver(ctx context.Context, in *UpdateTextChatOverReq, opts ...grpc.CallOption) (*UpdateTextChatOverResp, error)
	// 初始化XXX通话状态
	CreateListenerVoiceChatState(ctx context.Context, in *CreateListenerVoiceChatStateReq, opts ...grpc.CallOption) (*CreateListenerVoiceChatStateResp, error)
	// 用户和XXX交互事件
	SendUserListenerRelationEvent(ctx context.Context, in *SendUserListenerRelationEventReq, opts ...grpc.CallOption) (*SendUserListenerRelationEventResp, error)
	// 获取交互最频繁的几位XXX
	GetTopUserAndListenerRelation(ctx context.Context, in *GetTopUserAndListenerRelationReq, opts ...grpc.CallOption) (*GetTopUserAndListenerRelationResp, error)
}

type chatClient struct {
	cc grpc.ClientConnInterface
}

func NewChatClient(cc grpc.ClientConnInterface) ChatClient {
	return &chatClient{cc}
}

func (c *chatClient) SyncChatState(ctx context.Context, in *SyncChatStateReq, opts ...grpc.CallOption) (*SyncChatStateResp, error) {
	out := new(SyncChatStateResp)
	err := c.cc.Invoke(ctx, "/pb.chat/syncChatState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatClient) UpdateUserChatBalance(ctx context.Context, in *UpdateUserChatBalanceReq, opts ...grpc.CallOption) (*UpdateUserChatBalanceResp, error) {
	out := new(UpdateUserChatBalanceResp)
	err := c.cc.Invoke(ctx, "/pb.chat/updateUserChatBalance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatClient) UpdateVoiceChatStat(ctx context.Context, in *UpdateVoiceChatStatReq, opts ...grpc.CallOption) (*UpdateVoiceChatStatResp, error) {
	out := new(UpdateVoiceChatStatResp)
	err := c.cc.Invoke(ctx, "/pb.chat/updateVoiceChatStat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatClient) GetUseOutVoiceChat(ctx context.Context, in *GetUseOutVoiceChatReq, opts ...grpc.CallOption) (*GetUseOutVoiceChatResp, error) {
	out := new(GetUseOutVoiceChatResp)
	err := c.cc.Invoke(ctx, "/pb.chat/getUseOutVoiceChat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatClient) GetUseOutTextChat(ctx context.Context, in *GetUseOutTextChatReq, opts ...grpc.CallOption) (*GetUseOutTextChatResp, error) {
	out := new(GetUseOutTextChatResp)
	err := c.cc.Invoke(ctx, "/pb.chat/getUseOutTextChat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatClient) ResetFreeTextChatCnt(ctx context.Context, in *ResetFreeTextChatCntReq, opts ...grpc.CallOption) (*ResetFreeTextChatCntResp, error) {
	out := new(ResetFreeTextChatCntResp)
	err := c.cc.Invoke(ctx, "/pb.chat/resetFreeTextChatCnt", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatClient) UpdateTodayEnterChatUserCnt(ctx context.Context, in *UpdateTodayEnterChatUserCntReq, opts ...grpc.CallOption) (*UpdateTodayEnterChatUserCntResp, error) {
	out := new(UpdateTodayEnterChatUserCntResp)
	err := c.cc.Invoke(ctx, "/pb.chat/updateTodayEnterChatUserCnt", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatClient) UpdateLastDaysEnterChatUserCnt(ctx context.Context, in *UpdateLastDaysEnterChatUserCntReq, opts ...grpc.CallOption) (*UpdateLastDaysEnterChatUserCntResp, error) {
	out := new(UpdateLastDaysEnterChatUserCntResp)
	err := c.cc.Invoke(ctx, "/pb.chat/updateLastDaysEnterChatUserCnt", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatClient) UpdateTextChatOver(ctx context.Context, in *UpdateTextChatOverReq, opts ...grpc.CallOption) (*UpdateTextChatOverResp, error) {
	out := new(UpdateTextChatOverResp)
	err := c.cc.Invoke(ctx, "/pb.chat/updateTextChatOver", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatClient) CreateListenerVoiceChatState(ctx context.Context, in *CreateListenerVoiceChatStateReq, opts ...grpc.CallOption) (*CreateListenerVoiceChatStateResp, error) {
	out := new(CreateListenerVoiceChatStateResp)
	err := c.cc.Invoke(ctx, "/pb.chat/createListenerVoiceChatState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatClient) SendUserListenerRelationEvent(ctx context.Context, in *SendUserListenerRelationEventReq, opts ...grpc.CallOption) (*SendUserListenerRelationEventResp, error) {
	out := new(SendUserListenerRelationEventResp)
	err := c.cc.Invoke(ctx, "/pb.chat/sendUserListenerRelationEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatClient) GetTopUserAndListenerRelation(ctx context.Context, in *GetTopUserAndListenerRelationReq, opts ...grpc.CallOption) (*GetTopUserAndListenerRelationResp, error) {
	out := new(GetTopUserAndListenerRelationResp)
	err := c.cc.Invoke(ctx, "/pb.chat/GetTopUserAndListenerRelation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChatServer is the server API for Chat service.
// All implementations must embed UnimplementedChatServer
// for forward compatibility
type ChatServer interface {
	// 同步聊天状态过程
	SyncChatState(context.Context, *SyncChatStateReq) (*SyncChatStateResp, error)
	// 更新用户聊天可用时间
	UpdateUserChatBalance(context.Context, *UpdateUserChatBalanceReq) (*UpdateUserChatBalanceResp, error)
	// 结算当前通话记录
	UpdateVoiceChatStat(context.Context, *UpdateVoiceChatStatReq) (*UpdateVoiceChatStatResp, error)
	// 获取时间快结束的语音通话
	GetUseOutVoiceChat(context.Context, *GetUseOutVoiceChatReq) (*GetUseOutVoiceChatResp, error)
	// 获取时间快结束的文字通话
	GetUseOutTextChat(context.Context, *GetUseOutTextChatReq) (*GetUseOutTextChatResp, error)
	// 重置免费聊天次数
	ResetFreeTextChatCnt(context.Context, *ResetFreeTextChatCntReq) (*ResetFreeTextChatCntResp, error)
	// 更新统计进入XXX聊天页面用户数
	UpdateTodayEnterChatUserCnt(context.Context, *UpdateTodayEnterChatUserCntReq) (*UpdateTodayEnterChatUserCntResp, error)
	// 更新统计近几天进入XXX页面用户数
	UpdateLastDaysEnterChatUserCnt(context.Context, *UpdateLastDaysEnterChatUserCntReq) (*UpdateLastDaysEnterChatUserCntResp, error)
	// 更新文字聊天时间用完
	UpdateTextChatOver(context.Context, *UpdateTextChatOverReq) (*UpdateTextChatOverResp, error)
	// 初始化XXX通话状态
	CreateListenerVoiceChatState(context.Context, *CreateListenerVoiceChatStateReq) (*CreateListenerVoiceChatStateResp, error)
	// 用户和XXX交互事件
	SendUserListenerRelationEvent(context.Context, *SendUserListenerRelationEventReq) (*SendUserListenerRelationEventResp, error)
	// 获取交互最频繁的几位XXX
	GetTopUserAndListenerRelation(context.Context, *GetTopUserAndListenerRelationReq) (*GetTopUserAndListenerRelationResp, error)
	mustEmbedUnimplementedChatServer()
}

// UnimplementedChatServer must be embedded to have forward compatible implementations.
type UnimplementedChatServer struct {
}

func (UnimplementedChatServer) SyncChatState(context.Context, *SyncChatStateReq) (*SyncChatStateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SyncChatState not implemented")
}
func (UnimplementedChatServer) UpdateUserChatBalance(context.Context, *UpdateUserChatBalanceReq) (*UpdateUserChatBalanceResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserChatBalance not implemented")
}
func (UnimplementedChatServer) UpdateVoiceChatStat(context.Context, *UpdateVoiceChatStatReq) (*UpdateVoiceChatStatResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateVoiceChatStat not implemented")
}
func (UnimplementedChatServer) GetUseOutVoiceChat(context.Context, *GetUseOutVoiceChatReq) (*GetUseOutVoiceChatResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUseOutVoiceChat not implemented")
}
func (UnimplementedChatServer) GetUseOutTextChat(context.Context, *GetUseOutTextChatReq) (*GetUseOutTextChatResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUseOutTextChat not implemented")
}
func (UnimplementedChatServer) ResetFreeTextChatCnt(context.Context, *ResetFreeTextChatCntReq) (*ResetFreeTextChatCntResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetFreeTextChatCnt not implemented")
}
func (UnimplementedChatServer) UpdateTodayEnterChatUserCnt(context.Context, *UpdateTodayEnterChatUserCntReq) (*UpdateTodayEnterChatUserCntResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTodayEnterChatUserCnt not implemented")
}
func (UnimplementedChatServer) UpdateLastDaysEnterChatUserCnt(context.Context, *UpdateLastDaysEnterChatUserCntReq) (*UpdateLastDaysEnterChatUserCntResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateLastDaysEnterChatUserCnt not implemented")
}
func (UnimplementedChatServer) UpdateTextChatOver(context.Context, *UpdateTextChatOverReq) (*UpdateTextChatOverResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTextChatOver not implemented")
}
func (UnimplementedChatServer) CreateListenerVoiceChatState(context.Context, *CreateListenerVoiceChatStateReq) (*CreateListenerVoiceChatStateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateListenerVoiceChatState not implemented")
}
func (UnimplementedChatServer) SendUserListenerRelationEvent(context.Context, *SendUserListenerRelationEventReq) (*SendUserListenerRelationEventResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendUserListenerRelationEvent not implemented")
}
func (UnimplementedChatServer) GetTopUserAndListenerRelation(context.Context, *GetTopUserAndListenerRelationReq) (*GetTopUserAndListenerRelationResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTopUserAndListenerRelation not implemented")
}
func (UnimplementedChatServer) mustEmbedUnimplementedChatServer() {}

// UnsafeChatServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChatServer will
// result in compilation errors.
type UnsafeChatServer interface {
	mustEmbedUnimplementedChatServer()
}

func RegisterChatServer(s grpc.ServiceRegistrar, srv ChatServer) {
	s.RegisterService(&Chat_ServiceDesc, srv)
}

func _Chat_SyncChatState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SyncChatStateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).SyncChatState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.chat/syncChatState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).SyncChatState(ctx, req.(*SyncChatStateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chat_UpdateUserChatBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserChatBalanceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).UpdateUserChatBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.chat/updateUserChatBalance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).UpdateUserChatBalance(ctx, req.(*UpdateUserChatBalanceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chat_UpdateVoiceChatStat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateVoiceChatStatReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).UpdateVoiceChatStat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.chat/updateVoiceChatStat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).UpdateVoiceChatStat(ctx, req.(*UpdateVoiceChatStatReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chat_GetUseOutVoiceChat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUseOutVoiceChatReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).GetUseOutVoiceChat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.chat/getUseOutVoiceChat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).GetUseOutVoiceChat(ctx, req.(*GetUseOutVoiceChatReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chat_GetUseOutTextChat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUseOutTextChatReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).GetUseOutTextChat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.chat/getUseOutTextChat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).GetUseOutTextChat(ctx, req.(*GetUseOutTextChatReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chat_ResetFreeTextChatCnt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetFreeTextChatCntReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).ResetFreeTextChatCnt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.chat/resetFreeTextChatCnt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).ResetFreeTextChatCnt(ctx, req.(*ResetFreeTextChatCntReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chat_UpdateTodayEnterChatUserCnt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTodayEnterChatUserCntReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).UpdateTodayEnterChatUserCnt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.chat/updateTodayEnterChatUserCnt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).UpdateTodayEnterChatUserCnt(ctx, req.(*UpdateTodayEnterChatUserCntReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chat_UpdateLastDaysEnterChatUserCnt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateLastDaysEnterChatUserCntReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).UpdateLastDaysEnterChatUserCnt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.chat/updateLastDaysEnterChatUserCnt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).UpdateLastDaysEnterChatUserCnt(ctx, req.(*UpdateLastDaysEnterChatUserCntReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chat_UpdateTextChatOver_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTextChatOverReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).UpdateTextChatOver(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.chat/updateTextChatOver",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).UpdateTextChatOver(ctx, req.(*UpdateTextChatOverReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chat_CreateListenerVoiceChatState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateListenerVoiceChatStateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).CreateListenerVoiceChatState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.chat/createListenerVoiceChatState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).CreateListenerVoiceChatState(ctx, req.(*CreateListenerVoiceChatStateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chat_SendUserListenerRelationEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendUserListenerRelationEventReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).SendUserListenerRelationEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.chat/sendUserListenerRelationEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).SendUserListenerRelationEvent(ctx, req.(*SendUserListenerRelationEventReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chat_GetTopUserAndListenerRelation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTopUserAndListenerRelationReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).GetTopUserAndListenerRelation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.chat/GetTopUserAndListenerRelation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).GetTopUserAndListenerRelation(ctx, req.(*GetTopUserAndListenerRelationReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Chat_ServiceDesc is the grpc.ServiceDesc for Chat service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Chat_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.chat",
	HandlerType: (*ChatServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "syncChatState",
			Handler:    _Chat_SyncChatState_Handler,
		},
		{
			MethodName: "updateUserChatBalance",
			Handler:    _Chat_UpdateUserChatBalance_Handler,
		},
		{
			MethodName: "updateVoiceChatStat",
			Handler:    _Chat_UpdateVoiceChatStat_Handler,
		},
		{
			MethodName: "getUseOutVoiceChat",
			Handler:    _Chat_GetUseOutVoiceChat_Handler,
		},
		{
			MethodName: "getUseOutTextChat",
			Handler:    _Chat_GetUseOutTextChat_Handler,
		},
		{
			MethodName: "resetFreeTextChatCnt",
			Handler:    _Chat_ResetFreeTextChatCnt_Handler,
		},
		{
			MethodName: "updateTodayEnterChatUserCnt",
			Handler:    _Chat_UpdateTodayEnterChatUserCnt_Handler,
		},
		{
			MethodName: "updateLastDaysEnterChatUserCnt",
			Handler:    _Chat_UpdateLastDaysEnterChatUserCnt_Handler,
		},
		{
			MethodName: "updateTextChatOver",
			Handler:    _Chat_UpdateTextChatOver_Handler,
		},
		{
			MethodName: "createListenerVoiceChatState",
			Handler:    _Chat_CreateListenerVoiceChatState_Handler,
		},
		{
			MethodName: "sendUserListenerRelationEvent",
			Handler:    _Chat_SendUserListenerRelationEvent_Handler,
		},
		{
			MethodName: "GetTopUserAndListenerRelation",
			Handler:    _Chat_GetTopUserAndListenerRelation_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "chat.proto",
}
