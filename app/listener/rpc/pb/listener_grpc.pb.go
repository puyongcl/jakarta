// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: listener.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ListenerClient is the client API for Listener service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ListenerClient interface {
	// XXX首次填写或更新自己的资料
	AddOrUpdateListenerProfileDraft(ctx context.Context, in *EditListenerProfileDraftReq, opts ...grpc.CallOption) (*EditListenerProfileDraftResp, error)
	// 新申请XXX提交审核
	CommitCheckNewListenerProfile(ctx context.Context, in *CommitCheckNewListenerProfileReq, opts ...grpc.CallOption) (*CommitCheckNewListenerProfileResp, error)
	// 用户查看XXX资料（TODO 后台内部禁止调用）
	GetListenerProfileByUser(ctx context.Context, in *GetListenerProfileByUserReq, opts ...grpc.CallOption) (*GetListenerProfileByUserResp, error)
	// XXX获取自己的资料
	GetListenerProfileByOwn(ctx context.Context, in *GetListenerProfileByOwnReq, opts ...grpc.CallOption) (*GetListenerProfileByOwnResp, error)
	// XXX备注用户
	ListenerRemarkUser(ctx context.Context, in *ListenerRemarkUserReq, opts ...grpc.CallOption) (*ListenerRemarkUserResp, error)
	// 获取XXX备注的用户
	GetListenerRemarkUser(ctx context.Context, in *GetListenerRemarkUserReq, opts ...grpc.CallOption) (*GetListenerRemarkUserResp, error)
	// 用户获取XXX推荐列表
	GetRecommendListenerListByUser(ctx context.Context, in *GetRecommendListenerByUserReq, opts ...grpc.CallOption) (*GetRecommendListenerByUserResp, error)
	// 获取推荐的XXX
	GetRecommendListenerList(ctx context.Context, in *GetRecommendListenerReq, opts ...grpc.CallOption) (*GetRecommendListenerResp, error)
	// 获取XXX工作状态设置
	GetWorkState(ctx context.Context, in *GetWorkStateReq, opts ...grpc.CallOption) (*GetWorkStateResp, error)
	// 修改XXX工作状态
	ChangeWorkState(ctx context.Context, in *ChangeWorkStateReq, opts ...grpc.CallOption) (*ChangeWorkStateResp, error)
	// 获取XXX定价和价格方案
	GetListenerPrice(ctx context.Context, in *GetListenerPriceReq, opts ...grpc.CallOption) (*GetListenerPriceResp, error)
	// XXX钱包金额更新
	UpdateListenerWallet(ctx context.Context, in *UpdateListenerWalletReq, opts ...grpc.CallOption) (*UpdateListenerWalletResp, error)
	// 更新XXX的订单统计数据
	UpdateListenerOrderStat(ctx context.Context, in *UpdateListenerOrderStatReq, opts ...grpc.CallOption) (*UpdateListenerOrderStatResp, error)
	// 绑定银行卡
	SetBankCard(ctx context.Context, in *SetBankCardReq, opts ...grpc.CallOption) (*SetBankCardResp, error)
	// 获取银行卡
	GetBankCard(ctx context.Context, in *GetBankCardReq, opts ...grpc.CallOption) (*GetBankCardResp, error)
	// 获取XXX钱包详情
	GetListenerWallet(ctx context.Context, in *GetListenerWalletReq, opts ...grpc.CallOption) (*GetListenerWalletResp, error)
	// 获取提现记录
	GetListenerCashLog(ctx context.Context, in *GetListenerCashLogReq, opts ...grpc.CallOption) (*GetListenerCashLogResp, error)
	// 获取收益记录
	GetListenerIncomeLog(ctx context.Context, in *GetListenerIncomeLogReq, opts ...grpc.CallOption) (*GetListenerIncomeLogResp, error)
	// 获取XXX评价统计情况
	GetListenerRatingStat(ctx context.Context, in *GetListenerRatingStatReq, opts ...grpc.CallOption) (*GetListenerRatingStatResp, error)
	// 获取XXX常用语
	GetListenerWords(ctx context.Context, in *GetListenerWordsReq, opts ...grpc.CallOption) (*GetListenerWordsResp, error)
	// 编辑XXX常用语
	EditListenerWords(ctx context.Context, in *EditListenerWordsReq, opts ...grpc.CallOption) (*EditListenerWordsResp, error)
	// 更新XXX与用户的交互情况
	UpdateListenerUserStat(ctx context.Context, in *UpdateListenerUserStatReq, opts ...grpc.CallOption) (*UpdateListenerUserStatResp, error)
	// 更新统计今日推荐和浏览XXX资料页统计
	UpdateTodayListenerUserStat(ctx context.Context, in *UpdateTodayListenerUserStatReq, opts ...grpc.CallOption) (*UpdateTodayListenerUserStatResp, error)
	// 更新XXX首页数据统计看板
	UpdateListenerDashboardStat(ctx context.Context, in *UpdateListenerDashboardStatReq, opts ...grpc.CallOption) (*UpdateListenerDashboardStatResp, error)
	// 查询几天内更新过的XXX列表
	FindListenerListRangeByUpdateTime(ctx context.Context, in *FindListenerListRangeByUpdateTimeReq, opts ...grpc.CallOption) (*FindListenerListRangeByUpdateTimeResp, error)
	// 获取XXX首页统计数据
	GetListenerHomePageDashboard(ctx context.Context, in *GetListenerHomePageDashboardReq, opts ...grpc.CallOption) (*GetListenerHomePageDashboardResp, error)
	// 保存最近多少天的统计数据（一天更新一次，不能覆盖每日更新的数据)
	SnapshotLastDaysListenerStat(ctx context.Context, in *SnapshotLastDaysListenerStatReq, opts ...grpc.CallOption) (*SnapshotLastDaysListenerStatResp, error)
	// 更新XXX每日统计数据的平均值
	UpdateListenerEveryDayAverageStat(ctx context.Context, in *UpdateListenerEveryDayAverageStatReq, opts ...grpc.CallOption) (*UpdateListenerEveryDayAverageStatResp, error)
	// 更新XXX建议
	UpdateListenerSuggestion(ctx context.Context, in *UpdateListenerSuggestionReq, opts ...grpc.CallOption) (*UpdateListenerSuggestionResp, error)
	// 更新XXX的状态
	UpdateListenerOnlineState(ctx context.Context, in *UpdateListenerOnlineStateReq, opts ...grpc.CallOption) (*UpdateListenerOnlineStateResp, error)
	// 生成合同
	GenListenerContract(ctx context.Context, in *GenListenerContractReq, opts ...grpc.CallOption) (*GenListenerContractResp, error)
	// 管理员接口 获取XXX列表
	AdminGetListenerProfileList(ctx context.Context, in *GetListenerProfileListReq, opts ...grpc.CallOption) (*GetListenerProfileListResp, error)
	// 管理员接口 审核XXX
	AdminCheckListenerProfile(ctx context.Context, in *CheckListenerProfileReq, opts ...grpc.CallOption) (*CheckListenerProfileResp, error)
	// 获取提交转账信息并更新状态
	GetCommitMoveCash(ctx context.Context, in *GetCommitMoveCashReq, opts ...grpc.CallOption) (*GetCommitMoveCashResp, error)
	// 获取XXX基本资料（后台内部）
	GetListenerBasicInfo(ctx context.Context, in *GetListenerBasicInfoReq, opts ...grpc.CallOption) (*GetListenerBasicInfoResp, error)
	// 更新新用户推荐XXX
	UpdateRecommendListenerPool(ctx context.Context, in *UpdateRecommendListenerPoolReq, opts ...grpc.CallOption) (*UpdateRecommendListenerPoolResp, error)
	// 获取新用户推荐XXX
	RecListenerWhenUserLogin(ctx context.Context, in *RecListenerWhenUserLoginReq, opts ...grpc.CallOption) (*RecListenerWhenUserLoginResp, error)
	// 管理后台获取XXX提现申请列表
	GetListenerMoveCashListByAdmin(ctx context.Context, in *GetListenerMoveCashListByAdminReq, opts ...grpc.CallOption) (*GetListenerMoveCashListByAdminResp, error)
}

type listenerClient struct {
	cc grpc.ClientConnInterface
}

func NewListenerClient(cc grpc.ClientConnInterface) ListenerClient {
	return &listenerClient{cc}
}

func (c *listenerClient) AddOrUpdateListenerProfileDraft(ctx context.Context, in *EditListenerProfileDraftReq, opts ...grpc.CallOption) (*EditListenerProfileDraftResp, error) {
	out := new(EditListenerProfileDraftResp)
	err := c.cc.Invoke(ctx, "/pb.listener/addOrUpdateListenerProfileDraft", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *listenerClient) CommitCheckNewListenerProfile(ctx context.Context, in *CommitCheckNewListenerProfileReq, opts ...grpc.CallOption) (*CommitCheckNewListenerProfileResp, error) {
	out := new(CommitCheckNewListenerProfileResp)
	err := c.cc.Invoke(ctx, "/pb.listener/commitCheckNewListenerProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *listenerClient) GetListenerProfileByUser(ctx context.Context, in *GetListenerProfileByUserReq, opts ...grpc.CallOption) (*GetListenerProfileByUserResp, error) {
	out := new(GetListenerProfileByUserResp)
	err := c.cc.Invoke(ctx, "/pb.listener/getListenerProfileByUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *listenerClient) GetListenerProfileByOwn(ctx context.Context, in *GetListenerProfileByOwnReq, opts ...grpc.CallOption) (*GetListenerProfileByOwnResp, error) {
	out := new(GetListenerProfileByOwnResp)
	err := c.cc.Invoke(ctx, "/pb.listener/getListenerProfileByOwn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *listenerClient) ListenerRemarkUser(ctx context.Context, in *ListenerRemarkUserReq, opts ...grpc.CallOption) (*ListenerRemarkUserResp, error) {
	out := new(ListenerRemarkUserResp)
	err := c.cc.Invoke(ctx, "/pb.listener/listenerRemarkUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *listenerClient) GetListenerRemarkUser(ctx context.Context, in *GetListenerRemarkUserReq, opts ...grpc.CallOption) (*GetListenerRemarkUserResp, error) {
	out := new(GetListenerRemarkUserResp)
	err := c.cc.Invoke(ctx, "/pb.listener/getListenerRemarkUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *listenerClient) GetRecommendListenerListByUser(ctx context.Context, in *GetRecommendListenerByUserReq, opts ...grpc.CallOption) (*GetRecommendListenerByUserResp, error) {
	out := new(GetRecommendListenerByUserResp)
	err := c.cc.Invoke(ctx, "/pb.listener/getRecommendListenerListByUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *listenerClient) GetRecommendListenerList(ctx context.Context, in *GetRecommendListenerReq, opts ...grpc.CallOption) (*GetRecommendListenerResp, error) {
	out := new(GetRecommendListenerResp)
	err := c.cc.Invoke(ctx, "/pb.listener/getRecommendListenerList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *listenerClient) GetWorkState(ctx context.Context, in *GetWorkStateReq, opts ...grpc.CallOption) (*GetWorkStateResp, error) {
	out := new(GetWorkStateResp)
	err := c.cc.Invoke(ctx, "/pb.listener/getWorkState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *listenerClient) ChangeWorkState(ctx context.Context, in *ChangeWorkStateReq, opts ...grpc.CallOption) (*ChangeWorkStateResp, error) {
	out := new(ChangeWorkStateResp)
	err := c.cc.Invoke(ctx, "/pb.listener/changeWorkState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *listenerClient) GetListenerPrice(ctx context.Context, in *GetListenerPriceReq, opts ...grpc.CallOption) (*GetListenerPriceResp, error) {
	out := new(GetListenerPriceResp)
	err := c.cc.Invoke(ctx, "/pb.listener/getListenerPrice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *listenerClient) UpdateListenerWallet(ctx context.Context, in *UpdateListenerWalletReq, opts ...grpc.CallOption) (*UpdateListenerWalletResp, error) {
	out := new(UpdateListenerWalletResp)
	err := c.cc.Invoke(ctx, "/pb.listener/updateListenerWallet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *listenerClient) UpdateListenerOrderStat(ctx context.Context, in *UpdateListenerOrderStatReq, opts ...grpc.CallOption) (*UpdateListenerOrderStatResp, error) {
	out := new(UpdateListenerOrderStatResp)
	err := c.cc.Invoke(ctx, "/pb.listener/updateListenerOrderStat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *listenerClient) SetBankCard(ctx context.Context, in *SetBankCardReq, opts ...grpc.CallOption) (*SetBankCardResp, error) {
	out := new(SetBankCardResp)
	err := c.cc.Invoke(ctx, "/pb.listener/setBankCard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *listenerClient) GetBankCard(ctx context.Context, in *GetBankCardReq, opts ...grpc.CallOption) (*GetBankCardResp, error) {
	out := new(GetBankCardResp)
	err := c.cc.Invoke(ctx, "/pb.listener/getBankCard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *listenerClient) GetListenerWallet(ctx context.Context, in *GetListenerWalletReq, opts ...grpc.CallOption) (*GetListenerWalletResp, error) {
	out := new(GetListenerWalletResp)
	err := c.cc.Invoke(ctx, "/pb.listener/getListenerWallet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *listenerClient) GetListenerCashLog(ctx context.Context, in *GetListenerCashLogReq, opts ...grpc.CallOption) (*GetListenerCashLogResp, error) {
	out := new(GetListenerCashLogResp)
	err := c.cc.Invoke(ctx, "/pb.listener/getListenerCashLog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *listenerClient) GetListenerIncomeLog(ctx context.Context, in *GetListenerIncomeLogReq, opts ...grpc.CallOption) (*GetListenerIncomeLogResp, error) {
	out := new(GetListenerIncomeLogResp)
	err := c.cc.Invoke(ctx, "/pb.listener/getListenerIncomeLog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *listenerClient) GetListenerRatingStat(ctx context.Context, in *GetListenerRatingStatReq, opts ...grpc.CallOption) (*GetListenerRatingStatResp, error) {
	out := new(GetListenerRatingStatResp)
	err := c.cc.Invoke(ctx, "/pb.listener/getListenerRatingStat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *listenerClient) GetListenerWords(ctx context.Context, in *GetListenerWordsReq, opts ...grpc.CallOption) (*GetListenerWordsResp, error) {
	out := new(GetListenerWordsResp)
	err := c.cc.Invoke(ctx, "/pb.listener/getListenerWords", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *listenerClient) EditListenerWords(ctx context.Context, in *EditListenerWordsReq, opts ...grpc.CallOption) (*EditListenerWordsResp, error) {
	out := new(EditListenerWordsResp)
	err := c.cc.Invoke(ctx, "/pb.listener/editListenerWords", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *listenerClient) UpdateListenerUserStat(ctx context.Context, in *UpdateListenerUserStatReq, opts ...grpc.CallOption) (*UpdateListenerUserStatResp, error) {
	out := new(UpdateListenerUserStatResp)
	err := c.cc.Invoke(ctx, "/pb.listener/updateListenerUserStat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *listenerClient) UpdateTodayListenerUserStat(ctx context.Context, in *UpdateTodayListenerUserStatReq, opts ...grpc.CallOption) (*UpdateTodayListenerUserStatResp, error) {
	out := new(UpdateTodayListenerUserStatResp)
	err := c.cc.Invoke(ctx, "/pb.listener/updateTodayListenerUserStat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *listenerClient) UpdateListenerDashboardStat(ctx context.Context, in *UpdateListenerDashboardStatReq, opts ...grpc.CallOption) (*UpdateListenerDashboardStatResp, error) {
	out := new(UpdateListenerDashboardStatResp)
	err := c.cc.Invoke(ctx, "/pb.listener/updateListenerDashboardStat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *listenerClient) FindListenerListRangeByUpdateTime(ctx context.Context, in *FindListenerListRangeByUpdateTimeReq, opts ...grpc.CallOption) (*FindListenerListRangeByUpdateTimeResp, error) {
	out := new(FindListenerListRangeByUpdateTimeResp)
	err := c.cc.Invoke(ctx, "/pb.listener/findListenerListRangeByUpdateTime", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *listenerClient) GetListenerHomePageDashboard(ctx context.Context, in *GetListenerHomePageDashboardReq, opts ...grpc.CallOption) (*GetListenerHomePageDashboardResp, error) {
	out := new(GetListenerHomePageDashboardResp)
	err := c.cc.Invoke(ctx, "/pb.listener/getListenerHomePageDashboard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *listenerClient) SnapshotLastDaysListenerStat(ctx context.Context, in *SnapshotLastDaysListenerStatReq, opts ...grpc.CallOption) (*SnapshotLastDaysListenerStatResp, error) {
	out := new(SnapshotLastDaysListenerStatResp)
	err := c.cc.Invoke(ctx, "/pb.listener/snapshotLastDaysListenerStat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *listenerClient) UpdateListenerEveryDayAverageStat(ctx context.Context, in *UpdateListenerEveryDayAverageStatReq, opts ...grpc.CallOption) (*UpdateListenerEveryDayAverageStatResp, error) {
	out := new(UpdateListenerEveryDayAverageStatResp)
	err := c.cc.Invoke(ctx, "/pb.listener/updateListenerEveryDayAverageStat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *listenerClient) UpdateListenerSuggestion(ctx context.Context, in *UpdateListenerSuggestionReq, opts ...grpc.CallOption) (*UpdateListenerSuggestionResp, error) {
	out := new(UpdateListenerSuggestionResp)
	err := c.cc.Invoke(ctx, "/pb.listener/updateListenerSuggestion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *listenerClient) UpdateListenerOnlineState(ctx context.Context, in *UpdateListenerOnlineStateReq, opts ...grpc.CallOption) (*UpdateListenerOnlineStateResp, error) {
	out := new(UpdateListenerOnlineStateResp)
	err := c.cc.Invoke(ctx, "/pb.listener/updateListenerOnlineState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *listenerClient) GenListenerContract(ctx context.Context, in *GenListenerContractReq, opts ...grpc.CallOption) (*GenListenerContractResp, error) {
	out := new(GenListenerContractResp)
	err := c.cc.Invoke(ctx, "/pb.listener/genListenerContract", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *listenerClient) AdminGetListenerProfileList(ctx context.Context, in *GetListenerProfileListReq, opts ...grpc.CallOption) (*GetListenerProfileListResp, error) {
	out := new(GetListenerProfileListResp)
	err := c.cc.Invoke(ctx, "/pb.listener/adminGetListenerProfileList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *listenerClient) AdminCheckListenerProfile(ctx context.Context, in *CheckListenerProfileReq, opts ...grpc.CallOption) (*CheckListenerProfileResp, error) {
	out := new(CheckListenerProfileResp)
	err := c.cc.Invoke(ctx, "/pb.listener/adminCheckListenerProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *listenerClient) GetCommitMoveCash(ctx context.Context, in *GetCommitMoveCashReq, opts ...grpc.CallOption) (*GetCommitMoveCashResp, error) {
	out := new(GetCommitMoveCashResp)
	err := c.cc.Invoke(ctx, "/pb.listener/getCommitMoveCash", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *listenerClient) GetListenerBasicInfo(ctx context.Context, in *GetListenerBasicInfoReq, opts ...grpc.CallOption) (*GetListenerBasicInfoResp, error) {
	out := new(GetListenerBasicInfoResp)
	err := c.cc.Invoke(ctx, "/pb.listener/getListenerBasicInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *listenerClient) UpdateRecommendListenerPool(ctx context.Context, in *UpdateRecommendListenerPoolReq, opts ...grpc.CallOption) (*UpdateRecommendListenerPoolResp, error) {
	out := new(UpdateRecommendListenerPoolResp)
	err := c.cc.Invoke(ctx, "/pb.listener/updateRecommendListenerPool", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *listenerClient) RecListenerWhenUserLogin(ctx context.Context, in *RecListenerWhenUserLoginReq, opts ...grpc.CallOption) (*RecListenerWhenUserLoginResp, error) {
	out := new(RecListenerWhenUserLoginResp)
	err := c.cc.Invoke(ctx, "/pb.listener/recListenerWhenUserLogin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *listenerClient) GetListenerMoveCashListByAdmin(ctx context.Context, in *GetListenerMoveCashListByAdminReq, opts ...grpc.CallOption) (*GetListenerMoveCashListByAdminResp, error) {
	out := new(GetListenerMoveCashListByAdminResp)
	err := c.cc.Invoke(ctx, "/pb.listener/getListenerMoveCashListByAdmin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ListenerServer is the server API for Listener service.
// All implementations must embed UnimplementedListenerServer
// for forward compatibility
type ListenerServer interface {
	// XXX首次填写或更新自己的资料
	AddOrUpdateListenerProfileDraft(context.Context, *EditListenerProfileDraftReq) (*EditListenerProfileDraftResp, error)
	// 新申请XXX提交审核
	CommitCheckNewListenerProfile(context.Context, *CommitCheckNewListenerProfileReq) (*CommitCheckNewListenerProfileResp, error)
	// 用户查看XXX资料（TODO 后台内部禁止调用）
	GetListenerProfileByUser(context.Context, *GetListenerProfileByUserReq) (*GetListenerProfileByUserResp, error)
	// XXX获取自己的资料
	GetListenerProfileByOwn(context.Context, *GetListenerProfileByOwnReq) (*GetListenerProfileByOwnResp, error)
	// XXX备注用户
	ListenerRemarkUser(context.Context, *ListenerRemarkUserReq) (*ListenerRemarkUserResp, error)
	// 获取XXX备注的用户
	GetListenerRemarkUser(context.Context, *GetListenerRemarkUserReq) (*GetListenerRemarkUserResp, error)
	// 用户获取XXX推荐列表
	GetRecommendListenerListByUser(context.Context, *GetRecommendListenerByUserReq) (*GetRecommendListenerByUserResp, error)
	// 获取推荐的XXX
	GetRecommendListenerList(context.Context, *GetRecommendListenerReq) (*GetRecommendListenerResp, error)
	// 获取XXX工作状态设置
	GetWorkState(context.Context, *GetWorkStateReq) (*GetWorkStateResp, error)
	// 修改XXX工作状态
	ChangeWorkState(context.Context, *ChangeWorkStateReq) (*ChangeWorkStateResp, error)
	// 获取XXX定价和价格方案
	GetListenerPrice(context.Context, *GetListenerPriceReq) (*GetListenerPriceResp, error)
	// XXX钱包金额更新
	UpdateListenerWallet(context.Context, *UpdateListenerWalletReq) (*UpdateListenerWalletResp, error)
	// 更新XXX的订单统计数据
	UpdateListenerOrderStat(context.Context, *UpdateListenerOrderStatReq) (*UpdateListenerOrderStatResp, error)
	// 绑定银行卡
	SetBankCard(context.Context, *SetBankCardReq) (*SetBankCardResp, error)
	// 获取银行卡
	GetBankCard(context.Context, *GetBankCardReq) (*GetBankCardResp, error)
	// 获取XXX钱包详情
	GetListenerWallet(context.Context, *GetListenerWalletReq) (*GetListenerWalletResp, error)
	// 获取提现记录
	GetListenerCashLog(context.Context, *GetListenerCashLogReq) (*GetListenerCashLogResp, error)
	// 获取收益记录
	GetListenerIncomeLog(context.Context, *GetListenerIncomeLogReq) (*GetListenerIncomeLogResp, error)
	// 获取XXX评价统计情况
	GetListenerRatingStat(context.Context, *GetListenerRatingStatReq) (*GetListenerRatingStatResp, error)
	// 获取XXX常用语
	GetListenerWords(context.Context, *GetListenerWordsReq) (*GetListenerWordsResp, error)
	// 编辑XXX常用语
	EditListenerWords(context.Context, *EditListenerWordsReq) (*EditListenerWordsResp, error)
	// 更新XXX与用户的交互情况
	UpdateListenerUserStat(context.Context, *UpdateListenerUserStatReq) (*UpdateListenerUserStatResp, error)
	// 更新统计今日推荐和浏览XXX资料页统计
	UpdateTodayListenerUserStat(context.Context, *UpdateTodayListenerUserStatReq) (*UpdateTodayListenerUserStatResp, error)
	// 更新XXX首页数据统计看板
	UpdateListenerDashboardStat(context.Context, *UpdateListenerDashboardStatReq) (*UpdateListenerDashboardStatResp, error)
	// 查询几天内更新过的XXX列表
	FindListenerListRangeByUpdateTime(context.Context, *FindListenerListRangeByUpdateTimeReq) (*FindListenerListRangeByUpdateTimeResp, error)
	// 获取XXX首页统计数据
	GetListenerHomePageDashboard(context.Context, *GetListenerHomePageDashboardReq) (*GetListenerHomePageDashboardResp, error)
	// 保存最近多少天的统计数据（一天更新一次，不能覆盖每日更新的数据)
	SnapshotLastDaysListenerStat(context.Context, *SnapshotLastDaysListenerStatReq) (*SnapshotLastDaysListenerStatResp, error)
	// 更新XXX每日统计数据的平均值
	UpdateListenerEveryDayAverageStat(context.Context, *UpdateListenerEveryDayAverageStatReq) (*UpdateListenerEveryDayAverageStatResp, error)
	// 更新XXX建议
	UpdateListenerSuggestion(context.Context, *UpdateListenerSuggestionReq) (*UpdateListenerSuggestionResp, error)
	// 更新XXX的状态
	UpdateListenerOnlineState(context.Context, *UpdateListenerOnlineStateReq) (*UpdateListenerOnlineStateResp, error)
	// 生成合同
	GenListenerContract(context.Context, *GenListenerContractReq) (*GenListenerContractResp, error)
	// 管理员接口 获取XXX列表
	AdminGetListenerProfileList(context.Context, *GetListenerProfileListReq) (*GetListenerProfileListResp, error)
	// 管理员接口 审核XXX
	AdminCheckListenerProfile(context.Context, *CheckListenerProfileReq) (*CheckListenerProfileResp, error)
	// 获取提交转账信息并更新状态
	GetCommitMoveCash(context.Context, *GetCommitMoveCashReq) (*GetCommitMoveCashResp, error)
	// 获取XXX基本资料（后台内部）
	GetListenerBasicInfo(context.Context, *GetListenerBasicInfoReq) (*GetListenerBasicInfoResp, error)
	// 更新新用户推荐XXX
	UpdateRecommendListenerPool(context.Context, *UpdateRecommendListenerPoolReq) (*UpdateRecommendListenerPoolResp, error)
	// 获取新用户推荐XXX
	RecListenerWhenUserLogin(context.Context, *RecListenerWhenUserLoginReq) (*RecListenerWhenUserLoginResp, error)
	// 管理后台获取XXX提现申请列表
	GetListenerMoveCashListByAdmin(context.Context, *GetListenerMoveCashListByAdminReq) (*GetListenerMoveCashListByAdminResp, error)
	mustEmbedUnimplementedListenerServer()
}

// UnimplementedListenerServer must be embedded to have forward compatible implementations.
type UnimplementedListenerServer struct {
}

func (UnimplementedListenerServer) AddOrUpdateListenerProfileDraft(context.Context, *EditListenerProfileDraftReq) (*EditListenerProfileDraftResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddOrUpdateListenerProfileDraft not implemented")
}
func (UnimplementedListenerServer) CommitCheckNewListenerProfile(context.Context, *CommitCheckNewListenerProfileReq) (*CommitCheckNewListenerProfileResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommitCheckNewListenerProfile not implemented")
}
func (UnimplementedListenerServer) GetListenerProfileByUser(context.Context, *GetListenerProfileByUserReq) (*GetListenerProfileByUserResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetListenerProfileByUser not implemented")
}
func (UnimplementedListenerServer) GetListenerProfileByOwn(context.Context, *GetListenerProfileByOwnReq) (*GetListenerProfileByOwnResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetListenerProfileByOwn not implemented")
}
func (UnimplementedListenerServer) ListenerRemarkUser(context.Context, *ListenerRemarkUserReq) (*ListenerRemarkUserResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListenerRemarkUser not implemented")
}
func (UnimplementedListenerServer) GetListenerRemarkUser(context.Context, *GetListenerRemarkUserReq) (*GetListenerRemarkUserResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetListenerRemarkUser not implemented")
}
func (UnimplementedListenerServer) GetRecommendListenerListByUser(context.Context, *GetRecommendListenerByUserReq) (*GetRecommendListenerByUserResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRecommendListenerListByUser not implemented")
}
func (UnimplementedListenerServer) GetRecommendListenerList(context.Context, *GetRecommendListenerReq) (*GetRecommendListenerResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRecommendListenerList not implemented")
}
func (UnimplementedListenerServer) GetWorkState(context.Context, *GetWorkStateReq) (*GetWorkStateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWorkState not implemented")
}
func (UnimplementedListenerServer) ChangeWorkState(context.Context, *ChangeWorkStateReq) (*ChangeWorkStateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeWorkState not implemented")
}
func (UnimplementedListenerServer) GetListenerPrice(context.Context, *GetListenerPriceReq) (*GetListenerPriceResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetListenerPrice not implemented")
}
func (UnimplementedListenerServer) UpdateListenerWallet(context.Context, *UpdateListenerWalletReq) (*UpdateListenerWalletResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateListenerWallet not implemented")
}
func (UnimplementedListenerServer) UpdateListenerOrderStat(context.Context, *UpdateListenerOrderStatReq) (*UpdateListenerOrderStatResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateListenerOrderStat not implemented")
}
func (UnimplementedListenerServer) SetBankCard(context.Context, *SetBankCardReq) (*SetBankCardResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetBankCard not implemented")
}
func (UnimplementedListenerServer) GetBankCard(context.Context, *GetBankCardReq) (*GetBankCardResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBankCard not implemented")
}
func (UnimplementedListenerServer) GetListenerWallet(context.Context, *GetListenerWalletReq) (*GetListenerWalletResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetListenerWallet not implemented")
}
func (UnimplementedListenerServer) GetListenerCashLog(context.Context, *GetListenerCashLogReq) (*GetListenerCashLogResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetListenerCashLog not implemented")
}
func (UnimplementedListenerServer) GetListenerIncomeLog(context.Context, *GetListenerIncomeLogReq) (*GetListenerIncomeLogResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetListenerIncomeLog not implemented")
}
func (UnimplementedListenerServer) GetListenerRatingStat(context.Context, *GetListenerRatingStatReq) (*GetListenerRatingStatResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetListenerRatingStat not implemented")
}
func (UnimplementedListenerServer) GetListenerWords(context.Context, *GetListenerWordsReq) (*GetListenerWordsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetListenerWords not implemented")
}
func (UnimplementedListenerServer) EditListenerWords(context.Context, *EditListenerWordsReq) (*EditListenerWordsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditListenerWords not implemented")
}
func (UnimplementedListenerServer) UpdateListenerUserStat(context.Context, *UpdateListenerUserStatReq) (*UpdateListenerUserStatResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateListenerUserStat not implemented")
}
func (UnimplementedListenerServer) UpdateTodayListenerUserStat(context.Context, *UpdateTodayListenerUserStatReq) (*UpdateTodayListenerUserStatResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTodayListenerUserStat not implemented")
}
func (UnimplementedListenerServer) UpdateListenerDashboardStat(context.Context, *UpdateListenerDashboardStatReq) (*UpdateListenerDashboardStatResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateListenerDashboardStat not implemented")
}
func (UnimplementedListenerServer) FindListenerListRangeByUpdateTime(context.Context, *FindListenerListRangeByUpdateTimeReq) (*FindListenerListRangeByUpdateTimeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindListenerListRangeByUpdateTime not implemented")
}
func (UnimplementedListenerServer) GetListenerHomePageDashboard(context.Context, *GetListenerHomePageDashboardReq) (*GetListenerHomePageDashboardResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetListenerHomePageDashboard not implemented")
}
func (UnimplementedListenerServer) SnapshotLastDaysListenerStat(context.Context, *SnapshotLastDaysListenerStatReq) (*SnapshotLastDaysListenerStatResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SnapshotLastDaysListenerStat not implemented")
}
func (UnimplementedListenerServer) UpdateListenerEveryDayAverageStat(context.Context, *UpdateListenerEveryDayAverageStatReq) (*UpdateListenerEveryDayAverageStatResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateListenerEveryDayAverageStat not implemented")
}
func (UnimplementedListenerServer) UpdateListenerSuggestion(context.Context, *UpdateListenerSuggestionReq) (*UpdateListenerSuggestionResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateListenerSuggestion not implemented")
}
func (UnimplementedListenerServer) UpdateListenerOnlineState(context.Context, *UpdateListenerOnlineStateReq) (*UpdateListenerOnlineStateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateListenerOnlineState not implemented")
}
func (UnimplementedListenerServer) GenListenerContract(context.Context, *GenListenerContractReq) (*GenListenerContractResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenListenerContract not implemented")
}
func (UnimplementedListenerServer) AdminGetListenerProfileList(context.Context, *GetListenerProfileListReq) (*GetListenerProfileListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminGetListenerProfileList not implemented")
}
func (UnimplementedListenerServer) AdminCheckListenerProfile(context.Context, *CheckListenerProfileReq) (*CheckListenerProfileResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminCheckListenerProfile not implemented")
}
func (UnimplementedListenerServer) GetCommitMoveCash(context.Context, *GetCommitMoveCashReq) (*GetCommitMoveCashResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCommitMoveCash not implemented")
}
func (UnimplementedListenerServer) GetListenerBasicInfo(context.Context, *GetListenerBasicInfoReq) (*GetListenerBasicInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetListenerBasicInfo not implemented")
}
func (UnimplementedListenerServer) UpdateRecommendListenerPool(context.Context, *UpdateRecommendListenerPoolReq) (*UpdateRecommendListenerPoolResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRecommendListenerPool not implemented")
}
func (UnimplementedListenerServer) RecListenerWhenUserLogin(context.Context, *RecListenerWhenUserLoginReq) (*RecListenerWhenUserLoginResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecListenerWhenUserLogin not implemented")
}
func (UnimplementedListenerServer) GetListenerMoveCashListByAdmin(context.Context, *GetListenerMoveCashListByAdminReq) (*GetListenerMoveCashListByAdminResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetListenerMoveCashListByAdmin not implemented")
}
func (UnimplementedListenerServer) mustEmbedUnimplementedListenerServer() {}

// UnsafeListenerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ListenerServer will
// result in compilation errors.
type UnsafeListenerServer interface {
	mustEmbedUnimplementedListenerServer()
}

func RegisterListenerServer(s grpc.ServiceRegistrar, srv ListenerServer) {
	s.RegisterService(&Listener_ServiceDesc, srv)
}

func _Listener_AddOrUpdateListenerProfileDraft_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EditListenerProfileDraftReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ListenerServer).AddOrUpdateListenerProfileDraft(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.listener/addOrUpdateListenerProfileDraft",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ListenerServer).AddOrUpdateListenerProfileDraft(ctx, req.(*EditListenerProfileDraftReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Listener_CommitCheckNewListenerProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommitCheckNewListenerProfileReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ListenerServer).CommitCheckNewListenerProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.listener/commitCheckNewListenerProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ListenerServer).CommitCheckNewListenerProfile(ctx, req.(*CommitCheckNewListenerProfileReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Listener_GetListenerProfileByUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetListenerProfileByUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ListenerServer).GetListenerProfileByUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.listener/getListenerProfileByUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ListenerServer).GetListenerProfileByUser(ctx, req.(*GetListenerProfileByUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Listener_GetListenerProfileByOwn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetListenerProfileByOwnReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ListenerServer).GetListenerProfileByOwn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.listener/getListenerProfileByOwn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ListenerServer).GetListenerProfileByOwn(ctx, req.(*GetListenerProfileByOwnReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Listener_ListenerRemarkUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListenerRemarkUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ListenerServer).ListenerRemarkUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.listener/listenerRemarkUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ListenerServer).ListenerRemarkUser(ctx, req.(*ListenerRemarkUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Listener_GetListenerRemarkUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetListenerRemarkUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ListenerServer).GetListenerRemarkUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.listener/getListenerRemarkUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ListenerServer).GetListenerRemarkUser(ctx, req.(*GetListenerRemarkUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Listener_GetRecommendListenerListByUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRecommendListenerByUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ListenerServer).GetRecommendListenerListByUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.listener/getRecommendListenerListByUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ListenerServer).GetRecommendListenerListByUser(ctx, req.(*GetRecommendListenerByUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Listener_GetRecommendListenerList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRecommendListenerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ListenerServer).GetRecommendListenerList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.listener/getRecommendListenerList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ListenerServer).GetRecommendListenerList(ctx, req.(*GetRecommendListenerReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Listener_GetWorkState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWorkStateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ListenerServer).GetWorkState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.listener/getWorkState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ListenerServer).GetWorkState(ctx, req.(*GetWorkStateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Listener_ChangeWorkState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeWorkStateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ListenerServer).ChangeWorkState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.listener/changeWorkState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ListenerServer).ChangeWorkState(ctx, req.(*ChangeWorkStateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Listener_GetListenerPrice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetListenerPriceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ListenerServer).GetListenerPrice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.listener/getListenerPrice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ListenerServer).GetListenerPrice(ctx, req.(*GetListenerPriceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Listener_UpdateListenerWallet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateListenerWalletReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ListenerServer).UpdateListenerWallet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.listener/updateListenerWallet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ListenerServer).UpdateListenerWallet(ctx, req.(*UpdateListenerWalletReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Listener_UpdateListenerOrderStat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateListenerOrderStatReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ListenerServer).UpdateListenerOrderStat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.listener/updateListenerOrderStat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ListenerServer).UpdateListenerOrderStat(ctx, req.(*UpdateListenerOrderStatReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Listener_SetBankCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetBankCardReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ListenerServer).SetBankCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.listener/setBankCard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ListenerServer).SetBankCard(ctx, req.(*SetBankCardReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Listener_GetBankCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBankCardReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ListenerServer).GetBankCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.listener/getBankCard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ListenerServer).GetBankCard(ctx, req.(*GetBankCardReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Listener_GetListenerWallet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetListenerWalletReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ListenerServer).GetListenerWallet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.listener/getListenerWallet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ListenerServer).GetListenerWallet(ctx, req.(*GetListenerWalletReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Listener_GetListenerCashLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetListenerCashLogReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ListenerServer).GetListenerCashLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.listener/getListenerCashLog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ListenerServer).GetListenerCashLog(ctx, req.(*GetListenerCashLogReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Listener_GetListenerIncomeLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetListenerIncomeLogReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ListenerServer).GetListenerIncomeLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.listener/getListenerIncomeLog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ListenerServer).GetListenerIncomeLog(ctx, req.(*GetListenerIncomeLogReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Listener_GetListenerRatingStat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetListenerRatingStatReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ListenerServer).GetListenerRatingStat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.listener/getListenerRatingStat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ListenerServer).GetListenerRatingStat(ctx, req.(*GetListenerRatingStatReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Listener_GetListenerWords_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetListenerWordsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ListenerServer).GetListenerWords(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.listener/getListenerWords",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ListenerServer).GetListenerWords(ctx, req.(*GetListenerWordsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Listener_EditListenerWords_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EditListenerWordsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ListenerServer).EditListenerWords(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.listener/editListenerWords",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ListenerServer).EditListenerWords(ctx, req.(*EditListenerWordsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Listener_UpdateListenerUserStat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateListenerUserStatReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ListenerServer).UpdateListenerUserStat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.listener/updateListenerUserStat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ListenerServer).UpdateListenerUserStat(ctx, req.(*UpdateListenerUserStatReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Listener_UpdateTodayListenerUserStat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTodayListenerUserStatReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ListenerServer).UpdateTodayListenerUserStat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.listener/updateTodayListenerUserStat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ListenerServer).UpdateTodayListenerUserStat(ctx, req.(*UpdateTodayListenerUserStatReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Listener_UpdateListenerDashboardStat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateListenerDashboardStatReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ListenerServer).UpdateListenerDashboardStat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.listener/updateListenerDashboardStat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ListenerServer).UpdateListenerDashboardStat(ctx, req.(*UpdateListenerDashboardStatReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Listener_FindListenerListRangeByUpdateTime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindListenerListRangeByUpdateTimeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ListenerServer).FindListenerListRangeByUpdateTime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.listener/findListenerListRangeByUpdateTime",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ListenerServer).FindListenerListRangeByUpdateTime(ctx, req.(*FindListenerListRangeByUpdateTimeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Listener_GetListenerHomePageDashboard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetListenerHomePageDashboardReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ListenerServer).GetListenerHomePageDashboard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.listener/getListenerHomePageDashboard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ListenerServer).GetListenerHomePageDashboard(ctx, req.(*GetListenerHomePageDashboardReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Listener_SnapshotLastDaysListenerStat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SnapshotLastDaysListenerStatReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ListenerServer).SnapshotLastDaysListenerStat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.listener/snapshotLastDaysListenerStat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ListenerServer).SnapshotLastDaysListenerStat(ctx, req.(*SnapshotLastDaysListenerStatReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Listener_UpdateListenerEveryDayAverageStat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateListenerEveryDayAverageStatReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ListenerServer).UpdateListenerEveryDayAverageStat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.listener/updateListenerEveryDayAverageStat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ListenerServer).UpdateListenerEveryDayAverageStat(ctx, req.(*UpdateListenerEveryDayAverageStatReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Listener_UpdateListenerSuggestion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateListenerSuggestionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ListenerServer).UpdateListenerSuggestion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.listener/updateListenerSuggestion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ListenerServer).UpdateListenerSuggestion(ctx, req.(*UpdateListenerSuggestionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Listener_UpdateListenerOnlineState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateListenerOnlineStateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ListenerServer).UpdateListenerOnlineState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.listener/updateListenerOnlineState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ListenerServer).UpdateListenerOnlineState(ctx, req.(*UpdateListenerOnlineStateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Listener_GenListenerContract_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenListenerContractReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ListenerServer).GenListenerContract(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.listener/genListenerContract",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ListenerServer).GenListenerContract(ctx, req.(*GenListenerContractReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Listener_AdminGetListenerProfileList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetListenerProfileListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ListenerServer).AdminGetListenerProfileList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.listener/adminGetListenerProfileList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ListenerServer).AdminGetListenerProfileList(ctx, req.(*GetListenerProfileListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Listener_AdminCheckListenerProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckListenerProfileReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ListenerServer).AdminCheckListenerProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.listener/adminCheckListenerProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ListenerServer).AdminCheckListenerProfile(ctx, req.(*CheckListenerProfileReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Listener_GetCommitMoveCash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCommitMoveCashReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ListenerServer).GetCommitMoveCash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.listener/getCommitMoveCash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ListenerServer).GetCommitMoveCash(ctx, req.(*GetCommitMoveCashReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Listener_GetListenerBasicInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetListenerBasicInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ListenerServer).GetListenerBasicInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.listener/getListenerBasicInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ListenerServer).GetListenerBasicInfo(ctx, req.(*GetListenerBasicInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Listener_UpdateRecommendListenerPool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRecommendListenerPoolReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ListenerServer).UpdateRecommendListenerPool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.listener/updateRecommendListenerPool",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ListenerServer).UpdateRecommendListenerPool(ctx, req.(*UpdateRecommendListenerPoolReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Listener_RecListenerWhenUserLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecListenerWhenUserLoginReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ListenerServer).RecListenerWhenUserLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.listener/recListenerWhenUserLogin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ListenerServer).RecListenerWhenUserLogin(ctx, req.(*RecListenerWhenUserLoginReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Listener_GetListenerMoveCashListByAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetListenerMoveCashListByAdminReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ListenerServer).GetListenerMoveCashListByAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.listener/getListenerMoveCashListByAdmin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ListenerServer).GetListenerMoveCashListByAdmin(ctx, req.(*GetListenerMoveCashListByAdminReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Listener_ServiceDesc is the grpc.ServiceDesc for Listener service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Listener_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.listener",
	HandlerType: (*ListenerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "addOrUpdateListenerProfileDraft",
			Handler:    _Listener_AddOrUpdateListenerProfileDraft_Handler,
		},
		{
			MethodName: "commitCheckNewListenerProfile",
			Handler:    _Listener_CommitCheckNewListenerProfile_Handler,
		},
		{
			MethodName: "getListenerProfileByUser",
			Handler:    _Listener_GetListenerProfileByUser_Handler,
		},
		{
			MethodName: "getListenerProfileByOwn",
			Handler:    _Listener_GetListenerProfileByOwn_Handler,
		},
		{
			MethodName: "listenerRemarkUser",
			Handler:    _Listener_ListenerRemarkUser_Handler,
		},
		{
			MethodName: "getListenerRemarkUser",
			Handler:    _Listener_GetListenerRemarkUser_Handler,
		},
		{
			MethodName: "getRecommendListenerListByUser",
			Handler:    _Listener_GetRecommendListenerListByUser_Handler,
		},
		{
			MethodName: "getRecommendListenerList",
			Handler:    _Listener_GetRecommendListenerList_Handler,
		},
		{
			MethodName: "getWorkState",
			Handler:    _Listener_GetWorkState_Handler,
		},
		{
			MethodName: "changeWorkState",
			Handler:    _Listener_ChangeWorkState_Handler,
		},
		{
			MethodName: "getListenerPrice",
			Handler:    _Listener_GetListenerPrice_Handler,
		},
		{
			MethodName: "updateListenerWallet",
			Handler:    _Listener_UpdateListenerWallet_Handler,
		},
		{
			MethodName: "updateListenerOrderStat",
			Handler:    _Listener_UpdateListenerOrderStat_Handler,
		},
		{
			MethodName: "setBankCard",
			Handler:    _Listener_SetBankCard_Handler,
		},
		{
			MethodName: "getBankCard",
			Handler:    _Listener_GetBankCard_Handler,
		},
		{
			MethodName: "getListenerWallet",
			Handler:    _Listener_GetListenerWallet_Handler,
		},
		{
			MethodName: "getListenerCashLog",
			Handler:    _Listener_GetListenerCashLog_Handler,
		},
		{
			MethodName: "getListenerIncomeLog",
			Handler:    _Listener_GetListenerIncomeLog_Handler,
		},
		{
			MethodName: "getListenerRatingStat",
			Handler:    _Listener_GetListenerRatingStat_Handler,
		},
		{
			MethodName: "getListenerWords",
			Handler:    _Listener_GetListenerWords_Handler,
		},
		{
			MethodName: "editListenerWords",
			Handler:    _Listener_EditListenerWords_Handler,
		},
		{
			MethodName: "updateListenerUserStat",
			Handler:    _Listener_UpdateListenerUserStat_Handler,
		},
		{
			MethodName: "updateTodayListenerUserStat",
			Handler:    _Listener_UpdateTodayListenerUserStat_Handler,
		},
		{
			MethodName: "updateListenerDashboardStat",
			Handler:    _Listener_UpdateListenerDashboardStat_Handler,
		},
		{
			MethodName: "findListenerListRangeByUpdateTime",
			Handler:    _Listener_FindListenerListRangeByUpdateTime_Handler,
		},
		{
			MethodName: "getListenerHomePageDashboard",
			Handler:    _Listener_GetListenerHomePageDashboard_Handler,
		},
		{
			MethodName: "snapshotLastDaysListenerStat",
			Handler:    _Listener_SnapshotLastDaysListenerStat_Handler,
		},
		{
			MethodName: "updateListenerEveryDayAverageStat",
			Handler:    _Listener_UpdateListenerEveryDayAverageStat_Handler,
		},
		{
			MethodName: "updateListenerSuggestion",
			Handler:    _Listener_UpdateListenerSuggestion_Handler,
		},
		{
			MethodName: "updateListenerOnlineState",
			Handler:    _Listener_UpdateListenerOnlineState_Handler,
		},
		{
			MethodName: "genListenerContract",
			Handler:    _Listener_GenListenerContract_Handler,
		},
		{
			MethodName: "adminGetListenerProfileList",
			Handler:    _Listener_AdminGetListenerProfileList_Handler,
		},
		{
			MethodName: "adminCheckListenerProfile",
			Handler:    _Listener_AdminCheckListenerProfile_Handler,
		},
		{
			MethodName: "getCommitMoveCash",
			Handler:    _Listener_GetCommitMoveCash_Handler,
		},
		{
			MethodName: "getListenerBasicInfo",
			Handler:    _Listener_GetListenerBasicInfo_Handler,
		},
		{
			MethodName: "updateRecommendListenerPool",
			Handler:    _Listener_UpdateRecommendListenerPool_Handler,
		},
		{
			MethodName: "recListenerWhenUserLogin",
			Handler:    _Listener_RecListenerWhenUserLogin_Handler,
		},
		{
			MethodName: "getListenerMoveCashListByAdmin",
			Handler:    _Listener_GetListenerMoveCashListByAdmin_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "listener.proto",
}
