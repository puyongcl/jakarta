// Code generated by goctl. DO NOT EDIT!
// Source: payment.proto

package payment

import (
	"context"

	"jakarta/app/payment/rpc/pb"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	CreatePaymentReq                   = pb.CreatePaymentReq
	CreatePaymentResp                  = pb.CreatePaymentResp
	GetPaymentByFlowNoReq              = pb.GetPaymentByFlowNoReq
	GetPaymentByFlowNoResp             = pb.GetPaymentByFlowNoResp
	GetSuccessPaymentFlowByOrderIdReq  = pb.GetSuccessPaymentFlowByOrderIdReq
	GetSuccessPaymentFlowByOrderIdResp = pb.GetSuccessPaymentFlowByOrderIdResp
	MoveCashReq                        = pb.MoveCashReq
	MoveCashResp                       = pb.MoveCashResp
	PaymentDetail                      = pb.PaymentDetail
	RequestRefundReq                   = pb.RequestRefundReq
	RequestRefundResp                  = pb.RequestRefundResp
	UpdateMoveCashStatusReq            = pb.UpdateMoveCashStatusReq
	UpdateMoveCashStatusResp           = pb.UpdateMoveCashStatusResp
	UpdateRefundReq                    = pb.UpdateRefundReq
	UpdateRefundResp                   = pb.UpdateRefundResp
	UpdateTradeStateReq                = pb.UpdateTradeStateReq
	UpdateTradeStateResp               = pb.UpdateTradeStateResp

	Payment interface {
		//  创建微信支付预处理订单
		CreatePayment(ctx context.Context, in *CreatePaymentReq, opts ...grpc.CallOption) (*CreatePaymentResp, error)
		//  根据流水号查询流水记录
		GetPaymentByFlowNo(ctx context.Context, in *GetPaymentByFlowNoReq, opts ...grpc.CallOption) (*GetPaymentByFlowNoResp, error)
		//  更新交易状态
		UpdateTradeState(ctx context.Context, in *UpdateTradeStateReq, opts ...grpc.CallOption) (*UpdateTradeStateResp, error)
		//  根据订单id查询流水记录
		GetSuccessPaymentFlowByOrderIdReq(ctx context.Context, in *GetSuccessPaymentFlowByOrderIdReq, opts ...grpc.CallOption) (*GetSuccessPaymentFlowByOrderIdResp, error)
		//  发起退款
		RequestRefund(ctx context.Context, in *RequestRefundReq, opts ...grpc.CallOption) (*RequestRefundResp, error)
		//  更新退款状态
		UpdateRefundState(ctx context.Context, in *UpdateRefundReq, opts ...grpc.CallOption) (*UpdateRefundResp, error)
		//  银行卡转账
		MoveCash(ctx context.Context, in *MoveCashReq, opts ...grpc.CallOption) (*MoveCashResp, error)
		//  更新转账状态
		UpdateMoveCashStatus(ctx context.Context, in *UpdateMoveCashStatusReq, opts ...grpc.CallOption) (*UpdateMoveCashStatusResp, error)
	}

	defaultPayment struct {
		cli zrpc.Client
	}
)

func NewPayment(cli zrpc.Client) Payment {
	return &defaultPayment{
		cli: cli,
	}
}

//  创建微信支付预处理订单
func (m *defaultPayment) CreatePayment(ctx context.Context, in *CreatePaymentReq, opts ...grpc.CallOption) (*CreatePaymentResp, error) {
	client := pb.NewPaymentClient(m.cli.Conn())
	return client.CreatePayment(ctx, in, opts...)
}

//  根据流水号查询流水记录
func (m *defaultPayment) GetPaymentByFlowNo(ctx context.Context, in *GetPaymentByFlowNoReq, opts ...grpc.CallOption) (*GetPaymentByFlowNoResp, error) {
	client := pb.NewPaymentClient(m.cli.Conn())
	return client.GetPaymentByFlowNo(ctx, in, opts...)
}

//  更新交易状态
func (m *defaultPayment) UpdateTradeState(ctx context.Context, in *UpdateTradeStateReq, opts ...grpc.CallOption) (*UpdateTradeStateResp, error) {
	client := pb.NewPaymentClient(m.cli.Conn())
	return client.UpdateTradeState(ctx, in, opts...)
}

//  根据订单id查询流水记录
func (m *defaultPayment) GetSuccessPaymentFlowByOrderIdReq(ctx context.Context, in *GetSuccessPaymentFlowByOrderIdReq, opts ...grpc.CallOption) (*GetSuccessPaymentFlowByOrderIdResp, error) {
	client := pb.NewPaymentClient(m.cli.Conn())
	return client.GetSuccessPaymentFlowByOrderIdReq(ctx, in, opts...)
}

//  发起退款
func (m *defaultPayment) RequestRefund(ctx context.Context, in *RequestRefundReq, opts ...grpc.CallOption) (*RequestRefundResp, error) {
	client := pb.NewPaymentClient(m.cli.Conn())
	return client.RequestRefund(ctx, in, opts...)
}

//  更新退款状态
func (m *defaultPayment) UpdateRefundState(ctx context.Context, in *UpdateRefundReq, opts ...grpc.CallOption) (*UpdateRefundResp, error) {
	client := pb.NewPaymentClient(m.cli.Conn())
	return client.UpdateRefundState(ctx, in, opts...)
}

//  银行卡转账
func (m *defaultPayment) MoveCash(ctx context.Context, in *MoveCashReq, opts ...grpc.CallOption) (*MoveCashResp, error) {
	client := pb.NewPaymentClient(m.cli.Conn())
	return client.MoveCash(ctx, in, opts...)
}

//  更新转账状态
func (m *defaultPayment) UpdateMoveCashStatus(ctx context.Context, in *UpdateMoveCashStatusReq, opts ...grpc.CallOption) (*UpdateMoveCashStatusResp, error) {
	client := pb.NewPaymentClient(m.cli.Conn())
	return client.UpdateMoveCashStatus(ctx, in, opts...)
}
