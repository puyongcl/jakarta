// Code generated by goctl. DO NOT EDIT!
// Source: payment.proto

package server

import (
	"context"

	"jakarta/app/payment/rpc/internal/logic"
	"jakarta/app/payment/rpc/internal/svc"
	"jakarta/app/payment/rpc/pb"
)

type PaymentServer struct {
	svcCtx *svc.ServiceContext
	pb.UnimplementedPaymentServer
}

func NewPaymentServer(svcCtx *svc.ServiceContext) *PaymentServer {
	return &PaymentServer{
		svcCtx: svcCtx,
	}
}

//  创建微信支付预处理订单
func (s *PaymentServer) CreatePayment(ctx context.Context, in *pb.CreatePaymentReq) (*pb.CreatePaymentResp, error) {
	l := logic.NewCreatePaymentLogic(ctx, s.svcCtx)
	return l.CreatePayment(in)
}

//  根据流水号查询流水记录
func (s *PaymentServer) GetPaymentByFlowNo(ctx context.Context, in *pb.GetPaymentByFlowNoReq) (*pb.GetPaymentByFlowNoResp, error) {
	l := logic.NewGetPaymentByFlowNoLogic(ctx, s.svcCtx)
	return l.GetPaymentByFlowNo(in)
}

//  更新交易状态
func (s *PaymentServer) UpdateTradeState(ctx context.Context, in *pb.UpdateTradeStateReq) (*pb.UpdateTradeStateResp, error) {
	l := logic.NewUpdateTradeStateLogic(ctx, s.svcCtx)
	return l.UpdateTradeState(in)
}

//  根据订单id查询流水记录
func (s *PaymentServer) GetSuccessPaymentFlowByOrderIdReq(ctx context.Context, in *pb.GetSuccessPaymentFlowByOrderIdReq) (*pb.GetSuccessPaymentFlowByOrderIdResp, error) {
	l := logic.NewGetSuccessPaymentFlowByOrderIdReqLogic(ctx, s.svcCtx)
	return l.GetSuccessPaymentFlowByOrderIdReq(in)
}

//  发起退款
func (s *PaymentServer) RequestRefund(ctx context.Context, in *pb.RequestRefundReq) (*pb.RequestRefundResp, error) {
	l := logic.NewRequestRefundLogic(ctx, s.svcCtx)
	return l.RequestRefund(in)
}

//  更新退款状态
func (s *PaymentServer) UpdateRefundState(ctx context.Context, in *pb.UpdateRefundReq) (*pb.UpdateRefundResp, error) {
	l := logic.NewUpdateRefundStateLogic(ctx, s.svcCtx)
	return l.UpdateRefundState(in)
}

//  银行卡转账
func (s *PaymentServer) MoveCash(ctx context.Context, in *pb.MoveCashReq) (*pb.MoveCashResp, error) {
	l := logic.NewMoveCashLogic(ctx, s.svcCtx)
	return l.MoveCash(in)
}

//  更新转账状态
func (s *PaymentServer) UpdateMoveCashStatus(ctx context.Context, in *pb.UpdateMoveCashStatusReq) (*pb.UpdateMoveCashStatusResp, error) {
	l := logic.NewUpdateMoveCashStatusLogic(ctx, s.svcCtx)
	return l.UpdateMoveCashStatus(in)
}
