version: '3'

######## 项目依赖的环境，启动项目之前要先启动此环境 #######

services:
  #jaeger链路追踪
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: jaeger
    restart: always
    ports:
      - "5775:5775/udp"
      - "6831:6831/udp"
      - "6832:6832/udp"
      - "5778:5778"
      - "16686:16686"
      - "14268:14268"
      - "9411:9411"
    environment:
      - SPAN_STORAGE_TYPE=elasticsearch
      - ES_SERVER_URLS=http://elasticsearch:9200
      - ES_USERNAME=elastic
      - ES_PASSWORD=jakarta2022
      - LOG_LEVEL=INFO
    networks:
      - jakarta_net

  #prometheus监控
  prometheus:
    image: prom/prometheus:v2.39.1
    container_name: prometheus
    environment:
      # 时区上海
      TZ: Asia/Shanghai
    volumes:
      - ./jakarta/deploy/test/prometheus/server/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./data/prometheus/data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    restart: always
    user: root
    ports:
      - 9090:9090
    networks:
      - jakarta_net

  #查看prometheus监控数据
  grafana:
    image: grafana/grafana:8.5.13
    container_name: grafana
    hostname: grafana
    user: root
    environment:
      # 时区上海
      TZ: Asia/Shanghai
    restart: always
    volumes:
      - ./data/grafana/data:/var/lib/grafana
    ports:
      - "3001:3000"
    networks:
      - jakarta_net

#  #搜集kafka业务日志、存储prometheus监控数据
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.17.6
    container_name: elasticsearch
    restart: always
    environment:
      - xpack.security.enabled=true
      - ELASTIC_USERNAME=elastic
      - ELASTIC_PASSWORD=jakarta2022
      - xpack.security.transport.ssl.enabled=true
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - TZ=Asia/Shanghai
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536
        hard: 65536
    cap_add:
      - IPC_LOCK
    volumes:
      - ./data/elasticsearch:/usr/share/elasticsearch/data
    ports:
      - 9200:9200
    networks:
      - jakarta_net

  kibana:
    container_name: kibana
    image: docker.elastic.co/kibana/kibana:7.17.6
    restart: always
    environment:
      - TZ=Asia/Shanghai
    ports:
      - 5601:5601
    volumes:
      - ./kibana.yml:/usr/share/kibana/config/kibana.yml
    networks:
      - jakarta_net
    depends_on:
      - elasticsearch

  #消费kafka中filebeat收集的数据输出到es
  go-stash:
    image: reg.domain.com/bogota/go-stash:latest
    container_name: go-stash
    environment:
      # 时区上海
      TZ: Asia/Shanghai
    #user: root
    restart: always
    volumes:
      - ./jakarta/deploy/test/go-stash/etc:/app/etc
    networks:
      - jakarta_net
    depends_on:
      - elasticsearch
      - kafka

  #收集业务数据
  filebeat:
    image: elastic/filebeat:7.17.6
    container_name: filebeat
    environment:
      # 时区上海
      TZ: Asia/Shanghai
    user: root
    restart: always
    entrypoint: "filebeat -e -strict.perms=false"  #解决配置文件权限问题
    volumes:
      - ./jakarta/deploy/test/filebeat/conf/filebeat.yml:/usr/share/filebeat/filebeat.yml
      # 此处需指定docker的containers目录，取决于你docker的配置
      # 如snap安装的docker，则为/var/snap/docker/common/var-lib-docker/containers
      # - /var/snap/docker/common/var-lib-docker/containers:/var/lib/docker/containers
      - /var/lib/docker/containers:/var/lib/docker/containers
    networks:
      - jakarta_net
    depends_on:
      - kafka


  #zookeeper是kafka的依赖
  zookeeper:
    image: docker.io/bitnami/zookeeper:3.7.1
    container_name: zookeeper
    restart: always
    ports:
      - "2181:2181"
    volumes:
      - "zookeeper_data:/bitnami"
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
      - TZ=Asia/Shanghai
    networks:
      - jakarta_net

  kafka:
    image: docker.io/bitnami/kafka:3.3.1
    container_name: kafka
    restart: always
    ports:
      - "9093:9093"
    volumes:
      - "kafka_data:/bitnami"
    environment:
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CLIENT:PLAINTEXT,EXTERNAL:PLAINTEXT
      - KAFKA_CFG_LISTENERS=CLIENT://:9092,EXTERNAL://:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=CLIENT://kafka:9092,EXTERNAL://10.0.0.7:9093
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=CLIENT
      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=false
      - TZ=Asia/Shanghai
    networks:
      - jakarta_net
    depends_on:
      - zookeeper

  #asynqmon asynq延迟队列、定时队列的webui
  asynqmon:
    image: hibiken/asynqmon:latest
    container_name: asynqmon
    ports:
      - 8980:8080
    command:
      - '--redis-addr=redis-asynq:6379'
      - '--redis-password=G62m50oigInC30sf'
    restart: always
    networks:
      - jakarta_net
    depends_on:
      - redis-asynq

  #redis容器
  redis:
    image: redis:6.2.7
    container_name: redis
    ports:
      - 36379:6379
    environment:
      # 时区上海
      TZ: Asia/Shanghai
    volumes:
      # 数据文件
      - ./data/redis/data:/data:rw
    command: "redis-server --requirepass G62m50oigInC30sf --appendonly yes"
    privileged: true
    restart: always
    networks:
      - jakarta_net

  #redis容器
  redis-asynq:
    image: redis:6.2.7
    container_name: redis-asynq
    ports:
      - 36380:6379
    environment:
      # 时区上海
      TZ: Asia/Shanghai
    volumes:
      # 数据文件
      - ./data/redis_asynq/data:/data:rw
    command: "redis-server --requirepass G62m50oigInC30sf --appendonly yes"
    privileged: true
    restart: always
    networks:
      - jakarta_net

  #redis容器
  redis-cache:
    image: redis:6.2.7
    container_name: redis-cache
    ports:
      - 36381:6379
    environment:
      # 时区上海
      TZ: Asia/Shanghai
    volumes:
      # 数据文件
      - ./data/redis_cache/data:/data:rw
    command: "redis-server --requirepass G62m50oigInC30sf --appendonly yes"
    privileged: true
    restart: always
    networks:
      - jakarta_net

  postgresql:
    image: postgres:14.5
    container_name: postgresql
    ports:
      - '5432:5432'
    volumes:
      - ./data/postgresql/data:/var/lib/postgresql/data
    restart: always
    environment:
      # 时区上海
      TZ: Asia/Shanghai
      PGTZ: Asia/Shanghai
      POSTGRES_PASSWORD: postgres
      POSTGRES_USER: jakarta
      POSTGRES_DB: jakarta_user
    networks:
      - jakarta_net

  #前端网关nginx-gateway
  nginx-gateway:
    image: nginx:1.21.6
    container_name: nginx-gateway
    restart: always
    privileged: true
    environment:
      - TZ=Asia/Shanghai
    ports:
      - 443:443
    volumes:
      - ./jakarta/deploy/test/nginx/conf:/etc/nginx/conf.d/:ro
      - ./data/nginx/log/:/var/log/nginx/:rw
      - ./jakarta/deploy/test/nginx/api_ssl/:/etc/nginx/ssl/:ro
      - ./jakarta/deploy/test/nginx/root/:/etc/nginx/root/:ro
    networks:
      - jakarta_net

  nginx-gateway_exporter:
    image: nginx/nginx-prometheus-exporter:0.11.0
    container_name: nginx-gateway_exporter
    hostname: nginx-gateway_exporter
    command:
      - '-nginx.scrape-uri=http://nginx-gateway:8080/stub_status'
    restart: always
    ports:
      - "9101:9113"
    networks:
      - jakarta_net

  nginx-gateway-third:
    image: nginx:1.21.6
    container_name: nginx-gateway-third
    restart: always
    privileged: true
    environment:
      - TZ=Asia/Shanghai
    ports:
      - 8888:443
    volumes:
      - ./jakarta/deploy/test/nginx-third/conf:/etc/nginx/conf.d/:ro
      - ./data/nginx-third/log/:/var/log/nginx/:rw
      - ./jakarta/deploy/test/nginx-third/third_ssl/:/etc/nginx/ssl/:ro
    networks:
      - jakarta_net

  nginx-gateway-tim:
    image: nginx:1.21.6
    container_name: nginx-gateway-tim
    restart: always
    privileged: true
    environment:
      - TZ=Asia/Shanghai
    ports:
      - 8887:443
    volumes:
      - ./jakarta/deploy/test/nginx-tim/conf:/etc/nginx/conf.d/:ro
      - ./data/nginx-tim/log/:/var/log/nginx/:rw
      - ./jakarta/deploy/test/nginx-tim/ssl/:/etc/nginx/ssl/:ro
    networks:
      - jakarta_net


networks:
  jakarta_net:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16


volumes:
  zookeeper_data:
    driver: local
  kafka_data:
    driver: local